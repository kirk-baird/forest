var searchIndex = JSON.parse('{\
"actor_interface":{"doc":"","i":[[0,"account","actor_interface","",null,null],[6,"Method","actor_interface::account","Account actor method.",null,null],[4,"State","","Account actor state.",null,null],[13,"V0","","",0,null],[13,"V2","","",0,null],[13,"V3","","",0,null],[13,"V4","","",0,null],[0,"cron","actor_interface","",null,null],[7,"ADDRESS","actor_interface::cron","Cron actor address.",null,null],[6,"Method","","Cron actor method.",null,null],[4,"State","","Cron actor state.",null,null],[13,"V0","","",1,null],[13,"V2","","",1,null],[13,"V3","","",1,null],[13,"V4","","",1,null],[0,"init","actor_interface","",null,null],[7,"ADDRESS","actor_interface::init","Init actor address.",null,null],[6,"Method","","Init actor method.",null,null],[4,"State","","Init actor state.",null,null],[13,"V0","","",2,null],[13,"V2","","",2,null],[13,"V3","","",2,null],[13,"V4","","",2,null],[0,"market","actor_interface","",null,null],[7,"ADDRESS","actor_interface::market","Market actor address.",null,null],[6,"Method","","Market actor method.",null,null],[4,"State","","Market actor state.",null,null],[13,"V0","","",3,null],[13,"V2","","",3,null],[13,"V3","","",3,null],[13,"V4","","",3,null],[4,"BalanceTable","","",null,null],[13,"V0","","",4,null],[13,"V2","","",4,null],[13,"V3","","",4,null],[13,"V4","","",4,null],[4,"DealProposals","","",null,null],[13,"V0","","",5,null],[13,"V2","","",5,null],[13,"V3","","",5,null],[13,"V4","","",5,null],[3,"DealProposal","","",null,null],[12,"piece_cid","","",6,null],[12,"piece_size","","",6,null],[12,"verified_deal","","",6,null],[12,"client","","",6,null],[12,"provider","","",6,null],[12,"label","","",6,null],[12,"start_epoch","","",6,null],[12,"end_epoch","","",6,null],[12,"storage_price_per_epoch","","",6,null],[12,"provider_collateral","","",6,null],[12,"client_collateral","","",6,null],[4,"DealStates","","",null,null],[13,"V0","","",7,null],[13,"V2","","",7,null],[13,"V3","","",7,null],[13,"V4","","",7,null],[3,"DealState","","",null,null],[12,"sector_start_epoch","","",8,null],[12,"last_updated_epoch","","",8,null],[12,"slash_epoch","","",8,null],[0,"miner","actor_interface","",null,null],[6,"Method","actor_interface::miner","Miner actor method.",null,null],[4,"State","","Miner actor state.",null,null],[13,"V0","","",9,null],[13,"V2","","",9,null],[13,"V3","","",9,null],[13,"V4","","",9,null],[3,"MinerInfo","","Static information about miner",null,null],[12,"owner","","",10,null],[12,"worker","","",10,null],[12,"new_worker","","",10,null],[12,"control_addresses","","",10,null],[12,"worker_change_epoch","","",10,null],[12,"peer_id","","",10,null],[12,"multiaddrs","","",10,null],[12,"window_post_proof_type","","",10,null],[12,"sector_size","","",10,null],[12,"window_post_partition_sectors","","",10,null],[12,"consensus_fault_elapsed","","",10,null],[4,"Deadline","","Deadline holds the state for all sectors due at a …",null,null],[13,"V0","","",11,null],[13,"V2","","",11,null],[13,"V3","","",11,null],[13,"V4","","",11,null],[4,"Partition","","",null,null],[13,"V0","","",12,null],[13,"V2","","",12,null],[13,"V3","","",12,null],[13,"V4","","",12,null],[3,"SectorOnChainInfo","","",null,null],[12,"sector_number","","",13,null],[12,"seal_proof","","The seal proof type implies the PoSt proofs",13,null],[12,"sealed_cid","","CommR",13,null],[12,"deal_ids","","",13,null],[12,"activation","","Epoch during which the sector proof was accepted",13,null],[12,"expiration","","Epoch during which the sector expires",13,null],[12,"deal_weight","","Integral of active deals over sector lifetime",13,null],[12,"verified_deal_weight","","Integral of active verified deals over sector lifetime",13,null],[12,"initial_pledge","","Pledge collected to commit this sector",13,null],[12,"expected_day_reward","","Expected one day projection of reward for sector computed …",13,null],[12,"expected_storage_pledge","","Expected twenty day projection of reward for sector …",13,null],[3,"SectorPreCommitOnChainInfo","","",null,null],[12,"info","","",14,null],[12,"pre_commit_deposit","","",14,null],[12,"pre_commit_epoch","","",14,null],[12,"deal_weight","","Integral of active deals over sector lifetime, 0 if …",14,null],[12,"verified_deal_weight","","Integral of active verified deals over sector lifetime",14,null],[3,"SectorPreCommitInfo","","",null,null],[12,"seal_proof","","",15,null],[12,"sector_number","","",15,null],[12,"sealed_cid","","CommR",15,null],[12,"seal_rand_epoch","","",15,null],[12,"deal_ids","","",15,null],[12,"expiration","","",15,null],[12,"replace_capacity","","Whether to replace a \\\"committed capacity\\\" no-deal sector …",15,null],[12,"replace_sector_deadline","","The committed capacity sector to replace, and its …",15,null],[12,"replace_sector_partition","","",15,null],[12,"replace_sector_number","","",15,null],[0,"multisig","actor_interface","",null,null],[6,"Method","actor_interface::multisig","Multisig actor method.",null,null],[4,"State","","Multisig actor state.",null,null],[13,"V0","","",16,null],[13,"V2","","",16,null],[13,"V3","","",16,null],[13,"V4","","",16,null],[0,"power","actor_interface","",null,null],[7,"ADDRESS","actor_interface::power","Power actor address. TODO: Select based on actors version",null,null],[6,"Method","","Power actor method. TODO: Select based on actor version",null,null],[4,"State","","Power actor state.",null,null],[13,"V0","","",17,null],[13,"V2","","",17,null],[13,"V3","","",17,null],[13,"V4","","",17,null],[3,"Claim","","",null,null],[12,"raw_byte_power","","Sum of raw byte power for a miner\'s sectors.",18,null],[12,"quality_adj_power","","Sum of quality adjusted power for a miner\'s sectors.",18,null],[0,"reward","actor_interface","",null,null],[7,"ADDRESS","actor_interface::reward","Reward actor address.",null,null],[6,"Method","","Reward actor method.",null,null],[4,"State","","Reward actor state.",null,null],[13,"V0","","",19,null],[13,"V2","","",19,null],[13,"V3","","",19,null],[13,"V4","","",19,null],[0,"system","actor_interface","",null,null],[7,"ADDRESS","actor_interface::system","System actor address.",null,null],[6,"Method","","System actor method.",null,null],[4,"State","","System actor state.",null,null],[13,"V0","","",20,null],[13,"V2","","",20,null],[13,"V3","","",20,null],[13,"V4","","",20,null],[4,"Array","actor_interface","",null,null],[13,"V0","","",21,null],[13,"V2","","",21,null],[13,"V3","","",21,null],[13,"V4","","",21,null],[4,"Map","","",null,null],[13,"V0","","",22,null],[13,"V2","","",22,null],[13,"V3","","",22,null],[13,"V4","","",22,null],[17,"EPOCH_DURATION_SECONDS","","",null,null],[17,"EPOCHS_IN_DAY","","",null,null],[7,"CHAOS_ACTOR_ADDR","","",null,null],[7,"BURNT_FUNDS_ACTOR_ADDR","","",null,null],[7,"RESERVE_ADDRESS","","",null,null],[5,"is_builtin_actor","","Returns true if the code belongs to a builtin actor.",null,[[["cid",3]],["bool",15]]],[5,"is_account_actor","","Returns true if the code belongs to an account actor.",null,[[["cid",3]],["bool",15]]],[5,"is_singleton_actor","","Returns true if the code belongs to a singleton actor.",null,[[["cid",3]],["bool",15]]],[5,"is_miner_actor","","Returns true if the code belongs to a miner actor.",null,[[["cid",3]],["bool",15]]],[3,"FilterEstimate","","",null,null],[12,"position","","",23,null],[12,"velocity","","",23,null],[17,"CHAIN_FINALITY","","",null,null],[4,"ActorVersion","","",null,null],[13,"V0","","",24,null],[13,"V2","","",24,null],[13,"V3","","",24,null],[13,"V4","","",24,null],[11,"from","","",21,[[]]],[11,"into","","",21,[[]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"vzip","","",21,[[]]],[11,"init","","",21,[[],["usize",15]]],[11,"deref","","",21,[[["usize",15]]]],[11,"deref_mut","","",21,[[["usize",15]]]],[11,"drop","","",21,[[["usize",15]]]],[11,"from","","",22,[[]]],[11,"into","","",22,[[]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"vzip","","",22,[[]]],[11,"init","","",22,[[],["usize",15]]],[11,"deref","","",22,[[["usize",15]]]],[11,"deref_mut","","",22,[[["usize",15]]]],[11,"drop","","",22,[[["usize",15]]]],[11,"from","actor_interface::account","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"init","","",0,[[],["usize",15]]],[11,"deref","","",0,[[["usize",15]]]],[11,"deref_mut","","",0,[[["usize",15]]]],[11,"drop","","",0,[[["usize",15]]]],[11,"from","actor_interface::cron","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"init","","",1,[[],["usize",15]]],[11,"deref","","",1,[[["usize",15]]]],[11,"deref_mut","","",1,[[["usize",15]]]],[11,"drop","","",1,[[["usize",15]]]],[11,"from","actor_interface::init","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"init","","",2,[[],["usize",15]]],[11,"deref","","",2,[[["usize",15]]]],[11,"deref_mut","","",2,[[["usize",15]]]],[11,"drop","","",2,[[["usize",15]]]],[11,"from","actor_interface::market","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"init","","",3,[[],["usize",15]]],[11,"deref","","",3,[[["usize",15]]]],[11,"deref_mut","","",3,[[["usize",15]]]],[11,"drop","","",3,[[["usize",15]]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"init","","",4,[[],["usize",15]]],[11,"deref","","",4,[[["usize",15]]]],[11,"deref_mut","","",4,[[["usize",15]]]],[11,"drop","","",4,[[["usize",15]]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"vzip","","",5,[[]]],[11,"init","","",5,[[],["usize",15]]],[11,"deref","","",5,[[["usize",15]]]],[11,"deref_mut","","",5,[[["usize",15]]]],[11,"drop","","",5,[[["usize",15]]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"vzip","","",6,[[]]],[11,"init","","",6,[[],["usize",15]]],[11,"deref","","",6,[[["usize",15]]]],[11,"deref_mut","","",6,[[["usize",15]]]],[11,"drop","","",6,[[["usize",15]]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"vzip","","",7,[[]]],[11,"init","","",7,[[],["usize",15]]],[11,"deref","","",7,[[["usize",15]]]],[11,"deref_mut","","",7,[[["usize",15]]]],[11,"drop","","",7,[[["usize",15]]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"vzip","","",8,[[]]],[11,"init","","",8,[[],["usize",15]]],[11,"deref","","",8,[[["usize",15]]]],[11,"deref_mut","","",8,[[["usize",15]]]],[11,"drop","","",8,[[["usize",15]]]],[11,"from","actor_interface::miner","",9,[[]]],[11,"into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"vzip","","",9,[[]]],[11,"init","","",9,[[],["usize",15]]],[11,"deref","","",9,[[["usize",15]]]],[11,"deref_mut","","",9,[[["usize",15]]]],[11,"drop","","",9,[[["usize",15]]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"vzip","","",10,[[]]],[11,"init","","",10,[[],["usize",15]]],[11,"deref","","",10,[[["usize",15]]]],[11,"deref_mut","","",10,[[["usize",15]]]],[11,"drop","","",10,[[["usize",15]]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"vzip","","",11,[[]]],[11,"init","","",11,[[],["usize",15]]],[11,"deref","","",11,[[["usize",15]]]],[11,"deref_mut","","",11,[[["usize",15]]]],[11,"drop","","",11,[[["usize",15]]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"vzip","","",12,[[]]],[11,"init","","",12,[[],["usize",15]]],[11,"deref","","",12,[[["usize",15]]]],[11,"deref_mut","","",12,[[["usize",15]]]],[11,"drop","","",12,[[["usize",15]]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"vzip","","",13,[[]]],[11,"init","","",13,[[],["usize",15]]],[11,"deref","","",13,[[["usize",15]]]],[11,"deref_mut","","",13,[[["usize",15]]]],[11,"drop","","",13,[[["usize",15]]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"vzip","","",14,[[]]],[11,"init","","",14,[[],["usize",15]]],[11,"deref","","",14,[[["usize",15]]]],[11,"deref_mut","","",14,[[["usize",15]]]],[11,"drop","","",14,[[["usize",15]]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"vzip","","",15,[[]]],[11,"init","","",15,[[],["usize",15]]],[11,"deref","","",15,[[["usize",15]]]],[11,"deref_mut","","",15,[[["usize",15]]]],[11,"drop","","",15,[[["usize",15]]]],[11,"from","actor_interface::multisig","",16,[[]]],[11,"into","","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"vzip","","",16,[[]]],[11,"init","","",16,[[],["usize",15]]],[11,"deref","","",16,[[["usize",15]]]],[11,"deref_mut","","",16,[[["usize",15]]]],[11,"drop","","",16,[[["usize",15]]]],[11,"from","actor_interface::power","",17,[[]]],[11,"into","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"vzip","","",17,[[]]],[11,"init","","",17,[[],["usize",15]]],[11,"deref","","",17,[[["usize",15]]]],[11,"deref_mut","","",17,[[["usize",15]]]],[11,"drop","","",17,[[["usize",15]]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"to_owned","","",18,[[]]],[11,"clone_into","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"vzip","","",18,[[]]],[11,"init","","",18,[[],["usize",15]]],[11,"deref","","",18,[[["usize",15]]]],[11,"deref_mut","","",18,[[["usize",15]]]],[11,"drop","","",18,[[["usize",15]]]],[11,"from","actor_interface::reward","",19,[[]]],[11,"into","","",19,[[]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"vzip","","",19,[[]]],[11,"init","","",19,[[],["usize",15]]],[11,"deref","","",19,[[["usize",15]]]],[11,"deref_mut","","",19,[[["usize",15]]]],[11,"drop","","",19,[[["usize",15]]]],[11,"from","actor_interface::system","",20,[[]]],[11,"into","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"vzip","","",20,[[]]],[11,"init","","",20,[[],["usize",15]]],[11,"deref","","",20,[[["usize",15]]]],[11,"deref_mut","","",20,[[["usize",15]]]],[11,"drop","","",20,[[["usize",15]]]],[11,"from","actor_interface","",23,[[]]],[11,"into","","",23,[[]]],[11,"to_owned","","",23,[[]]],[11,"clone_into","","",23,[[]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"vzip","","",23,[[]]],[11,"init","","",23,[[],["usize",15]]],[11,"deref","","",23,[[["usize",15]]]],[11,"deref_mut","","",23,[[["usize",15]]]],[11,"drop","","",23,[[["usize",15]]]],[11,"from","","",24,[[]]],[11,"into","","",24,[[]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"vzip","","",24,[[]]],[11,"init","","",24,[[],["usize",15]]],[11,"deref","","",24,[[["usize",15]]]],[11,"deref_mut","","",24,[[["usize",15]]]],[11,"drop","","",24,[[["usize",15]]]],[11,"from","actor_interface::market","",6,[[["dealproposal",3]]]],[11,"from","","",6,[[["dealproposal",3]]]],[11,"from","","",6,[[["dealproposal",3]]]],[11,"from","","",6,[[["dealproposal",3]]]],[11,"from","","",8,[[["dealstate",3]]]],[11,"from","","",8,[[["dealstate",3]]]],[11,"from","","",8,[[["dealstate",3]]]],[11,"from","","",8,[[["dealstate",3]]]],[11,"from","actor_interface::miner","",13,[[["sectoronchaininfo",3]]]],[11,"from","","",13,[[["sectoronchaininfo",3]]]],[11,"from","","",13,[[["sectoronchaininfo",3]]]],[11,"from","","",13,[[["sectoronchaininfo",3]]]],[11,"from","","",14,[[["sectorprecommitonchaininfo",3]]]],[11,"from","","",14,[[["sectorprecommitonchaininfo",3]]]],[11,"from","","",14,[[["sectorprecommitonchaininfo",3]]]],[11,"from","","",14,[[["sectorprecommitonchaininfo",3]]]],[11,"from","","",15,[[["sectorprecommitinfo",3]]]],[11,"from","","",15,[[["sectorprecommitinfo",3]]]],[11,"from","","",15,[[["sectorprecommitinfo",3]]]],[11,"from","","",15,[[["sectorprecommitinfo",3]]]],[11,"from","actor_interface::power","",18,[[["claim",3]]]],[11,"from","","",18,[[["claim",3]]]],[11,"from","","",18,[[["claim",3]]]],[11,"from","","",18,[[["claim",3]]]],[11,"from","actor_interface","",23,[[["filterestimate",3]]]],[11,"from","","",23,[[["filterestimate",3]]]],[11,"from","","",23,[[["filterestimate",3]]]],[11,"from","","",23,[[["filterestimate",3]]]],[11,"from","","",24,[[["networkversion",4]]]],[11,"from","","",24,[[["statetreeversion",4]]]],[11,"clone","actor_interface::power","",18,[[],["claim",3]]],[11,"clone","actor_interface","",23,[[],["filterestimate",3]]],[11,"default","actor_interface::power","",18,[[],["claim",3]]],[11,"default","actor_interface","",23,[[],["filterestimate",3]]],[11,"eq","actor_interface::miner","",10,[[["minerinfo",3]],["bool",15]]],[11,"ne","","",10,[[["minerinfo",3]],["bool",15]]],[11,"eq","actor_interface","",23,[[["filterestimate",3]],["bool",15]]],[11,"ne","","",23,[[["filterestimate",3]],["bool",15]]],[11,"fmt","actor_interface::miner","",10,[[["formatter",3]],["result",6]]],[11,"fmt","actor_interface::power","",18,[[["formatter",3]],["result",6]]],[11,"fmt","actor_interface","",23,[[["formatter",3]],["result",6]]],[11,"serialize","actor_interface::account","",0,[[],["result",4]]],[11,"serialize","actor_interface::cron","",1,[[],["result",4]]],[11,"serialize","actor_interface::init","",2,[[],["result",4]]],[11,"serialize","actor_interface::market","",3,[[],["result",4]]],[11,"serialize","","",6,[[],["result",4]]],[11,"serialize","","",8,[[],["result",4]]],[11,"serialize","actor_interface::miner","",9,[[],["result",4]]],[11,"serialize","","",10,[[],["result",4]]],[11,"serialize","","",13,[[],["result",4]]],[11,"serialize","","",14,[[],["result",4]]],[11,"serialize","","",15,[[],["result",4]]],[11,"serialize","actor_interface::multisig","",16,[[],["result",4]]],[11,"serialize","actor_interface::power","",17,[[],["result",4]]],[11,"serialize","","",18,[[],["result",4]]],[11,"serialize","actor_interface::reward","",19,[[],["result",4]]],[11,"serialize","actor_interface::system","",20,[[],["result",4]]],[11,"deserialize","actor_interface::miner","",15,[[],["result",4]]],[11,"new","actor_interface","",21,[[["actorversion",4]]]],[11,"load","","Load map with root",21,[[["actorversion",4],["cid",3]],[["result",4],["box",3]]]],[11,"count","","Gets count of elements added in the <code>Array</code>.",21,[[],["u64",15]]],[11,"get","","Get value at index of <code>Array</code>",21,[[["u64",15]],[["result",4],["option",4],["box",3]]]],[11,"set","","Set value at index",21,[[["u64",15]],[["result",4],["box",3]]]],[11,"delete","","Delete item from <code>Array</code> at index",21,[[["u64",15]],[["bool",15],["result",4],["box",3]]]],[11,"flush","","flush root and return Cid used as key in block store",21,[[],[["cid",3],["result",4],["box",3]]]],[11,"for_each","","Iterates over each value in the <code>Array</code> and runs a function …",21,[[],[["result",4],["box",3]]]],[11,"new","","",22,[[["actorversion",4]]]],[11,"load","","Load map with root",22,[[["actorversion",4],["cid",3]],[["result",4],["box",3]]]],[11,"store","","Returns a reference to the underlying store of the <code>Map</code>.",22,[[]]],[11,"set","","Inserts a key-value pair into the <code>Map</code>.",22,[[["byteskey",3]],[["result",4],["box",3]]]],[11,"get","","Returns a reference to the value corresponding to the key.",22,[[],[["result",4],["option",4],["box",3]]]],[11,"contains_key","","Returns <code>true</code> if a value exists for the given key in the …",22,[[],[["bool",15],["result",4],["box",3]]]],[11,"delete","","Removes a key from the <code>Map</code>, returning the value at the …",22,[[],[["result",4],["option",4],["box",3]]]],[11,"flush","","Flush root and return Cid for <code>Map</code>",22,[[],[["cid",3],["result",4],["box",3]]]],[11,"for_each","","Iterates over each KV in the <code>Map</code> and runs a function on …",22,[[],[["result",4],["box",3]]]],[11,"load","actor_interface::account","",0,[[["actorstate",3]],[["box",3],["state",4],["result",4]]]],[11,"pubkey_address","","",0,[[],["address",3]]],[11,"load","actor_interface::cron","",1,[[["actorstate",3]],[["result",4],["box",3],["state",4]]]],[11,"load","actor_interface::init","",2,[[["actorstate",3]],[["state",4],["box",3],["result",4]]]],[11,"map_address_to_new_id","","Allocates a new ID address and stores a mapping of the …",2,[[["address",3]],[["result",4],["address",3],["box",3]]]],[11,"resolve_address","","ResolveAddress resolves an address to an ID-address, if …",2,[[["address",3]],[["result",4],["box",3],["option",4]]]],[11,"into_network_name","","",2,[[],["string",3]]],[11,"load","actor_interface::market","",3,[[["actorstate",3]],[["result",4],["box",3],["state",4]]]],[11,"escrow_table","","Loads escrow table",3,[[],[["result",4],["balancetable",4],["box",3]]]],[11,"locked_table","","Loads locked funds table",3,[[],[["result",4],["balancetable",4],["box",3]]]],[11,"proposals","","Deal proposals",3,[[],[["dealproposals",4],["result",4],["box",3]]]],[11,"states","","Deal proposal meta data.",3,[[],[["dealstates",4],["result",4],["box",3]]]],[11,"total_locked","","Consume state to return just total funds locked",3,[[],["tokenamount",6]]],[11,"verify_deals_for_activation","","Validates a collection of deal dealProposals for …",3,[[["address",3],["chainepoch",6]],[["result",4],["box",3]]]],[11,"for_each","","",5,[[],[["result",4],["box",3]]]],[11,"get","","",7,[[["u64",15]],[["result",4],["box",3],["option",4]]]],[11,"get","","",4,[[["address",3]],[["tokenamount",6],["box",3],["result",4]]]],[11,"load","actor_interface::miner","",9,[[["actorstate",3]],[["box",3],["result",4],["state",4]]]],[11,"info","","",9,[[],[["result",4],["box",3],["minerinfo",3]]]],[11,"for_each_deadline","","Loads deadlines for a miner\'s state",9,[[],[["result",4],["box",3]]]],[11,"load_deadline","","Loads deadline at index for a miner\'s state",9,[[["u64",15]],[["deadline",4],["result",4],["box",3]]]],[11,"load_sectors","","Loads sectors corresponding to the bitfield. If no …",9,[[["option",4],["bitfield",3]],[["result",4],["vec",3],["box",3]]]],[11,"get_precommitted_sector","","Gets pre committed on chain info",9,[[["sectornumber",6]],[["result",4],["box",3],["option",4]]]],[11,"get_sector","","Loads a specific sector number",9,[[["u64",15]],[["box",3],["result",4],["option",4]]]],[11,"deadline_info","","Loads deadline at index for a miner\'s state",9,[[["chainepoch",6]],["deadlineinfo",3]]],[11,"fee_debt","","Gets fee debt of miner state",9,[[],["tokenamount",6]]],[11,"num_deadlines","","Number of post period deadlines.",9,[[],["u64",15]]],[11,"worker","","",10,[[],["address",3]]],[11,"sector_size","","",10,[[],["sectorsize",4]]],[11,"for_each","","For each partition of the deadline",11,[[],[["result",4],["box",3]]]],[11,"disputable_proof_count","","",11,[[],[["usize",15],["result",4],["box",3]]]],[11,"partitions_posted","","",11,[[],["bitfield",3]]],[11,"all_sectors","","",12,[[],["bitfield",3]]],[11,"faulty_sectors","","",12,[[],["bitfield",3]]],[11,"recovering_sectors","","",12,[[],["bitfield",3]]],[11,"live_sectors","","",12,[[],["bitfield",3]]],[11,"active_sectors","","",12,[[],["bitfield",3]]],[11,"load","actor_interface::multisig","",16,[[["actorstate",3]],[["result",4],["box",3],["state",4]]]],[11,"load","actor_interface::power","",17,[[["actorstate",3]],[["result",4],["state",4],["box",3]]]],[11,"into_total_quality_adj_power","","Consume state to return just total quality adj power",17,[[],["storagepower",6]]],[11,"total_power","","Returns the total power claim.",17,[[],["claim",3]]],[11,"into_total_locked","","Consume state to return total locked funds",17,[[],["tokenamount",6]]],[11,"miner_power","","Loads power for a given miner, if exists.",17,[[["address",3]],[["option",4],["result",4],["box",3]]]],[11,"list_all_miners","","Loads power for a given miner, if exists.",17,[[],[["vec",3],["box",3],["result",4]]]],[11,"miner_nominal_power_meets_consensus_minimum","","Checks power actor state for if miner meets minimum …",17,[[["address",3]],[["bool",15],["result",4],["box",3]]]],[11,"total_power_smoothed","","Returns this_epoch_qa_power_smoothed from the state.",17,[[],["filterestimate",3]]],[11,"total_locked","","Returns total locked funds",17,[[],["tokenamount",6]]],[11,"load","actor_interface::reward","",19,[[["actorstate",3]],[["state",4],["box",3],["result",4]]]],[11,"into_total_storage_power_reward","","Consume state to return just storage power reward",19,[[],["storagepower",6]]],[11,"pre_commit_deposit_for_power","","",19,[[["storagepower",6],["filterestimate",3]],["tokenamount",6]]],[11,"initial_pledge_for_power","","",19,[[["tokenamount",6],["storagepower",6],["filterestimate",3]],["tokenamount",6]]],[11,"load","actor_interface::system","",20,[[["actorstate",3]],[["state",4],["box",3],["result",4]]]]],"p":[[4,"State"],[4,"State"],[4,"State"],[4,"State"],[4,"BalanceTable"],[4,"DealProposals"],[3,"DealProposal"],[4,"DealStates"],[3,"DealState"],[4,"State"],[3,"MinerInfo"],[4,"Deadline"],[4,"Partition"],[3,"SectorOnChainInfo"],[3,"SectorPreCommitOnChainInfo"],[3,"SectorPreCommitInfo"],[4,"State"],[4,"State"],[3,"Claim"],[4,"State"],[4,"State"],[4,"Array"],[4,"Map"],[3,"FilterEstimate"],[4,"ActorVersion"]]},\
"auth":{"doc":"","i":[[17,"JWT_IDENTIFIER","auth","constant string that is used to identify the JWT secret …",null,null],[17,"ADMIN","","Admin permissions",null,null],[17,"SIGN","","Signing permissions",null,null],[17,"WRITE","","Writing permissions",null,null],[17,"READ","","Reading permissions",null,null],[17,"WRITE_ACCESS","","All methods that require write permission",null,null],[4,"Error","","Error Enum for Authentication",null,null],[13,"MethodParam","","Filecoin Method does not exist",0,null],[13,"InvalidPermissions","","Invalid permissions to use specified method",0,null],[13,"NoAuthHeader","","Missing authentication header",0,null],[13,"Other","","",0,null],[5,"create_token","","Create a new JWT Token",null,[[["vec",3],["string",3]],[["jwtresult",6],["string",3]]]],[5,"verify_token","","Verify JWT Token and return the allowed permissions from …",null,[[["str",15]],[["vec",3],["jwtresult",6]]]],[5,"has_perms","","Check whether or not header has required permissions",null,[[["string",3],["str",15]],[["jsonrpcerror",4],["result",4]]]],[5,"generate_priv_key","","",null,[[],["keyinfo",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"erased_serialize","","",0,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"serialize","","",0,[[],["result",4]]],[11,"deserialize","","",0,[[],["result",4]]]],"p":[[4,"Error"]]},\
"beacon":{"doc":"","i":[[0,"beacon_entries","beacon","",null,null],[0,"json","beacon::beacon_entries","",null,null],[0,"vec","beacon::beacon_entries::json","",null,null],[5,"serialize","beacon::beacon_entries::json::vec","",null,[[],["result",4]]],[5,"deserialize","","",null,[[],[["vec",3],["result",4]]]],[3,"BeaconEntryJson","beacon::beacon_entries::json","Wrapper for serializing and deserializing a BeaconEntry …",null,null],[12,"0","","",0,null],[3,"BeaconEntryJsonRef","","Wrapper for serializing a BeaconEntry reference to JSON.",null,null],[12,"0","","",1,null],[5,"serialize","","",null,[[["beaconentry",3]],["result",4]]],[5,"deserialize","","",null,[[],[["result",4],["beaconentry",3]]]],[3,"BeaconEntry","beacon::beacon_entries","The result from getting an entry from Drand. The entry …",null,null],[11,"new","","",2,[[["u8",15],["vec",3],["u64",15]]]],[11,"round","","Returns the current round number.",2,[[],["u64",15]]],[11,"data","","The signature of message H(prev_round, prev_round.data, …",2,[[]]],[17,"IGNORE_DRAND_VAR","beacon","Enviromental Variable to ignore Drand. Lotus parallel is …",null,null],[3,"DrandPublic","","Coeffiencients of the publicly available Drand keys. This …",null,null],[12,"coefficient","","Public key used to verify beacon entries.",3,null],[3,"DrandConfig","","Config used when initializing a Drand beacon.",null,null],[12,"server","","Url endpoint to send JSON http requests to.",4,null],[12,"chain_info","","Info about the beacon chain, used to verify correctness …",4,null],[3,"BeaconSchedule","","Contains the vector of BeaconPoints, which are mappings …",null,null],[12,"0","","",5,null],[3,"BeaconPoint","","Contains height at which the beacon is activated, as well …",null,null],[12,"height","","",6,null],[12,"beacon","","",6,null],[8,"Beacon","","Trait used as the interface to be able to retrieve bytes …",null,null],[10,"verify_entry","","Verify a new beacon entry against the most recent one …",7,[[["beaconentry",3],["beaconentry",3]],[["box",3],["pin",3]]]],[10,"entry","","Returns a BeaconEntry given a round. It fetches the …",7,[[["u64",15]],[["pin",3],["box",3]]]],[10,"max_beacon_round_for_epoch","","Returns the most recent beacon round for the given …",7,[[["chainepoch",6]],["u64",15]]],[3,"ChainInfo","","Contains all the info about a Drand beacon chain. API …",null,null],[12,"public_key","","",8,null],[12,"period","","",8,null],[12,"genesis_time","","",8,null],[12,"hash","","",8,null],[12,"group_hash","","",8,null],[3,"BeaconEntryJson","","Json beacon entry format. This matches the drand round …",null,null],[3,"DrandBeacon","","Drand randomness beacon that can be used to generate …",null,null],[3,"MockBeacon","","Mock beacon used for testing. Deterministic based on an …",null,null],[11,"from","beacon::beacon_entries::json","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","beacon::beacon_entries","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","beacon","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"vzip","","",5,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"vzip","","",6,[[]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"vzip","","",8,[[]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"vzip","","",9,[[]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"vzip","","",10,[[]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"vzip","","",11,[[]]],[11,"verify_entry","","",10,[[["beaconentry",3],["beaconentry",3]],[["box",3],["pin",3]]]],[11,"entry","","",10,[[["u64",15]],[["pin",3],["box",3]]]],[11,"max_beacon_round_for_epoch","","",10,[[["chainepoch",6]],["u64",15]]],[11,"verify_entry","","",11,[[["beaconentry",3],["beaconentry",3]],[["box",3],["pin",3]]]],[11,"entry","","",11,[[["u64",15]],[["box",3],["pin",3]]]],[11,"max_beacon_round_for_epoch","","",11,[[["i64",15]],["u64",15]]],[11,"from","beacon::beacon_entries","",2,[[["beaconentryjson",3]]]],[11,"clone","","",2,[[],["beaconentry",3]]],[11,"clone","beacon","",3,[[],["drandpublic",3]]],[11,"clone","","",4,[[],["drandconfig",3]]],[11,"clone","","",8,[[],["chaininfo",3]]],[11,"clone","","",9,[[],["beaconentryjson",3]]],[11,"default","beacon::beacon_entries","",2,[[],["beaconentry",3]]],[11,"default","beacon","",8,[[],["chaininfo",3]]],[11,"eq","beacon::beacon_entries","",2,[[["beaconentry",3]],["bool",15]]],[11,"ne","","",2,[[["beaconentry",3]],["bool",15]]],[11,"eq","beacon","",8,[[["chaininfo",3]],["bool",15]]],[11,"ne","","",8,[[["chaininfo",3]],["bool",15]]],[11,"fmt","beacon::beacon_entries","",2,[[["formatter",3]],["result",6]]],[11,"fmt","beacon","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"serialize","beacon::beacon_entries","",2,[[],["result",4]]],[11,"serialize","beacon::beacon_entries::json","",0,[[],["result",4]]],[11,"serialize","","",1,[[],["result",4]]],[11,"serialize","beacon","",3,[[],["result",4]]],[11,"serialize","","",8,[[],["result",4]]],[11,"serialize","","",9,[[],["result",4]]],[11,"deserialize","beacon::beacon_entries","",2,[[],["result",4]]],[11,"deserialize","beacon::beacon_entries::json","",0,[[],["result",4]]],[11,"deserialize","beacon","",3,[[],["result",4]]],[11,"deserialize","","",8,[[],["result",4]]],[11,"deserialize","","",9,[[],["result",4]]],[11,"key","","Returns the public key for the Drand beacon.",3,[[],[["publickey",3],["result",4],["error",4]]]],[11,"beacon_entries_for_block","","Returns the beacon entries for a given epoch. When the …",5,[[["beaconentry",3],["chainepoch",6]]]],[11,"beacon_for_epoch","","",5,[[["chainepoch",6]],[["box",3],["result",4]]]],[11,"new","","Construct a new DrandBeacon.",10,[[["drandconfig",3],["u64",15]]]],[11,"new","","",11,[[["duration",3]]]],[11,"round_time","","",11,[[],["duration",3]]]],"p":[[3,"BeaconEntryJson"],[3,"BeaconEntryJsonRef"],[3,"BeaconEntry"],[3,"DrandPublic"],[3,"DrandConfig"],[3,"BeaconSchedule"],[3,"BeaconPoint"],[8,"Beacon"],[3,"ChainInfo"],[3,"BeaconEntryJson"],[3,"DrandBeacon"],[3,"MockBeacon"]]},\
"chain":{"doc":"","i":[[0,"base_fee","chain","",null,null],[17,"BLOCK_GAS_TARGET","chain::base_fee","Used in calculating the base fee change.",null,null],[17,"BASE_FEE_MAX_CHANGE_DENOM","","Limits gas base fee change to 12.5% of the change.",null,null],[17,"INITIAL_BASE_FEE","","Genesis base fee.",null,null],[17,"PACKING_EFFICIENCY_DENOM","","",null,null],[17,"PACKING_EFFICIENCY_NUM","","",null,null],[3,"MINIMUM_BASE_FEE","","Minimum base fee amount allowed for the given [Tipset].",null,null],[5,"compute_base_fee","","",null,[[["tipset",3]],[["result",4],["bigint",3],["error",4]]]],[0,"headchange_json","chain","",null,null],[4,"HeadChangeJson","chain::headchange_json","",null,null],[13,"Current","","",0,null],[13,"Apply","","",0,null],[13,"Revert","","",0,null],[17,"BLOCK_GAS_TARGET","chain","Used in calculating the base fee change.",null,null],[17,"BASE_FEE_MAX_CHANGE_DENOM","","Limits gas base fee change to 12.5% of the change.",null,null],[17,"INITIAL_BASE_FEE","","Genesis base fee.",null,null],[17,"PACKING_EFFICIENCY_DENOM","","",null,null],[17,"PACKING_EFFICIENCY_NUM","","",null,null],[3,"MINIMUM_BASE_FEE","","Minimum base fee amount allowed for the given [Tipset].",null,null],[5,"compute_base_fee","","",null,[[["tipset",3]],[["result",4],["bigint",3],["error",4]]]],[4,"HeadChange","","Enum for pubsub channel that defines message type variant …",null,null],[13,"Current","","",1,null],[13,"Apply","","",1,null],[13,"Revert","","",1,null],[3,"ChainStore","","Stores chain data such as heaviest tipset and cached …",null,null],[12,"db","","key-value datastore.",2,null],[5,"block_messages","","Returns a Tuple of bls messages of type UnsignedMessage …",null,[[["blockheader",3]],[["result",4],["error",4]]]],[5,"block_messages_from_cids","","Returns a tuple of UnsignedMessage and SignedMessages …",null,[[],[["result",4],["error",4]]]],[5,"read_msg_cids","","Returns a tuple of cids for both Unsigned and Signed …",null,[[["cid",3]],[["error",4],["result",4]]]],[5,"set_genesis","","Sets the genesis key in the BlockStore. Be careful if …",null,[[["blockheader",3]],[["result",4],["cid",3],["error",4]]]],[5,"persist_objects","","Persists slice of serializable objects to blockstore.",null,[[],[["result",4],["error",4]]]],[5,"draw_randomness","","Computes a pseudorandom 32 byte Vec.",null,[[["chainepoch",6],["domainseparationtag",4]],[["result",4],["box",3]]]],[5,"genesis","","Returns the genesis block from storage.",null,[[],[["error",4],["result",4],["option",4]]]],[5,"get_chain_message","","Attempts to deserialize to unsigend message or signed …",null,[[["cid",3]],[["chainmessage",4],["result",4],["error",4]]]],[5,"messages_for_tipset","","Given a tipset this function will return all unique …",null,[[["tipset",3]],[["vec",3],["result",4],["error",4]]]],[5,"messages_from_cids","","Returns messages from key-value store based on a slice of …",null,[[],[["result",4],["vec",3],["error",4]]]],[5,"get_parent_reciept","","Returns parent message receipt given block_header and …",null,[[["usize",15],["blockheader",3]],[["error",4],["result",4],["option",4]]]],[5,"weight","","Returns the weight of provided [Tipset]. This function …",null,[[["tipset",3]],[["bigint",3],["result",4],["string",3]]]],[4,"Error","","Chain error",null,null],[13,"UndefinedKey","","Key was not found",3,null],[13,"NoBlocks","","Tipset contains no blocks",3,null],[13,"NotFound","","Key not found in database",3,null],[13,"DB","","Error originating from key-value store",3,null],[13,"Blockchain","","Error originating constructing blockchain structures",3,null],[13,"Encoding","","Error originating from encoding arbitrary data",3,null],[13,"Cid","","Error originating from Cid creation",3,null],[13,"State","","Amt error",3,null],[13,"Other","","Other chain error",3,null],[11,"from","chain::base_fee","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"init","","",4,[[],["usize",15]]],[11,"deref","","",4,[[["usize",15]]]],[11,"deref_mut","","",4,[[["usize",15]]]],[11,"drop","","",4,[[["usize",15]]]],[11,"from","chain::headchange_json","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"init","","",0,[[],["usize",15]]],[11,"deref","","",0,[[["usize",15]]]],[11,"deref_mut","","",0,[[["usize",15]]]],[11,"drop","","",0,[[["usize",15]]]],[11,"from","chain","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"init","","",1,[[],["usize",15]]],[11,"deref","","",1,[[["usize",15]]]],[11,"deref_mut","","",1,[[["usize",15]]]],[11,"drop","","",1,[[["usize",15]]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"init","","",2,[[],["usize",15]]],[11,"deref","","",2,[[["usize",15]]]],[11,"deref_mut","","",2,[[["usize",15]]]],[11,"drop","","",2,[[["usize",15]]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_string","","",3,[[],["string",3]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"init","","",3,[[],["usize",15]]],[11,"deref","","",3,[[["usize",15]]]],[11,"deref_mut","","",3,[[["usize",15]]]],[11,"drop","","",3,[[["usize",15]]]],[11,"from","chain::headchange_json","",0,[[["headchange",4]]]],[11,"from","chain","",3,[[["dberr",4]]]],[11,"from","","",3,[[["blkerr",4]]]],[11,"from","","",3,[[["ciderr",4]]]],[11,"from","","",3,[[["encerr",3]],["error",4]]],[11,"from","","",3,[[["serdeerr",3]],["error",4]]],[11,"from","","",3,[[["amterr",4]],["error",4]]],[11,"from","","",3,[[["string",3]]]],[11,"from","","",3,[[["box",3],["stderror",8]]]],[11,"clone","","",1,[[],["headchange",4]]],[11,"deref","chain::base_fee","",4,[[],["bigint",3]]],[11,"fmt","chain","",1,[[["formatter",3]],["result",6]]],[11,"fmt","chain::headchange_json","",0,[[["formatter",3]],["result",6]]],[11,"fmt","chain","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"source","","",3,[[],[["error",8],["option",4]]]],[11,"initialize","chain::base_fee","",4,[[]]],[11,"serialize","chain::headchange_json","",0,[[],["result",4]]],[11,"deserialize","","",0,[[],["result",4]]],[11,"new","chain","",2,[[["arc",3]]]],[11,"set_heaviest_tipset","","Sets heaviest tipset within ChainStore and store its …",2,[[["arc",3],["tipset",3]]]],[11,"set_genesis","","Writes genesis to blockstore.",2,[[["blockheader",3]],[["result",4],["cid",3],["error",4]]]],[11,"add_to_tipset_tracker","","Adds a [BlockHeader] to the tipset tracker, which tracks …",2,[[["blockheader",3]]]],[11,"put_tipset","","Writes tipset block headers to data store and updates …",2,[[["tipset",3]]]],[11,"genesis","","Returns genesis [BlockHeader] from the store based on a …",2,[[],[["error",4],["result",4],["option",4]]]],[11,"heaviest_tipset","","Returns the currently tracked heaviest tipset.",2,[[]]],[11,"publisher","","Returns a reference to the publisher of head changes.",2,[[],["publisher",3]]],[11,"blockstore","","Returns key-value store instance.",2,[[]]],[11,"blockstore_cloned","","Clones blockstore <code>Arc</code>.",2,[[],["arc",3]]],[11,"tipset_from_keys","","Returns Tipset from key-value store from provided cids",2,[[["tipsetkeys",3]]]],[11,"is_block_validated","","Checks store if block has already been validated. Key …",2,[[["cid",3]],[["bool",15],["result",4],["error",4]]]],[11,"mark_block_as_validated","","Marks block as validated in the store. This is retrieved …",2,[[["cid",3]],[["result",4],["error",4]]]],[11,"tipset_by_height","","Returns the tipset behind <code>tsk</code> at a given <code>height</code>. If the …",2,[[["arc",3],["chainepoch",6],["bool",15],["tipset",3]]]],[11,"get_chain_randomness","","Gets 32 bytes of randomness for ChainRand paramaterized …",2,[[["chainepoch",6],["domainseparationtag",4],["tipsetkeys",3]]]],[11,"get_beacon_randomness","","Gets 32 bytes of randomness for ChainRand paramaterized …",2,[[["chainepoch",6],["domainseparationtag",4],["tipsetkeys",3]]]],[11,"latest_beacon_entry","","Finds the latest beacon entry given a tipset up to 20 …",2,[[["tipset",3]]]],[11,"fill_tipset","","Constructs and returns a full tipset if messages from …",2,[[["tipset",3]],[["fulltipset",3],["option",4]]]],[11,"block_msgs_for_tipset","","Retrieves block messages to be passed through the VM.",2,[[["tipset",3]],[["vec",3],["result",4],["error",4]]]],[11,"messages_for_tipset","","Retrieves ordered valid messages from a <code>Tipset</code>. This will …",2,[[["tipset",3]],[["vec",3],["result",4],["error",4]]]],[11,"miner_load_actor_tsk","","get miner state given address and tipsetkeys",2,[[["address",3],["tipsetkeys",3]]]],[11,"export","","Exports a range of tipsets, as well as the state roots …",2,[[["chainepoch",6],["bool",15],["tipset",3]]]],[11,"sub_head_changes","","Subscribes to head changes. This function will send the …",2,[[]]],[11,"next_head_change","","",2,[[["i64",15]]]]],"p":[[4,"HeadChangeJson"],[4,"HeadChange"],[3,"ChainStore"],[4,"Error"],[3,"MINIMUM_BASE_FEE"]]},\
"chain_sync":{"doc":"","i":[[3,"BadBlockCache","chain_sync","Threadsafe cache for tracking bad blocks. This cache is …",null,null],[3,"ChainMuxer","","The ChainMuxer handles events from the p2p network and …",null,null],[3,"SyncConfig","","Struct that defines syncing configuration options",null,null],[12,"req_window","","Request window length for tipsets during chain exchange",0,null],[12,"tipset_sample_size","","Sample size of tipsets to acquire before determining what …",0,null],[4,"SyncStage","","Current state of the ChainSyncer using the ChainExchange …",null,null],[13,"Idle","","Idle state.",1,null],[13,"Headers","","Syncing headers from the heaviest tipset to genesis.",1,null],[13,"PersistHeaders","","Persisting headers on chain from heaviest to genesis.",1,null],[13,"Messages","","Syncing messages and performing state transitions.",1,null],[13,"Complete","","ChainSync completed and is following chain.",1,null],[13,"Error","","Error has occured while syncing.",1,null],[3,"SyncState","","State of the node\'s syncing process. This state is …",null,null],[3,"TipsetValidator","","",null,null],[12,"0","","",2,null],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"init","","",3,[[],["usize",15]]],[11,"deref","","",3,[[["usize",15]]]],[11,"deref_mut","","",3,[[["usize",15]]]],[11,"drop","","",3,[[["usize",15]]]],[11,"to_subset","","",3,[[],["option",4]]],[11,"is_in_subset","","",3,[[],["bool",15]]],[11,"to_subset_unchecked","","",3,[[]]],[11,"from_subset","","",3,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"init","","",0,[[],["usize",15]]],[11,"deref","","",0,[[["usize",15]]]],[11,"deref_mut","","",0,[[["usize",15]]]],[11,"drop","","",0,[[["usize",15]]]],[11,"to_subset","","",0,[[],["option",4]]],[11,"is_in_subset","","",0,[[],["bool",15]]],[11,"to_subset_unchecked","","",0,[[]]],[11,"from_subset","","",0,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"into_future","","",4,[[]]],[11,"into_future","","",4,[[]]],[11,"vzip","","",4,[[]]],[11,"init","","",4,[[],["usize",15]]],[11,"deref","","",4,[[["usize",15]]]],[11,"deref_mut","","",4,[[["usize",15]]]],[11,"drop","","",4,[[["usize",15]]]],[11,"to_subset","","",4,[[],["option",4]]],[11,"is_in_subset","","",4,[[],["bool",15]]],[11,"to_subset_unchecked","","",4,[[]]],[11,"from_subset","","",4,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"to_string","","",1,[[],["string",3]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"init","","",1,[[],["usize",15]]],[11,"deref","","",1,[[["usize",15]]]],[11,"deref_mut","","",1,[[["usize",15]]]],[11,"drop","","",1,[[["usize",15]]]],[11,"to_subset","","",1,[[],["option",4]]],[11,"is_in_subset","","",1,[[],["bool",15]]],[11,"to_subset_unchecked","","",1,[[]]],[11,"from_subset","","",1,[[]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"vzip","","",5,[[]]],[11,"init","","",5,[[],["usize",15]]],[11,"deref","","",5,[[["usize",15]]]],[11,"deref_mut","","",5,[[["usize",15]]]],[11,"drop","","",5,[[["usize",15]]]],[11,"to_subset","","",5,[[],["option",4]]],[11,"is_in_subset","","",5,[[],["bool",15]]],[11,"to_subset_unchecked","","",5,[[]]],[11,"from_subset","","",5,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"init","","",2,[[],["usize",15]]],[11,"deref","","",2,[[["usize",15]]]],[11,"deref_mut","","",2,[[["usize",15]]]],[11,"drop","","",2,[[["usize",15]]]],[11,"to_subset","","",2,[[],["option",4]]],[11,"is_in_subset","","",2,[[],["bool",15]]],[11,"to_subset_unchecked","","",2,[[]]],[11,"from_subset","","",2,[[]]],[11,"clone","","",0,[[],["syncconfig",3]]],[11,"clone","","",1,[[],["syncstage",4]]],[11,"clone","","",5,[[],["syncstate",3]]],[11,"default","","",3,[[]]],[11,"default","","",0,[[]]],[11,"default","","",1,[[]]],[11,"default","","",5,[[],["syncstate",3]]],[11,"eq","","",1,[[["syncstage",4]],["bool",15]]],[11,"eq","","",5,[[["syncstate",3]],["bool",15]]],[11,"ne","","",5,[[["syncstate",3]],["bool",15]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"poll","","",4,[[["pin",3],["context",3]],["poll",4]]],[11,"serialize","","",1,[[],["result",4]]],[11,"serialize","","",5,[[],["result",4]]],[11,"deserialize","","",0,[[],["result",4]]],[11,"new","","",3,[[["usize",15]]]],[11,"put","","Puts a bad block Cid in the cache with a given reason.",3,[[["string",3],["cid",3]]]],[11,"get","","Returns <code>Some</code> with the reason if the block cid is in bad …",3,[[["cid",3]]]],[11,"peek","","Returns <code>Some</code> with the reason if the block cid is in bad …",3,[[["cid",3]]]],[11,"new","","",0,[[["i64",15],["usize",15]]]],[11,"new","","",4,[[["statemanager",3],["arc",3],["tipset",3],["sender",3],["networkmessage",4],["arc",3],["networkevent",4],["arc",3],["receiver",3],["syncconfig",3],["messagepool",3],["sender",3],["arc",3],["beaconschedule",3],["receiver",3]]]],[11,"bad_blocks_cloned","","Returns a clone of the bad blocks cache to be used …",4,[[],[["badblockcache",3],["arc",3]]]],[11,"sync_state_cloned","","Returns a cloned <code>Arc</code> of the sync worker state.",4,[[],[["rwlock",3],["arc",3]]]],[11,"init","","Initializes the syncing state with base and target …",5,[[["tipset",3],["arc",3]]]],[11,"stage","","",5,[[],["syncstage",4]]],[11,"target","","Returns the current [Tipset] the",5,[[],["option",4]]],[11,"set_stage","","Sets the sync stage for the syncing state. If setting to …",5,[[["syncstage",4]]]],[11,"set_epoch","","Sets epoch of the sync.",5,[[["chainepoch",6]]]],[11,"error","","Sets error for the sync.",5,[[["string",3]]]],[11,"validate","","",2,[[["badblockcache",3],["chainstore",3],["tipset",3],["arc",3],["arc",3],["arc",3]]]],[11,"validate_epoch","","",2,[[["tipset",3],["arc",3]],[["tipsetvalidationerror",4],["result",4]]]],[11,"validate_msg_root","","",2,[[["block",3]],[["tipsetvalidationerror",4],["result",4]]]],[11,"compute_msg_root","","",2,[[],[["cid",3],["tipsetvalidationerror",4],["result",4]]]]],"p":[[3,"SyncConfig"],[4,"SyncStage"],[3,"TipsetValidator"],[3,"BadBlockCache"],[3,"ChainMuxer"],[3,"SyncState"]]},\
"commcid":{"doc":"","i":[[6,"Commitment","commcid","",null,null],[5,"commitment_to_cid","","CommitmentToCID converts a raw commitment hash to a CID …",null,[[["commitment",6],["u64",15]],[["str",15],["result",4],["cid",3]]]],[5,"cid_to_commitment","","CIDToCommitment extracts the raw commitment bytes, the …",null,[[["cid",3]],[["str",15],["result",4]]]],[5,"data_commitment_v1_to_cid","","DataCommitmentV1ToCID converts a raw data commitment to a …",null,[[["commitment",6]],[["str",15],["result",4],["cid",3]]]],[5,"cid_to_data_commitment_v1","","cid_to_data_commitment_v1 extracts the raw data …",null,[[["cid",3]],[["result",4],["commitment",6],["str",15]]]],[5,"replica_commitment_v1_to_cid","","ReplicaCommitmentV1ToCID converts a raw data commitment …",null,[[["commitment",6]],[["str",15],["result",4],["cid",3]]]],[5,"cid_to_replica_commitment_v1","","cid_to_replica_commitment_v1 extracts the raw replica …",null,[[["cid",3]],[["result",4],["commitment",6],["str",15]]]],[5,"piece_commitment_v1_to_cid","","piece_commitment_v1_to_cid converts a comm_p to a CID -- …",null,[[["commitment",6]],[["str",15],["result",4],["cid",3]]]],[5,"cid_to_piece_commitment_v1","","cid_to_piece_commitment_v1 converts a CID to a comm_p -- …",null,[[["cid",3]],[["result",4],["commitment",6],["str",15]]]]],"p":[]},\
"conformance_tests":{"doc":"","i":[],"p":[]},\
"fil_clock":{"doc":"","i":[[17,"EPOCH_DURATION_SECONDS","fil_clock","Duration of each tipset epoch.",null,null],[6,"ChainEpoch","","Epoch number of a chain. This acts as a proxy for time …",null,null],[17,"EPOCH_UNDEFINED","","Const used within the VM to denote an unset <code>ChainEpoch</code>",null,null]],"p":[]},\
"fil_types":{"doc":"","i":[[0,"build_version","fil_types","",null,null],[3,"CURRENT_COMMIT","fil_types::build_version","",null,null],[3,"BUILD_TYPE","","",null,null],[3,"RUNNING_NODE_TYPE","","",null,null],[3,"APIVersion","","Represents the current version of the API.",null,null],[12,"version","","",0,null],[12,"api_version","","",0,null],[12,"block_delay","","",0,null],[3,"Version","","Integer based value on version information. Highest order …",null,null],[4,"BuildType","","Build type for the node. This shares which build type the …",null,null],[13,"BuildDefault","","",1,null],[13,"Build2k","","",1,null],[13,"BuildDebug","","",1,null],[4,"NodeType","","The type of node that is running.",null,null],[13,"Unknown","","",2,null],[13,"Full","","",2,null],[13,"Miner","","",2,null],[13,"Worker","","",2,null],[5,"user_version","","Gets the formatted current user version.",null,[[]]],[0,"deadlines","fil_types","",null,null],[17,"NO_QUANTIZATION","fil_types::deadlines","Constant defining the [QuantSpec] which performs no …",null,null],[3,"QuantSpec","","A spec for quantization.",null,null],[12,"unit","","The unit of quantization",3,null],[12,"offset","","The offset from zero from which to base the modulus",3,null],[3,"DeadlineInfo","","Deadline calculations with respect to a current epoch. …",null,null],[12,"current_epoch","","Epoch at which this info was calculated.",4,null],[12,"period_start","","First epoch of the proving period (<= CurrentEpoch).",4,null],[12,"index","","Current deadline index, in […",4,null],[12,"open","","First epoch from which a proof may be submitted (>= …",4,null],[12,"close","","First epoch from which a proof may no longer be submitted …",4,null],[12,"challenge","","Epoch at which to sample the chain for challenge (< Open).",4,null],[12,"fault_cutoff","","First epoch at which a fault declaration is rejected (< …",4,null],[11,"new","","",4,[[["u64",15],["chainepoch",6]]]],[11,"period_started","","Whether the proving period has begun.",4,[[],["bool",15]]],[11,"period_elapsed","","Whether the proving period has elapsed.",4,[[],["bool",15]]],[11,"period_end","","The last epoch in the proving period.",4,[[],["chainepoch",6]]],[11,"next_period_start","","The first epoch in the next proving period.",4,[[],["chainepoch",6]]],[11,"is_open","","Whether the current deadline is currently open.",4,[[],["bool",15]]],[11,"has_elapsed","","Whether the current deadline has already closed.",4,[[],["bool",15]]],[11,"last","","The last epoch during which a proof may be submitted.",4,[[],["chainepoch",6]]],[11,"next_open","","Epoch at which the subsequent deadline opens.",4,[[],["chainepoch",6]]],[11,"fault_cutoff_passed","","Whether the deadline\'s fault cutoff has passed.",4,[[],["bool",15]]],[11,"next_not_elapsed","","Returns the next instance of this deadline that has not …",4,[[]]],[11,"quant_spec","","",4,[[],["quantspec",3]]],[0,"sector","fil_types","",null,null],[0,"post","fil_types::sector","",null,null],[0,"json","fil_types::sector::post","",null,null],[0,"vec","fil_types::sector::post::json","",null,null],[5,"serialize","fil_types::sector::post::json::vec","",null,[[],["result",4]]],[5,"deserialize","","",null,[[],[["result",4],["vec",3]]]],[3,"PoStProofJson","fil_types::sector::post::json","Wrapper for serializing a PoStProof to JSON.",null,null],[12,"0","","",5,null],[3,"PoStProofJsonRef","","Wrapper for serializing a PoStProof reference to JSON.",null,null],[12,"0","","",6,null],[3,"SectorInfoJson","","",null,null],[12,"proof","","",7,null],[12,"sector_number","","",7,null],[12,"sealed_cid","","",7,null],[5,"serialize","","",null,[[["postproof",3]],["result",4]]],[5,"deserialize","","",null,[[],[["result",4],["postproof",3]]]],[6,"PoStRandomness","fil_types::sector::post","Randomness type used for generating PoSt proof randomness.",null,null],[3,"SectorInfo","","Information about a sector necessary for PoSt verification",null,null],[12,"proof","","Used when sealing - needs to be mapped to PoSt registered …",8,null],[12,"sector_number","","",8,null],[12,"sealed_cid","","",8,null],[3,"PoStProof","","Proof of spacetime data stored on chain.",null,null],[12,"post_proof","","",9,null],[12,"proof_bytes","","",9,null],[3,"WinningPoStVerifyInfo","","Information needed to verify a Winning PoSt attached to a …",null,null],[12,"randomness","","",10,null],[12,"proofs","","",10,null],[12,"challenge_sectors","","",10,null],[12,"prover","","Used to derive 32-byte prover ID",10,null],[3,"WindowPoStVerifyInfo","","Information needed to verify a Window PoSt submitted …",null,null],[12,"randomness","","",11,null],[12,"proofs","","",11,null],[12,"challenged_sectors","","",11,null],[12,"prover","","",11,null],[3,"OnChainWindowPoStVerifyInfo","","Information submitted by a miner to provide a Window PoSt.",null,null],[12,"proofs","","",12,null],[4,"RegisteredSealProof","fil_types::sector","Seal proof type which defines the version and sector size.",null,null],[13,"StackedDRG2KiBV1","","",13,null],[13,"StackedDRG512MiBV1","","",13,null],[13,"StackedDRG8MiBV1","","",13,null],[13,"StackedDRG32GiBV1","","",13,null],[13,"StackedDRG64GiBV1","","",13,null],[13,"StackedDRG2KiBV1P1","","",13,null],[13,"StackedDRG512MiBV1P1","","",13,null],[13,"StackedDRG8MiBV1P1","","",13,null],[13,"StackedDRG32GiBV1P1","","",13,null],[13,"StackedDRG64GiBV1P1","","",13,null],[13,"Invalid","","",13,null],[4,"RegisteredPoStProof","","Proof of spacetime type, indicating version and sector …",null,null],[13,"StackedDRGWinning2KiBV1","","",14,null],[13,"StackedDRGWinning8MiBV1","","",14,null],[13,"StackedDRGWinning512MiBV1","","",14,null],[13,"StackedDRGWinning32GiBV1","","",14,null],[13,"StackedDRGWinning64GiBV1","","",14,null],[13,"StackedDRGWindow2KiBV1","","",14,null],[13,"StackedDRGWindow8MiBV1","","",14,null],[13,"StackedDRGWindow512MiBV1","","",14,null],[13,"StackedDRGWindow32GiBV1","","",14,null],[13,"StackedDRGWindow64GiBV1","","",14,null],[13,"Invalid","","",14,null],[6,"SealRandomness","","Randomness used for Seal proofs.",null,null],[6,"InteractiveSealRandomness","","Randomness used when verifying a seal proof. This is just …",null,null],[3,"SealVerifyInfo","","Information needed to verify a seal proof.",null,null],[12,"registered_proof","","",15,null],[12,"sector_id","","",15,null],[12,"deal_ids","","",15,null],[12,"randomness","","",15,null],[12,"interactive_randomness","","",15,null],[12,"proof","","",15,null],[12,"sealed_cid","","",15,null],[12,"unsealed_cid","","",15,null],[3,"SealVerifyParams","","SealVerifyParams is the structure of information that …",null,null],[12,"sealed_cid","","",16,null],[12,"interactive_epoch","","",16,null],[12,"registered_seal_proof","","",16,null],[12,"proof","","",16,null],[12,"deal_ids","","",16,null],[12,"sector_num","","",16,null],[12,"seal_rand_epoch","","",16,null],[6,"SectorNumber","","SectorNumber is a numeric identifier for a sector. It is …",null,null],[17,"MAX_SECTOR_NUMBER","","The maximum assignable sector number. Raising this would …",null,null],[6,"StoragePower","","Unit of storage power (measured in bytes)",null,null],[6,"Spacetime","","The unit of spacetime committed to the network",null,null],[6,"SectorQuality","","Unit of sector quality",null,null],[4,"SectorSize","","SectorSize indicates one of a set of possible sizes in …",null,null],[13,"_2KiB","","",17,null],[13,"_8MiB","","",17,null],[13,"_512MiB","","",17,null],[13,"_32GiB","","",17,null],[13,"_64GiB","","",17,null],[3,"SectorID","","Sector ID which contains the sector number and the actor …",null,null],[12,"miner","","",18,null],[12,"number","","",18,null],[0,"genesis","fil_types","",null,null],[4,"ActorType","fil_types::genesis","Different account variants. This is used with genesis …",null,null],[13,"Account","","",19,null],[13,"MultiSig","","",19,null],[3,"Actor","","All information needed to initialize an actor in genesis.",null,null],[12,"actor_type","","",20,null],[12,"balance","","",20,null],[12,"owner","","",20,null],[3,"Miner","","Defines all information needed for a miner in genesis.",null,null],[12,"owner","","",21,null],[12,"worker","","",21,null],[12,"peer_id","","",21,null],[12,"market_balance","","",21,null],[12,"power_balance","","",21,null],[12,"sector_size","","",21,null],[3,"Template","","Format of genesis file.",null,null],[12,"accounts","","",22,null],[12,"miners","","",22,null],[12,"network_name","","",22,null],[11,"new","","",22,[[["string",3]],["template",3]]],[0,"verifier","fil_types","",null,null],[4,"MockVerifier","fil_types::verifier","Mock verifier. This does no-op verification of any proofs.",null,null],[4,"FullVerifier","","Full verification implementation. This will verify all …",null,null],[8,"ProofVerifier","","Functionality for verification of seal, winning PoSt and …",null,null],[11,"verify_seal","","Verify seal proof for sectors. This proof verifies that a …",23,[[["sealverifyinfo",3]],[["result",4],["box",3]]]],[11,"verify_winning_post","","Verifies winning proof of spacetime. These proofs are …",23,[[["randomness",3],["u64",15]],[["result",4],["box",3]]]],[11,"verify_window_post","","Verifies window proof of spacetime. These proofs are …",23,[[["randomness",3],["u64",15]],[["result",4],["box",3]]]],[11,"generate_winning_post_sector_challenge","","Generates sector challenge indexes for use in winning …",23,[[["u64",15],["randomness",3],["registeredpostproof",4]],[["result",4],["vec",3],["box",3]]]],[5,"zero_piece_commitment","fil_types","Returns a zero piece commitment based on the amount of …",null,[[["paddedpiecesize",3]],["commitment",6]]],[3,"UnpaddedPieceSize","","Size of a piece in bytes.",null,null],[12,"0","","",24,null],[3,"PaddedPieceSize","","Size of a piece in bytes with padding.",null,null],[12,"0","","",25,null],[3,"PieceInfo","","Piece information for part or a whole file.",null,null],[12,"size","","Size in nodes. For BLS12-381 (capacity 254 bits), must be …",26,null],[12,"cid","","Content identifier for piece.",26,null],[3,"Randomness","","String of random bytes usually generated from a …",null,null],[12,"0","","",27,null],[4,"StateTreeVersion","","Specifies the version of the state tree",null,null],[13,"V0","","Corresponds to actors < v2",28,null],[13,"V1","","Corresponds to actors = v2",28,null],[13,"V2","","Corresponds to actors = v3",28,null],[13,"V3","","Corresponds to actors >= v4",28,null],[3,"StateRoot","","State root information. Contains information about the …",null,null],[12,"version","","State tree version",29,null],[12,"actors","","Actors tree. The structure depends on the state root …",29,null],[12,"info","","Info. The structure depends on the state root version.",29,null],[3,"StateInfo0","","Empty state tree information. This is serialized as an …",null,null],[4,"NetworkVersion","","Specifies the network version",null,null],[13,"V0","","genesis (specs-actors v0.9.3)",30,null],[13,"V1","","breeze (specs-actors v0.9.7)",30,null],[13,"V2","","smoke (specs-actors v0.9.8)",30,null],[13,"V3","","ignition (specs-actors v0.9.11)",30,null],[13,"V4","","actors v2 (specs-actors v2.0.x)",30,null],[13,"V5","","tape (increases max prove commit size by 10x)",30,null],[13,"V6","","kumquat (specs-actors v2.2.0)",30,null],[13,"V7","","calico (specs-actors v2.3.2)",30,null],[13,"V8","","persian (post-2.3.2 behaviour transition)",30,null],[13,"V9","","orange",30,null],[13,"V10","","actors v3 (specs-actors v3.0.x)",30,null],[13,"V11","","norwegian (specs-actor v3.1.x)",30,null],[13,"V12","","actors v3 (specs-actor v4.0.x)",30,null],[13,"V13","","reserved",30,null],[3,"TOTAL_FILECOIN","","Total Filecoin available to the network.",null,null],[3,"FIL_RESERVED","","Amount of total Filecoin reserved in a static ID address.",null,null],[3,"ZERO_ADDRESS","","Zero address used to avoid allowing it to be used for …",null,null],[6,"ActorID","","Identifier for Actors, includes builtin and initialized …",null,null],[17,"HAMT_BIT_WIDTH","","Default bit width for the hamt in the filecoin protocol.",null,null],[17,"BLOCK_GAS_LIMIT","","Total gas limit allowed per block. This is shared across …",null,null],[17,"TOTAL_FILECOIN_BASE","","Total Filecoin supply.",null,null],[17,"TICKET_RANDOMNESS_LOOKBACK","","Lookback height for retrieving ticket randomness.",null,null],[17,"WINNING_POST_SECTOR_SET_LOOKBACK","","Epochs to look back for verifying PoSt proofs.",null,null],[17,"BLOCKS_PER_EPOCH","","The expected number of block producers in each epoch.",null,null],[17,"FILECOIN_PRECISION","","Ratio of integer values to token value.",null,null],[17,"ALLOWABLE_CLOCK_DRIFT","","Allowable clock drift in validations.",null,null],[8,"NetworkParams","","Config trait which handles different network …",null,null],[18,"TOTAL_FILECOIN","","Total filecoin available to network.",31,null],[18,"MINING_REWARD_TOTAL","","Available rewards for mining.",31,null],[11,"initial_reward_balance","","Initial reward actor balance. This function is only …",31,[[],["bigint",3]]],[11,"from_fil","","Convert integer value of tokens into BigInt based on the …",31,[[["i64",15]],["bigint",3]]],[3,"DefaultNetworkParams","","Params for the network. This is now continued on into …",null,null],[11,"from","fil_types::build_version","",32,[[]]],[11,"into","","",32,[[]]],[11,"borrow","","",32,[[]]],[11,"borrow_mut","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"try_into","","",32,[[],["result",4]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"vzip","","",32,[[]]],[11,"init","","",32,[[],["usize",15]]],[11,"deref","","",32,[[["usize",15]]]],[11,"deref_mut","","",32,[[["usize",15]]]],[11,"drop","","",32,[[["usize",15]]]],[11,"from","","",33,[[]]],[11,"into","","",33,[[]]],[11,"borrow","","",33,[[]]],[11,"borrow_mut","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"try_into","","",33,[[],["result",4]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"vzip","","",33,[[]]],[11,"init","","",33,[[],["usize",15]]],[11,"deref","","",33,[[["usize",15]]]],[11,"deref_mut","","",33,[[["usize",15]]]],[11,"drop","","",33,[[["usize",15]]]],[11,"from","","",34,[[]]],[11,"into","","",34,[[]]],[11,"borrow","","",34,[[]]],[11,"borrow_mut","","",34,[[]]],[11,"try_from","","",34,[[],["result",4]]],[11,"try_into","","",34,[[],["result",4]]],[11,"type_id","","",34,[[],["typeid",3]]],[11,"vzip","","",34,[[]]],[11,"init","","",34,[[],["usize",15]]],[11,"deref","","",34,[[["usize",15]]]],[11,"deref_mut","","",34,[[["usize",15]]]],[11,"drop","","",34,[[["usize",15]]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"init","","",0,[[],["usize",15]]],[11,"deref","","",0,[[["usize",15]]]],[11,"deref_mut","","",0,[[["usize",15]]]],[11,"drop","","",0,[[["usize",15]]]],[11,"from","","",35,[[]]],[11,"into","","",35,[[]]],[11,"to_string","","",35,[[],["string",3]]],[11,"borrow","","",35,[[]]],[11,"borrow_mut","","",35,[[]]],[11,"try_from","","",35,[[],["result",4]]],[11,"try_into","","",35,[[],["result",4]]],[11,"type_id","","",35,[[],["typeid",3]]],[11,"vzip","","",35,[[]]],[11,"init","","",35,[[],["usize",15]]],[11,"deref","","",35,[[["usize",15]]]],[11,"deref_mut","","",35,[[["usize",15]]]],[11,"drop","","",35,[[["usize",15]]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"init","","",1,[[],["usize",15]]],[11,"deref","","",1,[[["usize",15]]]],[11,"deref_mut","","",1,[[["usize",15]]]],[11,"drop","","",1,[[["usize",15]]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_string","","",2,[[],["string",3]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"init","","",2,[[],["usize",15]]],[11,"deref","","",2,[[["usize",15]]]],[11,"deref_mut","","",2,[[["usize",15]]]],[11,"drop","","",2,[[["usize",15]]]],[11,"from","fil_types::deadlines","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"init","","",3,[[],["usize",15]]],[11,"deref","","",3,[[["usize",15]]]],[11,"deref_mut","","",3,[[["usize",15]]]],[11,"drop","","",3,[[["usize",15]]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"init","","",4,[[],["usize",15]]],[11,"deref","","",4,[[["usize",15]]]],[11,"deref_mut","","",4,[[["usize",15]]]],[11,"drop","","",4,[[["usize",15]]]],[11,"from","fil_types","",24,[[]]],[11,"into","","",24,[[]]],[11,"to_owned","","",24,[[]]],[11,"clone_into","","",24,[[]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"vzip","","",24,[[]]],[11,"init","","",24,[[],["usize",15]]],[11,"deref","","",24,[[["usize",15]]]],[11,"deref_mut","","",24,[[["usize",15]]]],[11,"drop","","",24,[[["usize",15]]]],[11,"from","","",25,[[]]],[11,"into","","",25,[[]]],[11,"to_owned","","",25,[[]]],[11,"clone_into","","",25,[[]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"vzip","","",25,[[]]],[11,"init","","",25,[[],["usize",15]]],[11,"deref","","",25,[[["usize",15]]]],[11,"deref_mut","","",25,[[["usize",15]]]],[11,"drop","","",25,[[["usize",15]]]],[11,"from","","",26,[[]]],[11,"into","","",26,[[]]],[11,"to_owned","","",26,[[]]],[11,"clone_into","","",26,[[]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"vzip","","",26,[[]]],[11,"init","","",26,[[],["usize",15]]],[11,"deref","","",26,[[["usize",15]]]],[11,"deref_mut","","",26,[[["usize",15]]]],[11,"drop","","",26,[[["usize",15]]]],[11,"from","","",27,[[]]],[11,"into","","",27,[[]]],[11,"to_owned","","",27,[[]]],[11,"clone_into","","",27,[[]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"vzip","","",27,[[]]],[11,"init","","",27,[[],["usize",15]]],[11,"deref","","",27,[[["usize",15]]]],[11,"deref_mut","","",27,[[["usize",15]]]],[11,"drop","","",27,[[["usize",15]]]],[11,"from","fil_types::sector::post::json","",5,[[]]],[11,"into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"vzip","","",5,[[]]],[11,"init","","",5,[[],["usize",15]]],[11,"deref","","",5,[[["usize",15]]]],[11,"deref_mut","","",5,[[["usize",15]]]],[11,"drop","","",5,[[["usize",15]]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"vzip","","",6,[[]]],[11,"init","","",6,[[],["usize",15]]],[11,"deref","","",6,[[["usize",15]]]],[11,"deref_mut","","",6,[[["usize",15]]]],[11,"drop","","",6,[[["usize",15]]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"vzip","","",7,[[]]],[11,"init","","",7,[[],["usize",15]]],[11,"deref","","",7,[[["usize",15]]]],[11,"deref_mut","","",7,[[["usize",15]]]],[11,"drop","","",7,[[["usize",15]]]],[11,"from","fil_types::sector::post","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"vzip","","",8,[[]]],[11,"init","","",8,[[],["usize",15]]],[11,"deref","","",8,[[["usize",15]]]],[11,"deref_mut","","",8,[[["usize",15]]]],[11,"drop","","",8,[[["usize",15]]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"vzip","","",9,[[]]],[11,"init","","",9,[[],["usize",15]]],[11,"deref","","",9,[[["usize",15]]]],[11,"deref_mut","","",9,[[["usize",15]]]],[11,"drop","","",9,[[["usize",15]]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"vzip","","",10,[[]]],[11,"init","","",10,[[],["usize",15]]],[11,"deref","","",10,[[["usize",15]]]],[11,"deref_mut","","",10,[[["usize",15]]]],[11,"drop","","",10,[[["usize",15]]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"vzip","","",11,[[]]],[11,"init","","",11,[[],["usize",15]]],[11,"deref","","",11,[[["usize",15]]]],[11,"deref_mut","","",11,[[["usize",15]]]],[11,"drop","","",11,[[["usize",15]]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"vzip","","",12,[[]]],[11,"init","","",12,[[],["usize",15]]],[11,"deref","","",12,[[["usize",15]]]],[11,"deref_mut","","",12,[[["usize",15]]]],[11,"drop","","",12,[[["usize",15]]]],[11,"from","fil_types::sector","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"vzip","","",13,[[]]],[11,"init","","",13,[[],["usize",15]]],[11,"deref","","",13,[[["usize",15]]]],[11,"deref_mut","","",13,[[["usize",15]]]],[11,"drop","","",13,[[["usize",15]]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"to_owned","","",14,[[]]],[11,"clone_into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"vzip","","",14,[[]]],[11,"init","","",14,[[],["usize",15]]],[11,"deref","","",14,[[["usize",15]]]],[11,"deref_mut","","",14,[[["usize",15]]]],[11,"drop","","",14,[[["usize",15]]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"to_owned","","",15,[[]]],[11,"clone_into","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"vzip","","",15,[[]]],[11,"init","","",15,[[],["usize",15]]],[11,"deref","","",15,[[["usize",15]]]],[11,"deref_mut","","",15,[[["usize",15]]]],[11,"drop","","",15,[[["usize",15]]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"to_owned","","",16,[[]]],[11,"clone_into","","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"vzip","","",16,[[]]],[11,"init","","",16,[[],["usize",15]]],[11,"deref","","",16,[[["usize",15]]]],[11,"deref_mut","","",16,[[["usize",15]]]],[11,"drop","","",16,[[["usize",15]]]],[11,"from","","",17,[[]]],[11,"into","","",17,[[]]],[11,"to_owned","","",17,[[]]],[11,"clone_into","","",17,[[]]],[11,"to_string","","",17,[[],["string",3]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"vzip","","",17,[[]]],[11,"init","","",17,[[],["usize",15]]],[11,"deref","","",17,[[["usize",15]]]],[11,"deref_mut","","",17,[[["usize",15]]]],[11,"drop","","",17,[[["usize",15]]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"to_owned","","",18,[[]]],[11,"clone_into","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"vzip","","",18,[[]]],[11,"init","","",18,[[],["usize",15]]],[11,"deref","","",18,[[["usize",15]]]],[11,"deref_mut","","",18,[[["usize",15]]]],[11,"drop","","",18,[[["usize",15]]]],[11,"from","fil_types","",28,[[]]],[11,"into","","",28,[[]]],[11,"to_owned","","",28,[[]]],[11,"clone_into","","",28,[[]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"vzip","","",28,[[]]],[11,"init","","",28,[[],["usize",15]]],[11,"deref","","",28,[[["usize",15]]]],[11,"deref_mut","","",28,[[["usize",15]]]],[11,"drop","","",28,[[["usize",15]]]],[11,"from","","",29,[[]]],[11,"into","","",29,[[]]],[11,"borrow","","",29,[[]]],[11,"borrow_mut","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"try_into","","",29,[[],["result",4]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"vzip","","",29,[[]]],[11,"init","","",29,[[],["usize",15]]],[11,"deref","","",29,[[["usize",15]]]],[11,"deref_mut","","",29,[[["usize",15]]]],[11,"drop","","",29,[[["usize",15]]]],[11,"from","","",36,[[]]],[11,"into","","",36,[[]]],[11,"borrow","","",36,[[]]],[11,"borrow_mut","","",36,[[]]],[11,"try_from","","",36,[[],["result",4]]],[11,"try_into","","",36,[[],["result",4]]],[11,"type_id","","",36,[[],["typeid",3]]],[11,"vzip","","",36,[[]]],[11,"init","","",36,[[],["usize",15]]],[11,"deref","","",36,[[["usize",15]]]],[11,"deref_mut","","",36,[[["usize",15]]]],[11,"drop","","",36,[[["usize",15]]]],[11,"from","","",30,[[]]],[11,"into","","",30,[[]]],[11,"to_owned","","",30,[[]]],[11,"clone_into","","",30,[[]]],[11,"borrow","","",30,[[]]],[11,"borrow_mut","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"try_into","","",30,[[],["result",4]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"vzip","","",30,[[]]],[11,"init","","",30,[[],["usize",15]]],[11,"deref","","",30,[[["usize",15]]]],[11,"deref_mut","","",30,[[["usize",15]]]],[11,"drop","","",30,[[["usize",15]]]],[11,"from","fil_types::genesis","",19,[[]]],[11,"into","","",19,[[]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"vzip","","",19,[[]]],[11,"init","","",19,[[],["usize",15]]],[11,"deref","","",19,[[["usize",15]]]],[11,"deref_mut","","",19,[[["usize",15]]]],[11,"drop","","",19,[[["usize",15]]]],[11,"from","","",20,[[]]],[11,"into","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"vzip","","",20,[[]]],[11,"init","","",20,[[],["usize",15]]],[11,"deref","","",20,[[["usize",15]]]],[11,"deref_mut","","",20,[[["usize",15]]]],[11,"drop","","",20,[[["usize",15]]]],[11,"from","","",21,[[]]],[11,"into","","",21,[[]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"vzip","","",21,[[]]],[11,"init","","",21,[[],["usize",15]]],[11,"deref","","",21,[[["usize",15]]]],[11,"deref_mut","","",21,[[["usize",15]]]],[11,"drop","","",21,[[["usize",15]]]],[11,"from","","",22,[[]]],[11,"into","","",22,[[]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"vzip","","",22,[[]]],[11,"init","","",22,[[],["usize",15]]],[11,"deref","","",22,[[["usize",15]]]],[11,"deref_mut","","",22,[[["usize",15]]]],[11,"drop","","",22,[[["usize",15]]]],[11,"from","fil_types::verifier","",37,[[]]],[11,"into","","",37,[[]]],[11,"borrow","","",37,[[]]],[11,"borrow_mut","","",37,[[]]],[11,"try_from","","",37,[[],["result",4]]],[11,"try_into","","",37,[[],["result",4]]],[11,"type_id","","",37,[[],["typeid",3]]],[11,"vzip","","",37,[[]]],[11,"init","","",37,[[],["usize",15]]],[11,"deref","","",37,[[["usize",15]]]],[11,"deref_mut","","",37,[[["usize",15]]]],[11,"drop","","",37,[[["usize",15]]]],[11,"from","","",38,[[]]],[11,"into","","",38,[[]]],[11,"borrow","","",38,[[]]],[11,"borrow_mut","","",38,[[]]],[11,"try_from","","",38,[[],["result",4]]],[11,"try_into","","",38,[[],["result",4]]],[11,"type_id","","",38,[[],["typeid",3]]],[11,"vzip","","",38,[[]]],[11,"init","","",38,[[],["usize",15]]],[11,"deref","","",38,[[["usize",15]]]],[11,"deref_mut","","",38,[[["usize",15]]]],[11,"drop","","",38,[[["usize",15]]]],[11,"from","fil_types","",39,[[]]],[11,"into","","",39,[[]]],[11,"borrow","","",39,[[]]],[11,"borrow_mut","","",39,[[]]],[11,"try_from","","",39,[[],["result",4]]],[11,"try_into","","",39,[[],["result",4]]],[11,"type_id","","",39,[[],["typeid",3]]],[11,"vzip","","",39,[[]]],[11,"init","","",39,[[],["usize",15]]],[11,"deref","","",39,[[["usize",15]]]],[11,"deref_mut","","",39,[[["usize",15]]]],[11,"drop","","",39,[[["usize",15]]]],[11,"from","","",40,[[]]],[11,"into","","",40,[[]]],[11,"borrow","","",40,[[]]],[11,"borrow_mut","","",40,[[]]],[11,"try_from","","",40,[[],["result",4]]],[11,"try_into","","",40,[[],["result",4]]],[11,"type_id","","",40,[[],["typeid",3]]],[11,"vzip","","",40,[[]]],[11,"init","","",40,[[],["usize",15]]],[11,"deref","","",40,[[["usize",15]]]],[11,"deref_mut","","",40,[[["usize",15]]]],[11,"drop","","",40,[[["usize",15]]]],[11,"from","","",41,[[]]],[11,"into","","",41,[[]]],[11,"borrow","","",41,[[]]],[11,"borrow_mut","","",41,[[]]],[11,"try_from","","",41,[[],["result",4]]],[11,"try_into","","",41,[[],["result",4]]],[11,"type_id","","",41,[[],["typeid",3]]],[11,"vzip","","",41,[[]]],[11,"init","","",41,[[],["usize",15]]],[11,"deref","","",41,[[["usize",15]]]],[11,"deref_mut","","",41,[[["usize",15]]]],[11,"drop","","",41,[[["usize",15]]]],[11,"from","","",42,[[]]],[11,"into","","",42,[[]]],[11,"borrow","","",42,[[]]],[11,"borrow_mut","","",42,[[]]],[11,"try_from","","",42,[[],["result",4]]],[11,"try_into","","",42,[[],["result",4]]],[11,"type_id","","",42,[[],["typeid",3]]],[11,"vzip","","",42,[[]]],[11,"init","","",42,[[],["usize",15]]],[11,"deref","","",42,[[["usize",15]]]],[11,"deref_mut","","",42,[[["usize",15]]]],[11,"drop","","",42,[[["usize",15]]]],[11,"verify_seal","fil_types::verifier","",37,[[["sealverifyinfo",3]],[["result",4],["box",3]]]],[11,"verify_winning_post","","",37,[[["randomness",3],["u64",15]],[["result",4],["box",3]]]],[11,"verify_window_post","","",37,[[["randomness",3],["u64",15]],[["result",4],["box",3]]]],[11,"generate_winning_post_sector_challenge","","",37,[[["u64",15],["randomness",3],["registeredpostproof",4]],[["result",4],["vec",3],["box",3]]]],[11,"from","fil_types::sector::post::json","",7,[[["sectorinfo",3]]]],[11,"from","fil_types::sector::post","",9,[[["postproofjson",3]]]],[11,"from","fil_types::sector","",14,[[["i64",15]]]],[11,"from","","",13,[[["i64",15]]]],[11,"clone","fil_types::deadlines","",3,[[],["quantspec",3]]],[11,"clone","","",4,[[],["deadlineinfo",3]]],[11,"clone","fil_types","",24,[[],["unpaddedpiecesize",3]]],[11,"clone","","",25,[[],["paddedpiecesize",3]]],[11,"clone","","",26,[[],["pieceinfo",3]]],[11,"clone","","",27,[[],["randomness",3]]],[11,"clone","fil_types::sector::post","",8,[[],["sectorinfo",3]]],[11,"clone","","",9,[[],["postproof",3]]],[11,"clone","","",10,[[],["winningpostverifyinfo",3]]],[11,"clone","","",11,[[],["windowpostverifyinfo",3]]],[11,"clone","","",12,[[],["onchainwindowpostverifyinfo",3]]],[11,"clone","fil_types::sector::post::json","",7,[[],["sectorinfojson",3]]],[11,"clone","fil_types::sector","",13,[[],["registeredsealproof",4]]],[11,"clone","","",14,[[],["registeredpostproof",4]]],[11,"clone","","",15,[[],["sealverifyinfo",3]]],[11,"clone","","",16,[[],["sealverifyparams",3]]],[11,"clone","","",17,[[],["sectorsize",4]]],[11,"clone","","",18,[[],["sectorid",3]]],[11,"clone","fil_types","",28,[[],["statetreeversion",4]]],[11,"clone","","",30,[[],["networkversion",4]]],[11,"default","fil_types::deadlines","",4,[[],["deadlineinfo",3]]],[11,"default","fil_types","",27,[[],["randomness",3]]],[11,"default","fil_types::sector::post","",10,[[],["winningpostverifyinfo",3]]],[11,"default","","",11,[[],["windowpostverifyinfo",3]]],[11,"default","","",12,[[],["onchainwindowpostverifyinfo",3]]],[11,"default","fil_types::sector","",18,[[],["sectorid",3]]],[11,"default","fil_types","",36,[[],["stateinfo0",3]]],[11,"eq","fil_types::build_version","",35,[[],["bool",15]]],[11,"eq","fil_types::deadlines","",4,[[["deadlineinfo",3]],["bool",15]]],[11,"ne","","",4,[[["deadlineinfo",3]],["bool",15]]],[11,"eq","fil_types","",24,[[["unpaddedpiecesize",3]],["bool",15]]],[11,"ne","","",24,[[["unpaddedpiecesize",3]],["bool",15]]],[11,"eq","","",25,[[["paddedpiecesize",3]],["bool",15]]],[11,"ne","","",25,[[["paddedpiecesize",3]],["bool",15]]],[11,"eq","","",26,[[["pieceinfo",3]],["bool",15]]],[11,"ne","","",26,[[["pieceinfo",3]],["bool",15]]],[11,"eq","","",27,[[["randomness",3]],["bool",15]]],[11,"ne","","",27,[[["randomness",3]],["bool",15]]],[11,"eq","fil_types::sector::post","",8,[[["sectorinfo",3]],["bool",15]]],[11,"ne","","",8,[[["sectorinfo",3]],["bool",15]]],[11,"eq","","",9,[[["postproof",3]],["bool",15]]],[11,"ne","","",9,[[["postproof",3]],["bool",15]]],[11,"eq","","",10,[[["winningpostverifyinfo",3]],["bool",15]]],[11,"ne","","",10,[[["winningpostverifyinfo",3]],["bool",15]]],[11,"eq","","",11,[[["windowpostverifyinfo",3]],["bool",15]]],[11,"ne","","",11,[[["windowpostverifyinfo",3]],["bool",15]]],[11,"eq","","",12,[[["onchainwindowpostverifyinfo",3]],["bool",15]]],[11,"ne","","",12,[[["onchainwindowpostverifyinfo",3]],["bool",15]]],[11,"eq","fil_types::sector","",13,[[["registeredsealproof",4]],["bool",15]]],[11,"ne","","",13,[[["registeredsealproof",4]],["bool",15]]],[11,"eq","","",14,[[["registeredpostproof",4]],["bool",15]]],[11,"ne","","",14,[[["registeredpostproof",4]],["bool",15]]],[11,"eq","","",15,[[["sealverifyinfo",3]],["bool",15]]],[11,"ne","","",15,[[["sealverifyinfo",3]],["bool",15]]],[11,"eq","","",16,[[["sealverifyparams",3]],["bool",15]]],[11,"ne","","",16,[[["sealverifyparams",3]],["bool",15]]],[11,"eq","","",17,[[["sectorsize",4]],["bool",15]]],[11,"eq","","",18,[[["sectorid",3]],["bool",15]]],[11,"ne","","",18,[[["sectorid",3]],["bool",15]]],[11,"eq","fil_types","",28,[[["statetreeversion",4]],["bool",15]]],[11,"eq","","",30,[[["networkversion",4]],["bool",15]]],[11,"partial_cmp","","",28,[[["statetreeversion",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",30,[[["networkversion",4]],[["option",4],["ordering",4]]]],[11,"deref","fil_types::build_version","",32,[[],["string",3]]],[11,"deref","","",33,[[],["rwlock",3]]],[11,"deref","","",34,[[],["rwlock",3]]],[11,"deref","fil_types","",39,[[],["bigint",3]]],[11,"deref","","",40,[[],["bigint",3]]],[11,"deref","","",41,[[],["address",3]]],[11,"fmt","fil_types::deadlines","",4,[[["formatter",3]],["result",6]]],[11,"fmt","fil_types","",24,[[["formatter",3]],["result",6]]],[11,"fmt","","",25,[[["formatter",3]],["result",6]]],[11,"fmt","","",27,[[["formatter",3]],["result",6]]],[11,"fmt","fil_types::sector::post","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"fmt","fil_types::sector","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",16,[[["formatter",3]],["result",6]]],[11,"fmt","","",17,[[["formatter",3]],["result",6]]],[11,"fmt","","",18,[[["formatter",3]],["result",6]]],[11,"fmt","fil_types","",28,[[["formatter",3]],["result",6]]],[11,"fmt","","",30,[[["formatter",3]],["result",6]]],[11,"fmt","fil_types::build_version","",2,[[["formatter",3]],["fmtresult",6]]],[11,"fmt","","",35,[[["formatter",3]],["fmtresult",6]]],[11,"fmt","fil_types::sector","",17,[[["formatter",3]],["result",6]]],[11,"hash","","",13,[[]]],[11,"hash","","",14,[[]]],[11,"try_from","fil_types::build_version","",35,[[["nodetype",4]],["result",4]]],[11,"initialize","","",32,[[]]],[11,"initialize","","",33,[[]]],[11,"initialize","","",34,[[]]],[11,"initialize","fil_types","",39,[[]]],[11,"initialize","","",40,[[]]],[11,"initialize","","",41,[[]]],[11,"serialize","fil_types::build_version","",0,[[],["result",4]]],[11,"serialize","","",35,[[],["result",4]]],[11,"serialize","fil_types::deadlines","",4,[[],["result",4]]],[11,"serialize","fil_types","",25,[[],["result",4]]],[11,"serialize","","",26,[[],["result",4]]],[11,"serialize","","",27,[[],["result",4]]],[11,"serialize","fil_types::sector::post","",8,[[],["result",4]]],[11,"serialize","","",9,[[],["result",4]]],[11,"serialize","","",10,[[],["result",4]]],[11,"serialize","","",11,[[],["result",4]]],[11,"serialize","","",12,[[],["result",4]]],[11,"serialize","fil_types::sector::post::json","",5,[[],["result",4]]],[11,"serialize","","",6,[[],["result",4]]],[11,"serialize","","",7,[[],["result",4]]],[11,"serialize","fil_types::sector","",14,[[],["result",4]]],[11,"serialize","","",13,[[],["result",4]]],[11,"serialize","","",15,[[],["result",4]]],[11,"serialize","","",16,[[],["result",4]]],[11,"serialize","","",17,[[],["result",4]]],[11,"serialize","","",18,[[],["result",4]]],[11,"serialize","fil_types","",28,[[],["result",4]]],[11,"serialize","","",29,[[],["result",4]]],[11,"serialize","","",36,[[],["result",4]]],[11,"serialize","","",30,[[],["result",4]]],[11,"serialize","fil_types::genesis","",19,[[],["result",4]]],[11,"serialize","","",20,[[],["result",4]]],[11,"serialize","","",21,[[],["result",4]]],[11,"serialize","","",22,[[],["result",4]]],[11,"deserialize","fil_types::deadlines","",4,[[],["result",4]]],[11,"deserialize","fil_types","",25,[[],["result",4]]],[11,"deserialize","","",26,[[],["result",4]]],[11,"deserialize","","",27,[[],["result",4]]],[11,"deserialize","fil_types::sector::post","",8,[[],["result",4]]],[11,"deserialize","","",9,[[],["result",4]]],[11,"deserialize","","",10,[[],["result",4]]],[11,"deserialize","","",11,[[],["result",4]]],[11,"deserialize","","",12,[[],["result",4]]],[11,"deserialize","fil_types::sector::post::json","",5,[[],["result",4]]],[11,"deserialize","","",7,[[],["result",4]]],[11,"deserialize","fil_types::sector","",14,[[],["result",4]]],[11,"deserialize","","",13,[[],["result",4]]],[11,"deserialize","","",15,[[],["result",4]]],[11,"deserialize","","",16,[[],["result",4]]],[11,"deserialize","","",17,[[],["result",4]]],[11,"deserialize","","",18,[[],["result",4]]],[11,"deserialize","fil_types","",28,[[],["result",4]]],[11,"deserialize","","",29,[[],["result",4]]],[11,"deserialize","","",36,[[],["result",4]]],[11,"deserialize","fil_types::genesis","",19,[[],["result",4]]],[11,"deserialize","","",20,[[],["result",4]]],[11,"deserialize","","",21,[[],["result",4]]],[11,"deserialize","","",22,[[],["result",4]]],[11,"from_i64","fil_types::build_version","",1,[[["i64",15]],["option",4]]],[11,"from_u64","","",1,[[["u64",15]],["option",4]]],[11,"from_i64","","",2,[[["i64",15]],["option",4]]],[11,"from_u64","","",2,[[["u64",15]],["option",4]]],[11,"from_i64","fil_types::sector","",17,[[["i64",15]],["option",4]]],[11,"from_u64","","",17,[[["u64",15]],["option",4]]],[11,"quantize_up","fil_types::deadlines","Rounds <code>epoch</code> to the nearest exact multiple of the …",3,[[["chainepoch",6]],["chainepoch",6]]],[11,"quantize_down","","",3,[[["chainepoch",6]],["chainepoch",6]]],[11,"padded","fil_types","Converts unpadded piece size into padded piece size.",24,[[],["paddedpiecesize",3]]],[11,"validate","","Validates piece size.",24,[[],[["result",4],["str",15]]]],[11,"unpadded","","Converts padded piece size into an unpadded piece size.",25,[[],["unpaddedpiecesize",3]]],[11,"validate","","Validates piece size.",25,[[],[["result",4],["str",15]]]],[11,"from_sector_size","fil_types::sector","Returns registered seal proof for given sector size",13,[[["sectorsize",4],["networkversion",4]]]],[11,"update_to_v1","","Convert the original proof type to the v1 proof added in …",13,[[]]],[11,"sector_maximum_lifetime","","The maximum duration a sector sealed with this proof may …",13,[[],["chainepoch",6]]],[11,"proof_size","","Proof size for each SealProof type",13,[[],[["usize",15],["string",3],["result",4]]]],[11,"sector_size","","Returns the sector size of the proof type, which is …",14,[[],[["string",3],["result",4],["sectorsize",4]]]],[11,"registered_seal_proof","","RegisteredSealProof produces the seal-specific …",14,[[],[["registeredsealproof",4],["result",4],["string",3]]]],[11,"proof_size","","Proof size for each PoStProof type",14,[[],[["usize",15],["string",3],["result",4]]]],[11,"window_post_partitions_sector","","Returns the partition size, in sectors, associated with a …",14,[[],[["result",4],["string",3],["u64",15]]]],[11,"sector_size","","Returns the sector size of the proof type, which is …",13,[[],[["string",3],["result",4],["sectorsize",4]]]],[11,"window_post_partitions_sector","","Returns the partition size, in sectors, associated with a …",13,[[],[["result",4],["string",3],["u64",15]]]],[11,"registered_winning_post_proof","","Produces the winning PoSt-specific RegisteredProof …",13,[[],[["string",3],["result",4],["registeredpostproof",4]]]],[11,"registered_window_post_proof","","Produces the windowed PoSt-specific RegisteredProof …",13,[[],[["string",3],["result",4],["registeredpostproof",4]]]]],"p":[[3,"APIVersion"],[4,"BuildType"],[4,"NodeType"],[3,"QuantSpec"],[3,"DeadlineInfo"],[3,"PoStProofJson"],[3,"PoStProofJsonRef"],[3,"SectorInfoJson"],[3,"SectorInfo"],[3,"PoStProof"],[3,"WinningPoStVerifyInfo"],[3,"WindowPoStVerifyInfo"],[3,"OnChainWindowPoStVerifyInfo"],[4,"RegisteredSealProof"],[4,"RegisteredPoStProof"],[3,"SealVerifyInfo"],[3,"SealVerifyParams"],[4,"SectorSize"],[3,"SectorID"],[4,"ActorType"],[3,"Actor"],[3,"Miner"],[3,"Template"],[8,"ProofVerifier"],[3,"UnpaddedPieceSize"],[3,"PaddedPieceSize"],[3,"PieceInfo"],[3,"Randomness"],[4,"StateTreeVersion"],[3,"StateRoot"],[4,"NetworkVersion"],[8,"NetworkParams"],[3,"CURRENT_COMMIT"],[3,"BUILD_TYPE"],[3,"RUNNING_NODE_TYPE"],[3,"Version"],[3,"StateInfo0"],[4,"MockVerifier"],[4,"FullVerifier"],[3,"TOTAL_FILECOIN"],[3,"FIL_RESERVED"],[3,"ZERO_ADDRESS"],[3,"DefaultNetworkParams"]]},\
"forest":{"doc":"","i":[[0,"cli","forest","",null,null],[0,"auth_cmd","forest::cli","",null,null],[4,"AuthCommands","forest::cli::auth_cmd","",null,null],[13,"CreateToken","","Create a new Authentication token with given permission",0,null],[12,"perm","forest::cli::auth_cmd::AuthCommands","",1,null],[11,"run","forest::cli::auth_cmd","",0,[[]]],[0,"chain_cmd","forest::cli","",null,null],[4,"ChainCommands","forest::cli::chain_cmd","",null,null],[13,"Block","","Retrieves and prints out the block specified by the given …",2,null],[12,"cid","forest::cli::chain_cmd::ChainCommands","",3,null],[13,"Genesis","forest::cli::chain_cmd","Prints out the genesis tipset",2,null],[13,"Head","","Prints out the canonical head of the chain",2,null],[13,"Message","","Reads and prints out a message referenced by the …",2,null],[12,"cid","forest::cli::chain_cmd::ChainCommands","",4,null],[13,"ReadObj","forest::cli::chain_cmd","Reads and prints out ipld nodes referenced by the …",2,null],[12,"cid","forest::cli::chain_cmd::ChainCommands","",5,null],[11,"run","forest::cli::chain_cmd","",2,[[]]],[0,"config","forest::cli","",null,null],[3,"Config","forest::cli::config","",null,null],[12,"network","","",6,null],[12,"data_dir","","",6,null],[12,"genesis_file","","",6,null],[12,"enable_rpc","","",6,null],[12,"rpc_port","","",6,null],[12,"snapshot","","If this is true, then we do not validate the imported …",6,null],[12,"snapshot_path","","",6,null],[12,"skip_load","","Skips loading import CAR file and assumes it\'s already …",6,null],[12,"sync","","",6,null],[12,"encrypt_keystore","","",6,null],[0,"fetch_params_cmd","forest::cli","",null,null],[3,"FetchCommands","forest::cli::fetch_params_cmd","",null,null],[12,"all","","",7,null],[12,"keys","","",7,null],[12,"params_size","","",7,null],[12,"verbose","","",7,null],[11,"run","","",7,[[]]],[5,"ram_to_int","","Converts a human readable string to a u64 size.",null,[[["str",15]],[["string",3],["sectorsize",4],["result",4]]]],[0,"genesis_cmd","forest::cli","",null,null],[17,"ACCOUNT_START","forest::cli::genesis_cmd","",null,null],[4,"GenesisCommands","","",null,null],[13,"NewTemplate","","Creates new genesis template",8,null],[12,"network_name","forest::cli::genesis_cmd::GenesisCommands","",9,null],[12,"file_path","","",9,null],[13,"AddMiner","forest::cli::genesis_cmd","Adds miner to Genesis.",8,null],[12,"genesis_path","forest::cli::genesis_cmd::GenesisCommands","",10,null],[12,"preseal_path","","",10,null],[11,"run","forest::cli::genesis_cmd","",8,[[]]],[5,"add_miner","","",null,[[["string",3]],[["result",4],["box",3]]]],[3,"CLI","forest::cli","CLI structure generated when interacting with Forest …",null,null],[12,"daemon_opts","","",11,null],[12,"cmd","","",11,null],[4,"Subcommand","","Forest binary subcommands available.",null,null],[13,"Fetch","","",12,null],[13,"Chain","","",12,null],[13,"Auth","","",12,null],[13,"Genesis","","",12,null],[3,"DaemonOpts","","Daemon process command line options.",null,null],[12,"config","","",13,null],[12,"genesis","","",13,null],[12,"rpc","","",13,null],[12,"port","","",13,null],[12,"kademlia","","",13,null],[12,"mdns","","",13,null],[12,"import_snapshot","","",13,null],[12,"import_chain","","",13,null],[12,"skip_load","","",13,null],[12,"req_window","","",13,null],[12,"tipset_sample_size","","",13,null],[12,"target_peer_count","","",13,null],[11,"to_config","","",13,[[],[["result",4],["config",3],["error",3]]]],[5,"block_until_sigint","","Blocks current thread until ctrl-c is received",null,[[]]],[5,"stringify_rpc_err","","Returns a stringified JSON-RPC error",null,[[["jsonrpcerror",4]],["string",3]]],[0,"daemon","forest","",null,null],[5,"start","forest::daemon","Starts daemon process",null,[[["config",3]]]],[0,"logger","forest","",null,null],[5,"setup_logger","forest::logger","",null,[[]]],[0,"subcommand","forest","",null,null],[5,"process","forest::subcommand","Process CLI subcommand",null,[[["subcommand",4]]]],[5,"main","forest","",null,[[]]],[11,"from","forest::cli::auth_cmd","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"init","","",0,[[],["usize",15]]],[11,"deref","","",0,[[["usize",15]]]],[11,"deref_mut","","",0,[[["usize",15]]]],[11,"drop","","",0,[[["usize",15]]]],[11,"to_subset","","",0,[[],["option",4]]],[11,"is_in_subset","","",0,[[],["bool",15]]],[11,"to_subset_unchecked","","",0,[[]]],[11,"from_subset","","",0,[[]]],[11,"from","forest::cli::chain_cmd","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"init","","",2,[[],["usize",15]]],[11,"deref","","",2,[[["usize",15]]]],[11,"deref_mut","","",2,[[["usize",15]]]],[11,"drop","","",2,[[["usize",15]]]],[11,"to_subset","","",2,[[],["option",4]]],[11,"is_in_subset","","",2,[[],["bool",15]]],[11,"to_subset_unchecked","","",2,[[]]],[11,"from_subset","","",2,[[]]],[11,"from","forest::cli::config","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"vzip","","",6,[[]]],[11,"init","","",6,[[],["usize",15]]],[11,"deref","","",6,[[["usize",15]]]],[11,"deref_mut","","",6,[[["usize",15]]]],[11,"drop","","",6,[[["usize",15]]]],[11,"to_subset","","",6,[[],["option",4]]],[11,"is_in_subset","","",6,[[],["bool",15]]],[11,"to_subset_unchecked","","",6,[[]]],[11,"from_subset","","",6,[[]]],[11,"from","forest::cli::fetch_params_cmd","",7,[[]]],[11,"into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"vzip","","",7,[[]]],[11,"init","","",7,[[],["usize",15]]],[11,"deref","","",7,[[["usize",15]]]],[11,"deref_mut","","",7,[[["usize",15]]]],[11,"drop","","",7,[[["usize",15]]]],[11,"to_subset","","",7,[[],["option",4]]],[11,"is_in_subset","","",7,[[],["bool",15]]],[11,"to_subset_unchecked","","",7,[[]]],[11,"from_subset","","",7,[[]]],[11,"from","forest::cli::genesis_cmd","",8,[[]]],[11,"into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"vzip","","",8,[[]]],[11,"init","","",8,[[],["usize",15]]],[11,"deref","","",8,[[["usize",15]]]],[11,"deref_mut","","",8,[[["usize",15]]]],[11,"drop","","",8,[[["usize",15]]]],[11,"to_subset","","",8,[[],["option",4]]],[11,"is_in_subset","","",8,[[],["bool",15]]],[11,"to_subset_unchecked","","",8,[[]]],[11,"from_subset","","",8,[[]]],[11,"from","forest::cli","",11,[[]]],[11,"into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"vzip","","",11,[[]]],[11,"init","","",11,[[],["usize",15]]],[11,"deref","","",11,[[["usize",15]]]],[11,"deref_mut","","",11,[[["usize",15]]]],[11,"drop","","",11,[[["usize",15]]]],[11,"to_subset","","",11,[[],["option",4]]],[11,"is_in_subset","","",11,[[],["bool",15]]],[11,"to_subset_unchecked","","",11,[[]]],[11,"from_subset","","",11,[[]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"vzip","","",12,[[]]],[11,"init","","",12,[[],["usize",15]]],[11,"deref","","",12,[[["usize",15]]]],[11,"deref_mut","","",12,[[["usize",15]]]],[11,"drop","","",12,[[["usize",15]]]],[11,"to_subset","","",12,[[],["option",4]]],[11,"is_in_subset","","",12,[[],["bool",15]]],[11,"to_subset_unchecked","","",12,[[]]],[11,"from_subset","","",12,[[]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"vzip","","",13,[[]]],[11,"init","","",13,[[],["usize",15]]],[11,"deref","","",13,[[["usize",15]]]],[11,"deref_mut","","",13,[[["usize",15]]]],[11,"drop","","",13,[[["usize",15]]]],[11,"to_subset","","",13,[[],["option",4]]],[11,"is_in_subset","","",13,[[],["bool",15]]],[11,"to_subset_unchecked","","",13,[[]]],[11,"from_subset","","",13,[[]]],[11,"default","forest::cli::config","",6,[[]]],[11,"fmt","forest::cli::auth_cmd","",0,[[["formatter",3]],["result",6]]],[11,"fmt","forest::cli::chain_cmd","",2,[[["formatter",3]],["result",6]]],[11,"fmt","forest::cli::config","",6,[[["formatter",3]],["result",6]]],[11,"fmt","forest::cli::fetch_params_cmd","",7,[[["formatter",3]],["result",6]]],[11,"fmt","forest::cli::genesis_cmd","",8,[[["formatter",3]],["result",6]]],[11,"fmt","forest::cli","",13,[[["formatter",3]],["result",6]]],[11,"deserialize","forest::cli::config","",6,[[],["result",4]]],[11,"clap","forest::cli::auth_cmd","",0,[[],["app",3]]],[11,"from_clap","","",0,[[["argmatches",3]]]],[11,"clap","forest::cli::chain_cmd","",2,[[],["app",3]]],[11,"from_clap","","",2,[[["argmatches",3]]]],[11,"clap","forest::cli::fetch_params_cmd","",7,[[],["app",3]]],[11,"from_clap","","",7,[[["argmatches",3]]]],[11,"clap","forest::cli::genesis_cmd","",8,[[],["app",3]]],[11,"from_clap","","",8,[[["argmatches",3]]]],[11,"clap","forest::cli","",11,[[],["app",3]]],[11,"from_clap","","",11,[[["argmatches",3]]]],[11,"clap","","",12,[[],["app",3]]],[11,"from_clap","","",12,[[["argmatches",3]]]],[11,"clap","","",13,[[],["app",3]]],[11,"from_clap","","",13,[[["argmatches",3]]]],[11,"augment_clap","forest::cli::auth_cmd","",0,[[["app",3]],["app",3]]],[11,"from_subcommand","","",0,[[],["option",4]]],[11,"is_subcommand","","",0,[[],["bool",15]]],[11,"augment_clap","forest::cli::chain_cmd","",2,[[["app",3]],["app",3]]],[11,"from_subcommand","","",2,[[],["option",4]]],[11,"is_subcommand","","",2,[[],["bool",15]]],[11,"augment_clap","forest::cli::fetch_params_cmd","",7,[[["app",3]],["app",3]]],[11,"is_subcommand","","",7,[[],["bool",15]]],[11,"augment_clap","forest::cli::genesis_cmd","",8,[[["app",3]],["app",3]]],[11,"from_subcommand","","",8,[[],["option",4]]],[11,"is_subcommand","","",8,[[],["bool",15]]],[11,"augment_clap","forest::cli","",11,[[["app",3]],["app",3]]],[11,"is_subcommand","","",11,[[],["bool",15]]],[11,"augment_clap","","",12,[[["app",3]],["app",3]]],[11,"from_subcommand","","",12,[[],["option",4]]],[11,"is_subcommand","","",12,[[],["bool",15]]],[11,"augment_clap","","",13,[[["app",3]],["app",3]]],[11,"is_subcommand","","",13,[[],["bool",15]]]],"p":[[4,"AuthCommands"],[13,"CreateToken"],[4,"ChainCommands"],[13,"Block"],[13,"Message"],[13,"ReadObj"],[3,"Config"],[3,"FetchCommands"],[4,"GenesisCommands"],[13,"NewTemplate"],[13,"AddMiner"],[3,"CLI"],[4,"Subcommand"],[3,"DaemonOpts"]]},\
"forest_actor":{"doc":"","i":[[0,"util","forest_actor","",null,null],[0,"chaos","forest_actor::util","",null,null],[3,"State","forest_actor::util::chaos","",null,null],[12,"value","","",0,null],[12,"unmarshallable","","",0,null],[3,"CreateActorArgs","","CreateActorArgs are the arguments to CreateActor.",null,null],[12,"undef_cid","","",1,null],[12,"cid","","",1,null],[12,"undef_address","","",1,null],[12,"address","","",1,null],[3,"ResolveAddressResponse","","Holds the response of a call to runtime.ResolveAddress",null,null],[12,"address","","",2,null],[12,"success","","",2,null],[3,"SendArgs","","",null,null],[12,"to","","",3,null],[12,"value","","",3,null],[12,"method","","",3,null],[12,"params","","",3,null],[3,"SendReturn","","",null,null],[12,"return_value","","",4,null],[12,"code","","",4,null],[3,"MutateStateArgs","","",null,null],[12,"value","","",5,null],[12,"branch","","",5,null],[3,"AbortWithArgs","","",null,null],[12,"code","","",6,null],[12,"message","","",6,null],[12,"uncontrolled","","",6,null],[3,"InspectRuntimeReturn","","",null,null],[12,"caller","","",7,null],[12,"receiver","","",7,null],[12,"value_received","","",7,null],[12,"curr_epoch","","",7,null],[12,"current_balance","","",7,null],[12,"state","","",7,null],[3,"CallerValidationArgs","","",null,null],[12,"branch","","",8,null],[12,"addrs","","",8,null],[12,"types","","",8,null],[4,"Method","","Chaos actor methods available",null,null],[13,"Constructor","","",9,null],[13,"CallerValidation","","",9,null],[13,"CreateActor","","",9,null],[13,"ResolveAddress","","",9,null],[13,"DeleteActor","","",9,null],[13,"Send","","",9,null],[13,"MutateState","","",9,null],[13,"AbortWith","","",9,null],[13,"InspectRuntime","","",9,null],[3,"Actor","","Chaos Actor",null,null],[11,"send","","",10,[[["sendargs",3]],[["result",4],["sendreturn",3],["actorerror",3]]]],[11,"constructor","","Constructor for Account actor",10,[[]]],[11,"caller_validation","","CallerValidation violates VM call validation constraints.",10,[[["callervalidationargs",3]],[["actorerror",3],["result",4]]]],[11,"create_actor","","",10,[[["createactorargs",3]],[["actorerror",3],["result",4]]]],[11,"resolve_address","","Resolves address, and returns the resolved address …",10,[[["address",3]],[["actorerror",3],["result",4],["resolveaddressresponse",3]]]],[11,"delete_actor","","",10,[[["address",3]],[["actorerror",3],["result",4]]]],[11,"mutate_state","","",10,[[["mutatestateargs",3]],[["actorerror",3],["result",4]]]],[11,"abort_with","","",10,[[["abortwithargs",3]],[["actorerror",3],["result",4]]]],[11,"inspect_runtime","","",10,[[],[["actorerror",3],["inspectruntimereturn",3],["result",4]]]],[0,"math","forest_actor::util","",null,null],[17,"PRECISION","forest_actor::util::math","",null,null],[5,"poly_val","","polyval evaluates a polynomial given by coefficients <code>p</code> in …",null,[[["bigint",3]],["bigint",3]]],[5,"poly_parse","","",null,[[],[["result",4],["vec",3],["parsebiginterror",3]]]],[0,"smooth","forest_actor::util","",null,null],[3,"FilterEstimate","forest_actor::util::smooth","",null,null],[12,"position","","",11,null],[12,"velocity","","",11,null],[3,"AlphaBetaFilter","","",null,null],[3,"NUM","","",null,null],[3,"DENOM","","",null,null],[3,"DEFAULT_ALPHA","","",null,null],[3,"DEFAULT_BETA","","",null,null],[3,"LN_2","","",null,null],[3,"EPSILON","","",null,null],[5,"extrapolated_cum_sum_of_ratio","","Extrapolate the CumSumRatio given two filters.",null,[[["chainepoch",6],["filterestimate",3]],["bigint",3]]],[5,"ln","","The natural log of Q.128 x.",null,[[["bigint",3]],["bigint",3]]],[3,"BalanceTable","forest_actor::util","Balance table which handles getting and updating token …",null,null],[17,"BALANCE_TABLE_BITWIDTH","","",null,null],[8,"ActorDowncast","","Trait to allow multiple error types to be able to be …",null,null],[10,"downcast_default","","Downcast a dynamic std Error into an <code>ActorError</code>. If the …",12,[[["exitcode",4]],["actorerror",3]]],[10,"downcast_fatal","","Downcast a dynamic std Error into an <code>ActorError</code>. If the …",12,[[],["actorerror",3]]],[10,"downcast_wrap","","Wrap the error with a message, without overwriting an …",12,[[],[["stderror",8],["box",3]]]],[3,"Multimap","","Multimap stores multiple values per key in a Hamt of Amts.…",null,null],[3,"Set","","Set is a Hamt with empty values for the purpose of acting …",null,null],[3,"SetMultimap","","SetMultimap is a hamt with values that are also a hamt …",null,null],[0,"account","forest_actor","",null,null],[3,"State","forest_actor::account","State includes the address for the actor",null,null],[12,"address","","",13,null],[4,"Method","","Account actor methods available",null,null],[13,"Constructor","","",14,null],[13,"PubkeyAddress","","",14,null],[3,"Actor","","Account Actor",null,null],[0,"cron","forest_actor","",null,null],[3,"Entry","forest_actor::cron","",null,null],[12,"receiver","","The actor to call (ID address)",15,null],[12,"method_num","","The method number to call (must accept empty parameters)",15,null],[3,"State","","Cron actor state which holds entries to call during epoch …",null,null],[12,"entries","","Entries is a set of actors (and corresponding methods) to …",16,null],[4,"Method","","Cron actor methods available",null,null],[13,"Constructor","","",17,null],[13,"EpochTick","","",17,null],[3,"ConstructorParams","","Constructor parameters for Cron actor, contains entries …",null,null],[12,"entries","","Entries is a set of actors (and corresponding methods) to …",18,null],[3,"Actor","","Cron actor",null,null],[0,"init","forest_actor","",null,null],[3,"State","forest_actor::init","State is reponsible for creating",null,null],[12,"address_map","","",19,null],[12,"next_id","","",19,null],[12,"network_name","","",19,null],[3,"ConstructorParams","","Init actor Constructor parameters",null,null],[12,"network_name","","",20,null],[3,"ExecParams","","Init actor Exec Params",null,null],[12,"code_cid","","",21,null],[12,"constructor_params","","",21,null],[3,"ExecReturn","","Init actor Exec Return value",null,null],[12,"id_address","","ID based address for created actor",22,null],[12,"robust_address","","Reorg safe address for actor",22,null],[4,"Method","","Init actor methods available",null,null],[13,"Constructor","","",23,null],[13,"Exec","","",23,null],[3,"Actor","","Init actor",null,null],[0,"market","forest_actor","",null,null],[17,"PIECE_CID_PREFIX","forest_actor::market","Cid prefix for piece Cids",null,null],[3,"DealProposal","","Note: Deal Collateral is only released and returned to …",null,null],[12,"piece_cid","","",24,null],[12,"piece_size","","",24,null],[12,"verified_deal","","",24,null],[12,"client","","",24,null],[12,"provider","","",24,null],[12,"label","","Arbitrary client chosen label to apply to the deal",24,null],[12,"start_epoch","","",24,null],[12,"end_epoch","","",24,null],[12,"storage_price_per_epoch","","",24,null],[12,"provider_collateral","","",24,null],[12,"client_collateral","","",24,null],[3,"ClientDealProposal","","ClientDealProposal is a DealProposal signed by a client",null,null],[12,"proposal","","",25,null],[12,"client_signature","","",25,null],[3,"DealState","","",null,null],[12,"sector_start_epoch","","",26,null],[12,"last_updated_epoch","","",26,null],[12,"slash_epoch","","",26,null],[3,"State","","Market actor state",null,null],[12,"proposals","","Amt<DealID, DealProposal>",27,null],[12,"states","","Amt<DealID, DealState>",27,null],[12,"pending_proposals","","PendingProposals tracks dealProposals that have not yet …",27,null],[12,"escrow_table","","Total amount held in escrow, indexed by actor address …",27,null],[12,"locked_table","","Amount locked, indexed by actor address. Note: the …",27,null],[12,"next_id","","Deal id state sequential incrementer",27,null],[12,"deal_ops_by_epoch","","Metadata cached for efficient iteration over deals. …",27,null],[12,"last_cron","","",27,null],[12,"total_client_locked_colateral","","Total Client Collateral that is locked -> unlocked when …",27,null],[12,"total_provider_locked_colateral","","Total Provider Collateral that is locked -> unlocked when …",27,null],[12,"total_client_storage_fee","","Total storage fee that is locked in escrow -> unlocked …",27,null],[17,"PROPOSALS_AMT_BITWIDTH","","",null,null],[17,"STATES_AMT_BITWIDTH","","",null,null],[3,"WithdrawBalanceParams","","",null,null],[12,"provider_or_client","","",28,null],[12,"amount","","",28,null],[3,"OnMinerSectorsTerminateParams","","",null,null],[12,"epoch","","",29,null],[12,"deal_ids","","",29,null],[3,"OnMinerSectorsTerminateParamsRef","","",null,null],[12,"epoch","","",30,null],[12,"deal_ids","","",30,null],[3,"PublishStorageDealsParams","","",null,null],[12,"deals","","",31,null],[3,"PublishStorageDealsReturn","","",null,null],[12,"ids","","",32,null],[3,"VerifyDealsForActivationParams","","",null,null],[12,"sectors","","",33,null],[3,"SectorDeals","","",null,null],[12,"sector_expiry","","",34,null],[12,"deal_ids","","",34,null],[3,"VerifyDealsForActivationParamsRef","","",null,null],[12,"sectors","","",35,null],[3,"VerifyDealsForActivationReturn","","",null,null],[12,"sectors","","",36,null],[3,"SectorWeights","","",null,null],[12,"deal_space","","",37,null],[12,"deal_weight","","",37,null],[12,"verified_deal_weight","","",37,null],[3,"ActivateDealsParams","","",null,null],[12,"deal_ids","","",38,null],[12,"sector_expiry","","",38,null],[3,"ComputeDataCommitmentParams","","",null,null],[12,"deal_ids","","",39,null],[12,"sector_type","","",39,null],[3,"ComputeDataCommitmentParamsRef","","",null,null],[12,"deal_ids","","",40,null],[12,"sector_type","","",40,null],[6,"DealArray","","A specialization of a array to deals.",null,null],[6,"DealMetaArray","","A specialization of a array to deals.",null,null],[4,"Method","","Market actor methods available",null,null],[13,"Constructor","","",41,null],[13,"AddBalance","","",41,null],[13,"WithdrawBalance","","",41,null],[13,"PublishStorageDeals","","",41,null],[13,"VerifyDealsForActivation","","",41,null],[13,"ActivateDeals","","",41,null],[13,"OnMinerSectorsTerminate","","",41,null],[13,"ComputeDataCommitment","","",41,null],[13,"CronTick","","",41,null],[3,"Actor","","Market Actor",null,null],[5,"validate_deals_for_activation","","Validates a collection of deal dealProposals for …",null,[[["address",3],["chainepoch",6],["state",3]],[["box",3],["result",4]]]],[5,"validate_and_compute_deal_weight","","",null,[[["address",3],["dealarray",6],["chainepoch",6]],[["box",3],["result",4]]]],[0,"miner","forest_actor","",null,null],[3,"BitFieldQueue","forest_actor::miner","Wrapper for working with an AMT[ChainEpoch]*Bitfield …",null,null],[12,"amt","","",42,null],[5,"assign_deadlines","","",null,[[["sectoronchaininfo",3],["vec",3],["u64",15]],[["string",3],["vec",3],["result",4]]]],[3,"Deadlines","","Deadlines contains Deadline objects, describing the …",null,null],[12,"due","","",43,null],[3,"Deadline","","Deadline holds the state for all sectors due at a …",null,null],[12,"partitions","","Partitions in this deadline, in order. The keys of this …",44,null],[12,"expirations_epochs","","Maps epochs to partitions that <em>may</em> have sectors that …",44,null],[12,"partitions_posted","","",44,null],[12,"early_terminations","","Partitions with sectors that terminated early.",44,null],[12,"live_sectors","","The number of non-terminated sectors in this deadline …",44,null],[12,"total_sectors","","The total number of sectors in this deadline (incl dead).",44,null],[12,"faulty_power","","Memoized sum of faulty power in partitions.",44,null],[12,"optimistic_post_submissions","","",44,null],[3,"WindowedPoSt","","",null,null],[3,"DisputeInfo","","",null,null],[12,"all_sector_nos","","",45,null],[12,"ignored_sector_nos","","",45,null],[12,"disputed_sectors","","",45,null],[12,"disputed_power","","",45,null],[3,"PoStResult","","",null,null],[12,"power_delta","","Power activated or deactivated (positive or negative).",46,null],[12,"new_faulty_power","","",46,null],[12,"retracted_recovery_power","","",46,null],[12,"recovered_power","","",46,null],[12,"sectors","","A bitfield of all sectors in the proven partitions.",46,null],[12,"ignored_sectors","","A subset of <code>sectors</code> that should be ignored.",46,null],[12,"partitions","","",46,null],[5,"new_deadline_info","","",null,[[["usize",15],["chainepoch",6]],["deadlineinfo",3]]],[5,"deadline_is_mutable","","Returns true if the deadline at the given index is …",null,[[["usize",15],["chainepoch",6]],["bool",15]]],[5,"quant_spec_for_deadline","","",null,[[["deadlineinfo",3]],["quantspec",3]]],[5,"deadline_available_for_optimistic_post_dispute","","",null,[[["usize",15],["chainepoch",6]],["bool",15]]],[5,"deadline_available_for_compaction","","",null,[[["usize",15],["chainepoch",6]],["bool",15]]],[5,"new_deadline_info_from_offset_and_epoch","","",null,[[["chainepoch",6]],["deadlineinfo",3]]],[3,"ExpirationSet","","ExpirationSet is a collection of sector numbers that are …",null,null],[12,"on_time_sectors","","Sectors expiring \\\"on time\\\" at the end of their committed …",47,null],[12,"early_sectors","","Sectors expiring \\\"early\\\" due to being faulty for too long",47,null],[12,"on_time_pledge","","Pledge total for the on-time sectors",47,null],[12,"active_power","","Power that is currently active (not faulty)",47,null],[12,"faulty_power","","Power that is currently faulty",47,null],[3,"ExpirationQueue","","A queue of expiration sets by epoch, representing the …",null,null],[12,"amt","","",48,null],[12,"quant","","",48,null],[17,"PRE_COMMIT_DEPOSIT_PROJECTION_PERIOD","","",null,null],[17,"INITIAL_PLEDGE_PROJECTION_PERIOD","","",null,null],[3,"BASE_REWARD_FOR_DISPUTED_WINDOW_POST","","Base reward for successfully disputing a window posts …",null,null],[3,"BASE_PENALTY_FOR_DISPUTED_WINDOW_POST","","Base penalty for a successful disputed window post proof.",null,null],[17,"CONTINUED_FAULT_PROJECTION_PERIOD","","",null,null],[17,"TERMINATION_LIFETIME_CAP","","",null,null],[5,"expected_reward_for_power","","The projected block reward a sector would earn over some …",null,[[["storagepower",6],["chainepoch",6],["filterestimate",3]],["tokenamount",6]]],[5,"pledge_penalty_for_continued_fault","","The penalty for a sector continuing faulty for another …",null,[[["storagepower",6],["filterestimate",3]],["tokenamount",6]]],[5,"pledge_penalty_for_termination_lower_bound","","This is the SP(t) penalty for a newly faulty sector that …",null,[[["storagepower",6],["filterestimate",3]],["tokenamount",6]]],[5,"pledge_penalty_for_termination","","Penalty to locked pledge collateral for the termination …",null,[[["storagepower",6],["chainepoch",6],["filterestimate",3],["tokenamount",6]],["tokenamount",6]]],[5,"pledge_penalty_for_invalid_windowpost","","",null,[[["storagepower",6],["filterestimate",3]],["tokenamount",6]]],[5,"pre_commit_deposit_for_power","","Computes the PreCommit deposit given sector qa weight and …",null,[[["storagepower",6],["filterestimate",3]],["tokenamount",6]]],[5,"initial_pledge_for_power","","Computes the pledge requirement for committing new …",null,[[["storagepower",6],["filterestimate",3],["tokenamount",6]],["tokenamount",6]]],[5,"consensus_fault_penalty","","",null,[[["tokenamount",6]],["tokenamount",6]]],[5,"locked_reward_from_reward","","Returns the amount of a reward to vest, and the vesting …",null,[[["tokenamount",6]]]],[3,"Partition","","",null,null],[12,"sectors","","Sector numbers in this partition, including faulty, …",49,null],[12,"unproven","","Unproven sectors in this partition. This bitfield will be …",49,null],[12,"faults","","Subset of sectors detected/declared faulty and not yet …",49,null],[12,"recoveries","","Subset of faulty sectors expected to recover on next PoSt …",49,null],[12,"terminated","","Subset of sectors terminated but not yet removed from …",49,null],[12,"expirations_epochs","","Maps epochs sectors that expire in or before that epoch. …",49,null],[12,"early_terminated","","Subset of terminated that were before their committed …",49,null],[12,"live_power","","Power of not-yet-terminated sectors (incl faulty & …",49,null],[12,"unproven_power","","Power of yet-to-be-proved sectors (never faulty).",49,null],[12,"faulty_power","","Power of currently-faulty sectors. FaultyPower <= …",49,null],[12,"recovering_power","","Power of expected-to-recover sectors. RecoveringPower <= …",49,null],[3,"PowerPair","","",null,null],[12,"raw","","",50,null],[12,"qa","","",50,null],[17,"WPOST_PROVING_PERIOD","","The period over which all a miner\'s active sectors will …",null,null],[17,"WPOST_CHALLENGE_WINDOW","","The duration of a deadline\'s challenge window, the period …",null,null],[17,"WPOST_PERIOD_DEADLINES","","The number of non-overlapping PoSt deadlines in each …",null,null],[17,"WPOST_MAX_CHAIN_COMMIT_AGE","","The maximum distance back that a valid Window PoSt must …",null,null],[17,"WPOST_DISPUTE_WINDOW","","",null,null],[17,"SECTORS_MAX","","The maximum number of sectors that a miner can have …",null,null],[17,"MAX_PARTITIONS_PER_DEADLINE","","Maximum number of partitions that will be assigned to a …",null,null],[17,"MAX_CONTROL_ADDRESSES","","Maximum number of control addresses a miner may register.",null,null],[17,"MAX_PEER_ID_LENGTH","","MaxPeerIDLength is the maximum length allowed for any …",null,null],[17,"MAX_MULTIADDR_DATA","","MaxMultiaddrData is the maximum amount of data that can …",null,null],[17,"MAX_PROVE_COMMIT_SIZE_V4","","",null,null],[17,"MAX_PROVE_COMMIT_SIZE_V5","","",null,null],[17,"ADDRESSED_PARTITIONS_MAX","","The maximum number of partitions that may be required to …",null,null],[17,"DELCARATIONS_MAX","","Maximum number of unique \\\"declarations\\\" in batch …",null,null],[17,"ADDRESSED_SECTORS_MAX","","The maximum number of sector infos that may be required …",null,null],[5,"load_partitions_sectors_max","","The maximum number of partitions that may be required to …",null,[[["u64",15]],["u64",15]]],[17,"NEW_SECTORS_PER_PERIOD_MAX","","The maximum number of new sectors that may be staged by a …",null,null],[17,"CHAIN_FINALITY","","Epochs after which chain state is final with overwhelming …",null,null],[17,"SEALED_CID_PREFIX","","Prefix for sealed sector CIDs (CommR).",null,null],[5,"can_pre_commit_seal_proof","","List of proof types which can be used when creating new …",null,[[["registeredsealproof",4],["networkversion",4]],["bool",15]]],[5,"can_extend_seal_proof_type","","Checks whether a seal proof type is supported for new …",null,[[["registeredsealproof",4],["networkversion",4]],["bool",15]]],[5,"max_prove_commit_duration","","Maximum duration to allow for the sealing process for …",null,[[["registeredsealproof",4]],[["option",4],["chainepoch",6]]]],[5,"seal_proof_sector_maximum_lifetime","","Maximum duration to allow for the sealing process for …",null,[[["registeredsealproof",4],["networkversion",4]],[["option",4],["chainepoch",6]]]],[17,"MAX_PRE_COMMIT_RANDOMNESS_LOOKBACK","","",null,null],[17,"PRE_COMMIT_CHALLENGE_DELAY","","Number of epochs between publishing the precommit and …",null,null],[17,"WPOST_CHALLENGE_LOOKBACK","","Lookback from the deadline\'s challenge window opening …",null,null],[17,"FAULT_DECLARATION_CUTOFF","","Minimum period before a deadline\'s challenge window opens …",null,null],[17,"FAULT_MAX_AGE","","The maximum age of a fault before the sector is …",null,null],[17,"WORKER_KEY_CHANGE_DELAY","","Staging period for a miner worker key change. Finality is …",null,null],[17,"MIN_SECTOR_EXPIRATION","","Minimum number of epochs past the current epoch a sector …",null,null],[17,"MAX_SECTOR_EXPIRATION_EXTENSION","","Maximum number of epochs past the current epoch a sector …",null,null],[17,"DEAL_LIMIT_DENOMINATOR","","Ratio of sector size to maximum deals per sector. The …",null,null],[17,"CONSENSUS_FAULT_INELIGIBILITY_DURATION","","Number of epochs after a consensus fault for which a …",null,null],[5,"qa_power_for_weight","","Returns the power for a sector size and weight.",null,[[["dealweight",6],["sectorsize",4],["chainepoch",6]],["storagepower",6]]],[5,"qa_power_for_sector","","Returns the quality-adjusted power for a sector.",null,[[["sectoronchaininfo",3],["sectorsize",4]],["storagepower",6]]],[5,"sector_deals_max","","Determine maximum number of deal miner\'s sector can hold",null,[[["sectorsize",4]],["u64",15]]],[3,"VestSpec","","Specification for a linear vesting schedule.",null,null],[12,"initial_delay","","",51,null],[12,"vest_period","","",51,null],[12,"step_duration","","",51,null],[12,"quantization","","",51,null],[17,"REWARD_VESTING_SPEC","","",null,null],[5,"reward_for_consensus_slash_report","","",null,[[["chainepoch",6],["tokenamount",6]],["tokenamount",6]]],[5,"reward_for_disputed_window_post","","",null,[[["powerpair",3],["registeredpostproof",4]],["tokenamount",6]]],[3,"DeadlineSectorMap","","Maps deadlines to partition maps.",null,null],[3,"PartitionSectorMap","","Maps partitions to sector bitfields.",null,null],[3,"Sectors","","",null,null],[12,"amt","","",52,null],[3,"State","","Balance of Miner Actor should be greater than or equal to …",null,null],[12,"info","","Contains static info about this miner",53,null],[12,"pre_commit_deposits","","Total funds locked as pre_commit_deposit",53,null],[12,"locked_funds","","Total rewards and added funds locked in vesting table",53,null],[12,"vesting_funds","","VestingFunds (Vesting Funds schedule for the miner).",53,null],[12,"fee_debt","","Absolute value of debt this miner owes from unpaid fees.",53,null],[12,"initial_pledge","","Sum of initial pledge requirements of all active sectors",53,null],[12,"pre_committed_sectors","","Sectors that have been pre-committed but not yet proven. …",53,null],[12,"pre_committed_sectors_expiry","","PreCommittedSectorsExpiry maintains the state required to …",53,null],[12,"allocated_sectors","","Allocated sector IDs. Sector IDs can never be reused once …",53,null],[12,"sectors","","Information for all proven and not-yet-garbage-collected …",53,null],[12,"proving_period_start","","The first epoch in this miner\'s current proving period. …",53,null],[12,"current_deadline","","Index of the deadline within the proving period beginning …",53,null],[12,"deadlines","","The sector numbers due for PoSt at each deadline in the …",53,null],[12,"early_terminations","","Deadlines with outstanding fees for early sector …",53,null],[12,"deadline_cron_active","","",53,null],[3,"AdvanceDeadlineResult","","",null,null],[12,"pledge_delta","","",54,null],[12,"power_delta","","",54,null],[12,"previously_faulty_power","","Power that was faulty before this advance (including …",54,null],[12,"detected_faulty_power","","Power of new faults and failed recoveries",54,null],[12,"total_faulty_power","","Total faulty power after detecting faults (before …",54,null],[3,"MinerInfo","","Static information about miner",null,null],[12,"owner","","Account that owns this miner",55,null],[12,"worker","","Worker account for this miner This will be the key that …",55,null],[12,"control_addresses","","Additional addresses that are permitted to submit …",55,null],[12,"pending_worker_key","","Optional worker key to update at an epoch",55,null],[12,"peer_id","","Libp2p identity that should be used when connecting to …",55,null],[12,"multi_address","","Vector of byte arrays representing Libp2p multi-addresses …",55,null],[12,"window_post_proof_type","","The proof type used by this miner for sealing sectors.",55,null],[12,"sector_size","","Amount of space in each sector committed to the network …",55,null],[12,"window_post_partition_sectors","","The number of sectors in each Window PoSt partition …",55,null],[12,"consensus_fault_elapsed","","The next epoch this miner is eligible for certain …",55,null],[12,"pending_owner_address","","A proposed new owner account for this miner. Must be …",55,null],[3,"TerminationResult","","",null,null],[12,"sectors","","Sectors maps epochs at which sectors expired, to …",56,null],[12,"partitions_processed","","",56,null],[12,"sectors_processed","","",56,null],[6,"CronEvent","","",null,null],[17,"CRON_EVENT_WORKER_KEY_CHANGE","","",null,null],[17,"CRON_EVENT_PROVING_DEADLINE","","",null,null],[17,"CRON_EVENT_PROCESS_EARLY_TERMINATIONS","","",null,null],[3,"MinerConstructorParams","","Storage miner actor constructor params are defined here …",null,null],[12,"owner","","",57,null],[12,"worker","","",57,null],[12,"control_addresses","","",57,null],[12,"window_post_proof_type","","",57,null],[12,"peer_id","","",57,null],[12,"multi_addresses","","",57,null],[3,"CronEventPayload","","",null,null],[12,"event_type","","",58,null],[3,"PartitionKey","","",null,null],[12,"deadline","","",59,null],[12,"partition","","",59,null],[3,"GetControlAddressesReturn","","",null,null],[12,"owner","","",60,null],[12,"worker","","",60,null],[12,"control_addresses","","",60,null],[3,"ChangeWorkerAddressParams","","",null,null],[12,"new_worker","","",61,null],[12,"new_control_addresses","","",61,null],[3,"ChangePeerIDParams","","",null,null],[12,"new_id","","",62,null],[3,"ChangeMultiaddrsParams","","",null,null],[12,"new_multi_addrs","","",63,null],[3,"ConfirmSectorProofsParams","","",null,null],[12,"sectors","","",64,null],[3,"PoStPartition","","",null,null],[12,"index","","Partitions are numbered per-deadline, from zero.",65,null],[12,"skipped","","Sectors skipped while proving that weren\'t already …",65,null],[3,"SubmitWindowedPoStParams","","Information submitted by a miner to provide a Window PoSt.",null,null],[12,"deadline","","The deadline index which the submission targets.",66,null],[12,"partitions","","The partitions being proven.",66,null],[12,"proofs","","Array of proofs, one per distinct registered proof type …",66,null],[12,"chain_commit_epoch","","The epoch at which these proofs is being committed to a …",66,null],[12,"chain_commit_rand","","The ticket randomness on the chain at the …",66,null],[3,"ProveCommitSectorParams","","",null,null],[12,"sector_number","","",67,null],[12,"proof","","",67,null],[3,"CheckSectorProvenParams","","",null,null],[12,"sector_number","","",68,null],[3,"ExtendSectorExpirationParams","","",null,null],[12,"extensions","","",69,null],[3,"ExpirationExtension","","",null,null],[12,"deadline","","",70,null],[12,"partition","","",70,null],[12,"sectors","","",70,null],[12,"new_expiration","","",70,null],[3,"TerminateSectorsParams","","",null,null],[12,"terminations","","",71,null],[3,"TerminationDeclaration","","",null,null],[12,"deadline","","",72,null],[12,"partition","","",72,null],[12,"sectors","","",72,null],[3,"TerminateSectorsReturn","","",null,null],[12,"done","","",73,null],[3,"DeclareFaultsParams","","",null,null],[12,"faults","","",74,null],[3,"FaultDeclaration","","",null,null],[12,"deadline","","The deadline to which the faulty sectors are assigned, in …",75,null],[12,"partition","","Partition index within the deadline containing the faulty …",75,null],[12,"sectors","","Sectors in the partition being declared faulty.",75,null],[3,"DeclareFaultsRecoveredParams","","",null,null],[12,"recoveries","","",76,null],[3,"RecoveryDeclaration","","",null,null],[12,"deadline","","The deadline to which the recovered sectors are assigned, …",77,null],[12,"partition","","Partition index within the deadline containing the …",77,null],[12,"sectors","","Sectors in the partition being declared recovered.",77,null],[3,"CompactPartitionsParams","","",null,null],[12,"deadline","","",78,null],[12,"partitions","","",78,null],[3,"CompactSectorNumbersParams","","",null,null],[12,"mask_sector_numbers","","",79,null],[3,"ReportConsensusFaultParams","","",null,null],[12,"header1","","",80,null],[12,"header2","","",80,null],[12,"header_extra","","",80,null],[3,"WithdrawBalanceParams","","",null,null],[12,"amount_requested","","",81,null],[3,"WorkerKeyChange","","",null,null],[12,"new_worker","","Must be an ID address",82,null],[12,"effective_at","","",82,null],[6,"PreCommitSectorParams","","",null,null],[3,"SectorPreCommitInfo","","",null,null],[12,"seal_proof","","",83,null],[12,"sector_number","","",83,null],[12,"sealed_cid","","CommR",83,null],[12,"seal_rand_epoch","","",83,null],[12,"deal_ids","","",83,null],[12,"expiration","","",83,null],[12,"replace_capacity","","Whether to replace a \\\"committed capacity\\\" no-deal sector …",83,null],[12,"replace_sector_deadline","","The committed capacity sector to replace, and its …",83,null],[12,"replace_sector_partition","","",83,null],[12,"replace_sector_number","","",83,null],[3,"SectorPreCommitOnChainInfo","","Information stored on-chain for a pre-committed sector.",null,null],[12,"info","","",84,null],[12,"pre_commit_deposit","","",84,null],[12,"pre_commit_epoch","","",84,null],[12,"deal_weight","","Integral of active deals over sector lifetime, 0 if …",84,null],[12,"verified_deal_weight","","Integral of active verified deals over sector lifetime",84,null],[3,"SectorOnChainInfo","","Information stored on-chain for a proven sector.",null,null],[12,"sector_number","","",85,null],[12,"seal_proof","","The seal proof type implies the PoSt proofs",85,null],[12,"sealed_cid","","CommR",85,null],[12,"deal_ids","","",85,null],[12,"activation","","Epoch during which the sector proof was accepted",85,null],[12,"expiration","","Epoch during which the sector expires",85,null],[12,"deal_weight","","Integral of active deals over sector lifetime",85,null],[12,"verified_deal_weight","","Integral of active verified deals over sector lifetime",85,null],[12,"initial_pledge","","Pledge collected to commit this sector",85,null],[12,"expected_day_reward","","Expected one day projection of reward for sector computed …",85,null],[12,"expected_storage_pledge","","Expected twenty day projection of reward for sector …",85,null],[12,"replaced_sector_age","","Age of sector this sector replaced or zero",85,null],[12,"replaced_day_reward","","Day reward of sector this sector replace or zero",85,null],[3,"Fault","","",null,null],[12,"miner","","",86,null],[12,"fault","","",86,null],[3,"ApplyRewardParams","","",null,null],[12,"reward","","",87,null],[12,"penalty","","",87,null],[3,"DisputeWindowedPoStParams","","",null,null],[12,"deadline","","",88,null],[12,"post_index","","",88,null],[3,"VestingFund","","",null,null],[12,"epoch","","",89,null],[12,"amount","","",89,null],[3,"VestingFunds","","Represents the vesting table state for the miner. It is a …",null,null],[12,"funds","","",90,null],[4,"Method","","Storage Miner actor methods available",null,null],[13,"Constructor","","",91,null],[13,"ControlAddresses","","",91,null],[13,"ChangeWorkerAddress","","",91,null],[13,"ChangePeerID","","",91,null],[13,"SubmitWindowedPoSt","","",91,null],[13,"PreCommitSector","","",91,null],[13,"ProveCommitSector","","",91,null],[13,"ExtendSectorExpiration","","",91,null],[13,"TerminateSectors","","",91,null],[13,"DeclareFaults","","",91,null],[13,"DeclareFaultsRecovered","","",91,null],[13,"OnDeferredCronEvent","","",91,null],[13,"CheckSectorProven","","",91,null],[13,"ApplyRewards","","",91,null],[13,"ReportConsensusFault","","",91,null],[13,"WithdrawBalance","","",91,null],[13,"ConfirmSectorProofsValid","","",91,null],[13,"ChangeMultiaddrs","","",91,null],[13,"CompactPartitions","","",91,null],[13,"CompactSectorNumbers","","",91,null],[13,"ConfirmUpdateWorkerKey","","",91,null],[13,"RepayDebt","","",91,null],[13,"ChangeOwnerAddress","","",91,null],[13,"DisputeWindowedPoSt","","",91,null],[3,"Actor","","Miner Actor here in order to update the Power Actor to v3.",null,null],[0,"multisig","forest_actor","",null,null],[3,"State","forest_actor::multisig","Multisig actor state",null,null],[12,"signers","","",92,null],[12,"num_approvals_threshold","","",92,null],[12,"next_tx_id","","",92,null],[12,"initial_balance","","",92,null],[12,"start_epoch","","",92,null],[12,"unlock_duration","","",92,null],[12,"pending_txs","","",92,null],[3,"TxnID","","Transaction ID type",null,null],[12,"0","","",93,null],[3,"Transaction","","Transaction type used in multisig actor",null,null],[12,"to","","",94,null],[12,"value","","",94,null],[12,"method","","",94,null],[12,"params","","",94,null],[12,"approved","","",94,null],[3,"ProposalHashData","","Data for a BLAKE2B-256 to be attached to methods …",null,null],[12,"requester","","",95,null],[12,"to","","",95,null],[12,"value","","",95,null],[12,"method","","",95,null],[12,"params","","",95,null],[3,"ConstructorParams","","Constructor parameters for multisig actor.",null,null],[12,"signers","","",96,null],[12,"num_approvals_threshold","","",96,null],[12,"unlock_duration","","",96,null],[12,"start_epoch","","",96,null],[3,"ProposeParams","","Propose method call parameters.",null,null],[12,"to","","",97,null],[12,"value","","",97,null],[12,"method","","",97,null],[12,"params","","",97,null],[3,"ProposeReturn","","Propose method call return.",null,null],[12,"txn_id","","TxnID is the ID of the proposed transaction.",98,null],[12,"applied","","Applied indicates if the transaction was applied as …",98,null],[12,"code","","Code is the exitcode of the transaction, if Applied is …",98,null],[12,"ret","","Ret is the return value of the transaction, if Applied is …",98,null],[3,"TxnIDParams","","Parameters for approve and cancel multisig functions.",null,null],[12,"id","","",99,null],[12,"proposal_hash","","Optional hash of proposal to ensure an operation can only …",99,null],[3,"ApproveReturn","","Parameters for approve and cancel multisig functions.",null,null],[12,"applied","","Applied indicates if the transaction was applied as …",100,null],[12,"code","","Code is the exitcode of the transaction, if Applied is …",100,null],[12,"ret","","Ret is the return value of the transaction, if Applied is …",100,null],[3,"AddSignerParams","","Add signer params.",null,null],[12,"signer","","",101,null],[12,"increase","","",101,null],[3,"RemoveSignerParams","","Remove signer params.",null,null],[12,"signer","","",102,null],[12,"decrease","","",102,null],[3,"SwapSignerParams","","Swap signer multisig method params",null,null],[12,"from","","",103,null],[12,"to","","",103,null],[3,"ChangeNumApprovalsThresholdParams","","Propose method call parameters",null,null],[12,"new_threshold","","",104,null],[3,"LockBalanceParams","","Lock balance call params.",null,null],[12,"start_epoch","","",105,null],[12,"unlock_duration","","",105,null],[12,"amount","","",105,null],[4,"Method","","Multisig actor methods available",null,null],[13,"Constructor","","",106,null],[13,"Propose","","",106,null],[13,"Approve","","",106,null],[13,"Cancel","","",106,null],[13,"AddSigner","","",106,null],[13,"RemoveSigner","","",106,null],[13,"SwapSigner","","",106,null],[13,"ChangeNumApprovalsThreshold","","",106,null],[13,"LockBalance","","",106,null],[3,"Actor","","Multisig Actor",null,null],[0,"network","forest_actor","",null,null],[17,"EPOCH_DURATION_SECONDS","forest_actor::network","Duration of each tipset epoch.",null,null],[17,"EXPECTED_LEADERS_PER_EPOCH","","The expected number of block producers in each epoch.",null,null],[17,"SECONDS_IN_HOUR","","",null,null],[17,"SECONDS_IN_DAY","","",null,null],[17,"SECONDS_IN_YEAR","","",null,null],[17,"EPOCHS_IN_HOUR","","",null,null],[17,"EPOCHS_IN_DAY","","",null,null],[17,"EPOCHS_IN_YEAR","","",null,null],[17,"SECTOR_QUALITY_PRECISION","","Precision used for making QA power calculations",null,null],[3,"QUALITY_BASE_MULTIPLIER","","Quality multiplier for committed capacity (no deals) in a …",null,null],[3,"DEAL_WEIGHT_MULTIPLIER","","Quality multiplier for unverified deals in a sector",null,null],[3,"VERIFIED_DEAL_WEIGHT_MULTIPLIER","","Quality multiplier for verified deals in a sector",null,null],[0,"paych","forest_actor","",null,null],[3,"LaneState","forest_actor::paych","The Lane state tracks the latest (highest) voucher nonce …",null,null],[12,"redeemed","","",107,null],[12,"nonce","","",107,null],[3,"Merge","","Specifies which <code>lane</code>s to be merged with what <code>nonce</code> on …",null,null],[12,"lane","","",108,null],[12,"nonce","","",108,null],[3,"State","","A given payment channel actor is established by <code>from</code> to …",null,null],[12,"from","","Channel owner, who has funded the actor.",109,null],[12,"to","","Recipient of payouts from channel.",109,null],[12,"to_send","","Amount successfully redeemed through the payment channel, …",109,null],[12,"settling_at","","Height at which the channel can be collected.",109,null],[12,"min_settle_height","","Height before which the channel <code>ToSend</code> cannot be …",109,null],[12,"lane_states","","Collections of lane states for the channel, maintained in …",109,null],[17,"MAX_LANE","","Maximum number of lanes in a channel",null,null],[17,"SETTLE_DELAY","","",null,null],[17,"MAX_SECRET_SIZE","","",null,null],[17,"LANE_STATES_AMT_BITWIDTH","","",null,null],[3,"ConstructorParams","","Constructor parameters for payment channel actor",null,null],[12,"from","","",110,null],[12,"to","","",110,null],[3,"SignedVoucher","","A voucher is sent by <code>from</code> to <code>to</code> off-chain in order to …",null,null],[12,"channel_addr","","ChannelAddr is the address of the payment channel this …",111,null],[12,"time_lock_min","","Min epoch before which the voucher cannot be redeemed",111,null],[12,"time_lock_max","","Max epoch beyond which the voucher cannot be redeemed set …",111,null],[12,"secret_pre_image","","(optional) Used by <code>to</code> to validate",111,null],[12,"extra","","(optional) Specified by <code>from</code> to add a verification method …",111,null],[12,"lane","","Specifies which lane the Voucher merges into (will be …",111,null],[12,"nonce","","Set by <code>from</code> to prevent redemption of stale vouchers on a …",111,null],[12,"amount","","Amount voucher can be redeemed for",111,null],[12,"min_settle_height","","(optional) Can extend channel min_settle_height if needed",111,null],[12,"merges","","(optional) Set of lanes to be merged into <code>lane</code>",111,null],[12,"signature","","Sender\'s signature over the voucher (sign on none)",111,null],[3,"ModVerifyParams","","Modular Verification method",null,null],[12,"actor","","",112,null],[12,"method","","",112,null],[12,"data","","",112,null],[3,"PaymentVerifyParams","","Payment Verification parameters",null,null],[12,"extra","","",113,null],[12,"proof","","",113,null],[3,"UpdateChannelStateParams","","",null,null],[12,"sv","","",114,null],[12,"secret","","",114,null],[4,"Method","","Payment Channel actor methods available",null,null],[13,"Constructor","","",115,null],[13,"UpdateChannelState","","",115,null],[13,"Settle","","",115,null],[13,"Collect","","",115,null],[3,"Actor","","Payment Channel actor",null,null],[0,"power","forest_actor","",null,null],[17,"CONSENSUS_MINER_MIN_MINERS","forest_actor::power","Minimum power of an individual miner to meet the …",null,null],[17,"MAX_MINER_PROVE_COMMITS_PER_EPOCH","","Maximum number of prove commits a miner can submit in one …",null,null],[3,"State","","Storage power actor state",null,null],[12,"total_raw_byte_power","","",116,null],[12,"total_bytes_committed","","",116,null],[12,"total_quality_adj_power","","",116,null],[12,"total_qa_bytes_committed","","",116,null],[12,"total_pledge_collateral","","",116,null],[12,"this_epoch_raw_byte_power","","",116,null],[12,"this_epoch_quality_adj_power","","",116,null],[12,"this_epoch_pledge_collateral","","",116,null],[12,"this_epoch_qa_power_smoothed","","",116,null],[12,"miner_count","","",116,null],[12,"miner_above_min_power_count","","Number of miners having proven the minimum consensus …",116,null],[12,"cron_event_queue","","A queue of events to be triggered by cron, indexed by …",116,null],[12,"first_cron_epoch","","First epoch in which a cron task may be stored. Cron will …",116,null],[12,"claims","","Claimed power for each miner.",116,null],[12,"proof_validation_batch","","",116,null],[5,"set_claim","","",null,[[["map",6],["address",3],["claim",3]],[["result",4],["box",3]]]],[3,"Claim","","",null,null],[12,"window_post_proof_type","","Miner\'s proof type used to determine minimum miner size",117,null],[12,"raw_byte_power","","Sum of raw byte power for a miner\'s sectors.",117,null],[12,"quality_adj_power","","Sum of quality adjusted power for a miner\'s sectors.",117,null],[3,"CronEvent","","",null,null],[12,"miner_addr","","",118,null],[12,"callback_payload","","",118,null],[6,"SectorTermination","","",null,null],[17,"SECTOR_TERMINATION_EXPIRED","","Implicit termination after all deals expire",null,null],[17,"SECTOR_TERMINATION_MANUAL","","Unscheduled explicit termination by the miner",null,null],[17,"SECTOR_TERMINATION_FAULTY","","Implicit termination due to unrecovered fault",null,null],[17,"CRON_QUEUE_HAMT_BITWIDTH","","",null,null],[17,"CRON_QUEUE_AMT_BITWIDTH","","",null,null],[17,"PROOF_VALIDATION_BATCH_AMT_BITWIDTH","","",null,null],[3,"CreateMinerParams","","",null,null],[12,"owner","","",119,null],[12,"worker","","",119,null],[12,"window_post_proof_type","","",119,null],[12,"peer","","",119,null],[12,"multiaddrs","","",119,null],[3,"CreateMinerReturn","","",null,null],[12,"id_address","","Canonical ID-based address for the actor.",120,null],[12,"robust_address","","Re-org safe address for created actor.",120,null],[3,"UpdateClaimedPowerParams","","",null,null],[12,"raw_byte_delta","","",121,null],[12,"quality_adjusted_delta","","",121,null],[3,"EnrollCronEventParams","","",null,null],[12,"event_epoch","","",122,null],[12,"payload","","",122,null],[3,"CurrentTotalPowerReturn","","",null,null],[12,"raw_byte_power","","",123,null],[12,"quality_adj_power","","",123,null],[12,"pledge_collateral","","",123,null],[12,"quality_adj_power_smoothed","","",123,null],[4,"Method","","Storage power actor methods available",null,null],[13,"Constructor","","Constructor for Storage Power Actor",124,null],[13,"CreateMiner","","",124,null],[13,"UpdateClaimedPower","","",124,null],[13,"EnrollCronEvent","","",124,null],[13,"OnEpochTickEnd","","",124,null],[13,"UpdatePledgeTotal","","",124,null],[13,"SubmitPoRepForBulkVerify","","",124,null],[13,"CurrentTotalPower","","",124,null],[3,"Actor","","Storage Power Actor",null,null],[0,"reward","forest_actor","",null,null],[3,"BASELINE_EXPONENT","forest_actor::reward","Floor(e^(ln[1 + 200%] / epochsInYear) * 2^128 Q.128 …",null,null],[3,"BASELINE_INITIAL_VALUE","","",null,null],[3,"INIT_BASELINE_POWER","","1EiB",null,null],[3,"Reward","","",null,null],[12,"vesting_function","","",125,null],[12,"start_epoch","","",125,null],[12,"end_epoch","","",125,null],[12,"value","","",125,null],[12,"amount_withdrawn","","",125,null],[3,"State","","Reward actor state",null,null],[12,"cumsum_baseline","","Target CumsumRealized needs to reach for …",126,null],[12,"cumsum_realized","","CumsumRealized is cumulative sum of network power capped …",126,null],[12,"effective_network_time","","Ceiling of real effective network time <code>theta</code> based on …",126,null],[12,"effective_baseline_power","","EffectiveBaselinePower is the baseline power at the …",126,null],[12,"this_epoch_reward","","The reward to be paid in per WinCount to block producers. …",126,null],[12,"this_epoch_reward_smoothed","","Smoothed <code>this_epoch_reward</code>.",126,null],[12,"this_epoch_baseline_power","","The baseline power the network is targeting at st.Epoch.",126,null],[12,"epoch","","Epoch tracks for which epoch the Reward was computed.",126,null],[12,"total_storage_power_reward","","",126,null],[12,"simple_total","","",126,null],[12,"baseline_total","","",126,null],[4,"VestingFunction","","Defines vestion function type for reward actor.",null,null],[13,"None","","",127,null],[13,"Linear","","",127,null],[3,"AwardBlockRewardParams","","",null,null],[12,"miner","","",128,null],[12,"penalty","","",128,null],[12,"gas_reward","","",128,null],[12,"win_count","","",128,null],[3,"ThisEpochRewardReturn","","",null,null],[12,"this_epoch_reward_smoothed","","",129,null],[12,"this_epoch_baseline_power","","",129,null],[17,"PENALTY_MULTIPLIER","","PenaltyMultiplier is the factor miner penaltys are scaled …",null,null],[4,"Method","","Reward actor methods available",null,null],[13,"Constructor","","",130,null],[13,"AwardBlockReward","","",130,null],[13,"ThisEpochReward","","",130,null],[13,"UpdateNetworkKPI","","",130,null],[3,"Actor","","Reward Actor",null,null],[0,"singletons","forest_actor","",null,null],[3,"SYSTEM_ACTOR_ADDR","forest_actor::singletons","",null,null],[3,"INIT_ACTOR_ADDR","","",null,null],[3,"REWARD_ACTOR_ADDR","","",null,null],[3,"CRON_ACTOR_ADDR","","",null,null],[3,"STORAGE_POWER_ACTOR_ADDR","","",null,null],[3,"STORAGE_MARKET_ACTOR_ADDR","","",null,null],[3,"VERIFIED_REGISTRY_ACTOR_ADDR","","",null,null],[3,"CHAOS_ACTOR_ADDR","","",null,null],[3,"BURNT_FUNDS_ACTOR_ADDR","","Distinguished AccountActor that is the destination of all …",null,null],[3,"RESERVE_ADDRESS","","",null,null],[17,"FIRST_NON_SINGLETON_ADDR","","Defines first available ID address after builtin actors",null,null],[0,"system","forest_actor","",null,null],[4,"Method","forest_actor::system","System actor methods.",null,null],[13,"Constructor","","",131,null],[3,"State","","System actor state.",null,null],[3,"Actor","","System actor.",null,null],[0,"verifreg","forest_actor","",null,null],[3,"State","forest_actor::verifreg","",null,null],[12,"root_key","","",132,null],[12,"verifiers","","",132,null],[12,"verified_clients","","",132,null],[3,"MINIMUM_VERIFIED_DEAL_SIZE","","",null,null],[3,"VerifierParams","","",null,null],[12,"address","","",133,null],[12,"allowance","","",133,null],[6,"AddVerifierParams","","",null,null],[6,"AddVerifierClientParams","","",null,null],[6,"DataCap","","DataCap is an integer number of bytes. We can introduce …",null,null],[3,"BytesParams","","",null,null],[12,"address","","Address of verified client.",134,null],[12,"deal_size","","Number of bytes to use.",134,null],[6,"UseBytesParams","","",null,null],[6,"RestoreBytesParams","","",null,null],[4,"Method","","Account actor methods available",null,null],[13,"Constructor","","",135,null],[13,"AddVerifier","","",135,null],[13,"RemoveVerifier","","",135,null],[13,"AddVerifiedClient","","",135,null],[13,"UseBytes","","",135,null],[13,"RestoreBytes","","",135,null],[3,"Actor","","",null,null],[3,"SYSTEM_ACTOR_CODE_ID","forest_actor","",null,null],[3,"INIT_ACTOR_CODE_ID","","",null,null],[3,"CRON_ACTOR_CODE_ID","","",null,null],[3,"ACCOUNT_ACTOR_CODE_ID","","",null,null],[3,"POWER_ACTOR_CODE_ID","","",null,null],[3,"MINER_ACTOR_CODE_ID","","",null,null],[3,"MARKET_ACTOR_CODE_ID","","",null,null],[3,"PAYCH_ACTOR_CODE_ID","","",null,null],[3,"MULTISIG_ACTOR_CODE_ID","","",null,null],[3,"REWARD_ACTOR_CODE_ID","","",null,null],[3,"VERIFREG_ACTOR_CODE_ID","","",null,null],[3,"CHAOS_ACTOR_CODE_ID","","",null,null],[3,"CALLER_TYPES_SIGNABLE","","Set of actor code types that can represent external …",null,null],[5,"is_builtin_actor","","Returns true if the code <code>Cid</code> belongs to a builtin actor.",null,[[["cid",3]],["bool",15]]],[5,"is_singleton_actor","","Returns true if the code belongs to a singleton actor.",null,[[["cid",3]],["bool",15]]],[5,"is_account_actor","","Returns true if the code belongs to an account actor.",null,[[["cid",3]],["bool",15]]],[5,"is_principal","","Tests whether a code CID represents an actor that can be …",null,[[["cid",3]],["bool",15]]],[17,"EPOCH_DURATION_SECONDS","","Duration of each tipset epoch.",null,null],[17,"EXPECTED_LEADERS_PER_EPOCH","","The expected number of block producers in each epoch.",null,null],[17,"SECONDS_IN_HOUR","","",null,null],[17,"SECONDS_IN_DAY","","",null,null],[17,"SECONDS_IN_YEAR","","",null,null],[17,"EPOCHS_IN_HOUR","","",null,null],[17,"EPOCHS_IN_DAY","","",null,null],[17,"EPOCHS_IN_YEAR","","",null,null],[17,"SECTOR_QUALITY_PRECISION","","Precision used for making QA power calculations",null,null],[3,"QUALITY_BASE_MULTIPLIER","","Quality multiplier for committed capacity (no deals) in a …",null,null],[3,"DEAL_WEIGHT_MULTIPLIER","","Quality multiplier for unverified deals in a sector",null,null],[3,"VERIFIED_DEAL_WEIGHT_MULTIPLIER","","Quality multiplier for verified deals in a sector",null,null],[5,"consensus_miner_min_power","","Returns the minimum storage power required for each seal …",null,[[["registeredpostproof",4]],[["result",4],["storagepower",6],["string",3]]]],[3,"SYSTEM_ACTOR_ADDR","","",null,null],[3,"INIT_ACTOR_ADDR","","",null,null],[3,"REWARD_ACTOR_ADDR","","",null,null],[3,"CRON_ACTOR_ADDR","","",null,null],[3,"STORAGE_POWER_ACTOR_ADDR","","",null,null],[3,"STORAGE_MARKET_ACTOR_ADDR","","",null,null],[3,"VERIFIED_REGISTRY_ACTOR_ADDR","","",null,null],[3,"CHAOS_ACTOR_ADDR","","",null,null],[3,"BURNT_FUNDS_ACTOR_ADDR","","Distinguished AccountActor that is the destination of all …",null,null],[3,"RESERVE_ADDRESS","","",null,null],[17,"FIRST_NON_SINGLETON_ADDR","","Defines first available ID address after builtin actors",null,null],[14,"actor_error","","Convenience macro for generating Actor Errors",null,null],[3,"ActorError","","The error type that gets returned by actor method calls.",null,null],[3,"ActorState","","State of all actor implementations.",null,null],[12,"code","","Link to code for the actor.",136,null],[12,"state","","Link to the state of the actor.",136,null],[12,"sequence","","Sequence of the actor.",136,null],[12,"balance","","Tokens available to the actor.",136,null],[6,"DealID","","Deal identifier used in market and miner actors",null,null],[4,"ExitCode","","ExitCode defines the exit code from the VM execution.",null,null],[13,"Ok","","",137,null],[13,"SysErrSenderInvalid","","Indicates failure to find an actor in the state tree.",137,null],[13,"SysErrSenderStateInvalid","","Indicates failure to find the code for an actor.",137,null],[13,"SysErrInvalidMethod","","Indicates failure to find a method in an actor.",137,null],[13,"SysErrActorPanic","","Used for catching panics currently. (marked as …",137,null],[13,"SysErrInvalidReceiver","","Indicates a message sender has insufficient funds for a …",137,null],[13,"SysErrInsufficientFunds","","Indicates a message invocation out of sequence.",137,null],[13,"SysErrOutOfGas","","Indicates message execution (including subcalls) used …",137,null],[13,"SysErrForbidden","","Indicates a message execution is forbidden for the caller.",137,null],[13,"SysErrIllegalActor","","Indicates actor code performed a disallowed operation. …",137,null],[13,"SysErrIllegalArgument","","Indicates an invalid argument passed to a runtime method.",137,null],[13,"SysErrReserved2","","Reserved exit codes, do not use.",137,null],[13,"SysErrReserved3","","",137,null],[13,"SysErrReserved4","","",137,null],[13,"SysErrReserved5","","",137,null],[13,"SysErrReserved6","","",137,null],[13,"ErrIllegalArgument","","Indicates a method parameter is invalid.",137,null],[13,"ErrNotFound","","Indicates a requested resource does not exist.",137,null],[13,"ErrForbidden","","Indicates an action is disallowed.",137,null],[13,"ErrInsufficientFunds","","Indicates a balance of funds is insufficient.",137,null],[13,"ErrIllegalState","","Indicates an actor\'s internal state is invalid.",137,null],[13,"ErrSerialization","","Indicates de/serialization failure within actor code.",137,null],[13,"ErrTooManyProveCommits","","Power actor specific exit code.",137,null],[13,"ErrPlaceholder","","",137,null],[6,"MethodNum","","Method number indicator for calling actor methods.",null,null],[3,"Serialized","","Serialized bytes to be used as parameters into actor …",null,null],[6,"TokenAmount","","Token type to be used within the VM.",null,null],[6,"Map","","Map type to be used within actors. The underlying type is …",null,null],[6,"DealWeight","","Deal weight",null,null],[5,"make_empty_map","","Create a hamt with a custom bitwidth.",null,[[["u32",15]],["map",6]]],[5,"make_map_with_root","","Create a map with a root cid.",null,[[["cid",3]],[["map",6],["hamterror",4],["result",4]]]],[5,"make_map_with_root_and_bitwidth","","Create a map with a root cid.",null,[[["u32",15],["cid",3]],[["map",6],["hamterror",4],["result",4]]]],[5,"u64_key","","",null,[[["u64",15]],["byteskey",3]]],[5,"parse_uint_key","","",null,[[],[["uvarinterror",4],["result",4],["u64",15]]]],[5,"invoke_code","","",null,[[["serialized",3],["cid",3],["methodnum",6]],[["result",4],["option",4]]]],[11,"from","forest_actor::account","",13,[[]]],[11,"into","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"vzip","","",13,[[]]],[11,"init","","",13,[[],["usize",15]]],[11,"deref","","",13,[[["usize",15]]]],[11,"deref_mut","","",13,[[["usize",15]]]],[11,"drop","","",13,[[["usize",15]]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"vzip","","",14,[[]]],[11,"init","","",14,[[],["usize",15]]],[11,"deref","","",14,[[["usize",15]]]],[11,"deref_mut","","",14,[[["usize",15]]]],[11,"drop","","",14,[[["usize",15]]]],[11,"from","","",138,[[]]],[11,"into","","",138,[[]]],[11,"borrow","","",138,[[]]],[11,"borrow_mut","","",138,[[]]],[11,"try_from","","",138,[[],["result",4]]],[11,"try_into","","",138,[[],["result",4]]],[11,"type_id","","",138,[[],["typeid",3]]],[11,"vzip","","",138,[[]]],[11,"init","","",138,[[],["usize",15]]],[11,"deref","","",138,[[["usize",15]]]],[11,"deref_mut","","",138,[[["usize",15]]]],[11,"drop","","",138,[[["usize",15]]]],[11,"from","forest_actor","",139,[[]]],[11,"into","","",139,[[]]],[11,"borrow","","",139,[[]]],[11,"borrow_mut","","",139,[[]]],[11,"try_from","","",139,[[],["result",4]]],[11,"try_into","","",139,[[],["result",4]]],[11,"type_id","","",139,[[],["typeid",3]]],[11,"vzip","","",139,[[]]],[11,"init","","",139,[[],["usize",15]]],[11,"deref","","",139,[[["usize",15]]]],[11,"deref_mut","","",139,[[["usize",15]]]],[11,"drop","","",139,[[["usize",15]]]],[11,"from","","",140,[[]]],[11,"into","","",140,[[]]],[11,"borrow","","",140,[[]]],[11,"borrow_mut","","",140,[[]]],[11,"try_from","","",140,[[],["result",4]]],[11,"try_into","","",140,[[],["result",4]]],[11,"type_id","","",140,[[],["typeid",3]]],[11,"vzip","","",140,[[]]],[11,"init","","",140,[[],["usize",15]]],[11,"deref","","",140,[[["usize",15]]]],[11,"deref_mut","","",140,[[["usize",15]]]],[11,"drop","","",140,[[["usize",15]]]],[11,"from","","",141,[[]]],[11,"into","","",141,[[]]],[11,"borrow","","",141,[[]]],[11,"borrow_mut","","",141,[[]]],[11,"try_from","","",141,[[],["result",4]]],[11,"try_into","","",141,[[],["result",4]]],[11,"type_id","","",141,[[],["typeid",3]]],[11,"vzip","","",141,[[]]],[11,"init","","",141,[[],["usize",15]]],[11,"deref","","",141,[[["usize",15]]]],[11,"deref_mut","","",141,[[["usize",15]]]],[11,"drop","","",141,[[["usize",15]]]],[11,"from","","",142,[[]]],[11,"into","","",142,[[]]],[11,"borrow","","",142,[[]]],[11,"borrow_mut","","",142,[[]]],[11,"try_from","","",142,[[],["result",4]]],[11,"try_into","","",142,[[],["result",4]]],[11,"type_id","","",142,[[],["typeid",3]]],[11,"vzip","","",142,[[]]],[11,"init","","",142,[[],["usize",15]]],[11,"deref","","",142,[[["usize",15]]]],[11,"deref_mut","","",142,[[["usize",15]]]],[11,"drop","","",142,[[["usize",15]]]],[11,"from","","",143,[[]]],[11,"into","","",143,[[]]],[11,"borrow","","",143,[[]]],[11,"borrow_mut","","",143,[[]]],[11,"try_from","","",143,[[],["result",4]]],[11,"try_into","","",143,[[],["result",4]]],[11,"type_id","","",143,[[],["typeid",3]]],[11,"vzip","","",143,[[]]],[11,"init","","",143,[[],["usize",15]]],[11,"deref","","",143,[[["usize",15]]]],[11,"deref_mut","","",143,[[["usize",15]]]],[11,"drop","","",143,[[["usize",15]]]],[11,"from","","",144,[[]]],[11,"into","","",144,[[]]],[11,"borrow","","",144,[[]]],[11,"borrow_mut","","",144,[[]]],[11,"try_from","","",144,[[],["result",4]]],[11,"try_into","","",144,[[],["result",4]]],[11,"type_id","","",144,[[],["typeid",3]]],[11,"vzip","","",144,[[]]],[11,"init","","",144,[[],["usize",15]]],[11,"deref","","",144,[[["usize",15]]]],[11,"deref_mut","","",144,[[["usize",15]]]],[11,"drop","","",144,[[["usize",15]]]],[11,"from","","",145,[[]]],[11,"into","","",145,[[]]],[11,"borrow","","",145,[[]]],[11,"borrow_mut","","",145,[[]]],[11,"try_from","","",145,[[],["result",4]]],[11,"try_into","","",145,[[],["result",4]]],[11,"type_id","","",145,[[],["typeid",3]]],[11,"vzip","","",145,[[]]],[11,"init","","",145,[[],["usize",15]]],[11,"deref","","",145,[[["usize",15]]]],[11,"deref_mut","","",145,[[["usize",15]]]],[11,"drop","","",145,[[["usize",15]]]],[11,"from","","",146,[[]]],[11,"into","","",146,[[]]],[11,"borrow","","",146,[[]]],[11,"borrow_mut","","",146,[[]]],[11,"try_from","","",146,[[],["result",4]]],[11,"try_into","","",146,[[],["result",4]]],[11,"type_id","","",146,[[],["typeid",3]]],[11,"vzip","","",146,[[]]],[11,"init","","",146,[[],["usize",15]]],[11,"deref","","",146,[[["usize",15]]]],[11,"deref_mut","","",146,[[["usize",15]]]],[11,"drop","","",146,[[["usize",15]]]],[11,"from","","",147,[[]]],[11,"into","","",147,[[]]],[11,"borrow","","",147,[[]]],[11,"borrow_mut","","",147,[[]]],[11,"try_from","","",147,[[],["result",4]]],[11,"try_into","","",147,[[],["result",4]]],[11,"type_id","","",147,[[],["typeid",3]]],[11,"vzip","","",147,[[]]],[11,"init","","",147,[[],["usize",15]]],[11,"deref","","",147,[[["usize",15]]]],[11,"deref_mut","","",147,[[["usize",15]]]],[11,"drop","","",147,[[["usize",15]]]],[11,"from","","",148,[[]]],[11,"into","","",148,[[]]],[11,"borrow","","",148,[[]]],[11,"borrow_mut","","",148,[[]]],[11,"try_from","","",148,[[],["result",4]]],[11,"try_into","","",148,[[],["result",4]]],[11,"type_id","","",148,[[],["typeid",3]]],[11,"vzip","","",148,[[]]],[11,"init","","",148,[[],["usize",15]]],[11,"deref","","",148,[[["usize",15]]]],[11,"deref_mut","","",148,[[["usize",15]]]],[11,"drop","","",148,[[["usize",15]]]],[11,"from","","",149,[[]]],[11,"into","","",149,[[]]],[11,"borrow","","",149,[[]]],[11,"borrow_mut","","",149,[[]]],[11,"try_from","","",149,[[],["result",4]]],[11,"try_into","","",149,[[],["result",4]]],[11,"type_id","","",149,[[],["typeid",3]]],[11,"vzip","","",149,[[]]],[11,"init","","",149,[[],["usize",15]]],[11,"deref","","",149,[[["usize",15]]]],[11,"deref_mut","","",149,[[["usize",15]]]],[11,"drop","","",149,[[["usize",15]]]],[11,"from","","",150,[[]]],[11,"into","","",150,[[]]],[11,"borrow","","",150,[[]]],[11,"borrow_mut","","",150,[[]]],[11,"try_from","","",150,[[],["result",4]]],[11,"try_into","","",150,[[],["result",4]]],[11,"type_id","","",150,[[],["typeid",3]]],[11,"vzip","","",150,[[]]],[11,"init","","",150,[[],["usize",15]]],[11,"deref","","",150,[[["usize",15]]]],[11,"deref_mut","","",150,[[["usize",15]]]],[11,"drop","","",150,[[["usize",15]]]],[11,"from","","",151,[[]]],[11,"into","","",151,[[]]],[11,"borrow","","",151,[[]]],[11,"borrow_mut","","",151,[[]]],[11,"try_from","","",151,[[],["result",4]]],[11,"try_into","","",151,[[],["result",4]]],[11,"type_id","","",151,[[],["typeid",3]]],[11,"vzip","","",151,[[]]],[11,"init","","",151,[[],["usize",15]]],[11,"deref","","",151,[[["usize",15]]]],[11,"deref_mut","","",151,[[["usize",15]]]],[11,"drop","","",151,[[["usize",15]]]],[11,"from","forest_actor::cron","",16,[[]]],[11,"into","","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"vzip","","",16,[[]]],[11,"init","","",16,[[],["usize",15]]],[11,"deref","","",16,[[["usize",15]]]],[11,"deref_mut","","",16,[[["usize",15]]]],[11,"drop","","",16,[[["usize",15]]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"to_owned","","",15,[[]]],[11,"clone_into","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"vzip","","",15,[[]]],[11,"init","","",15,[[],["usize",15]]],[11,"deref","","",15,[[["usize",15]]]],[11,"deref_mut","","",15,[[["usize",15]]]],[11,"drop","","",15,[[["usize",15]]]],[11,"from","","",17,[[]]],[11,"into","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"vzip","","",17,[[]]],[11,"init","","",17,[[],["usize",15]]],[11,"deref","","",17,[[["usize",15]]]],[11,"deref_mut","","",17,[[["usize",15]]]],[11,"drop","","",17,[[["usize",15]]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"vzip","","",18,[[]]],[11,"init","","",18,[[],["usize",15]]],[11,"deref","","",18,[[["usize",15]]]],[11,"deref_mut","","",18,[[["usize",15]]]],[11,"drop","","",18,[[["usize",15]]]],[11,"from","","",152,[[]]],[11,"into","","",152,[[]]],[11,"borrow","","",152,[[]]],[11,"borrow_mut","","",152,[[]]],[11,"try_from","","",152,[[],["result",4]]],[11,"try_into","","",152,[[],["result",4]]],[11,"type_id","","",152,[[],["typeid",3]]],[11,"vzip","","",152,[[]]],[11,"init","","",152,[[],["usize",15]]],[11,"deref","","",152,[[["usize",15]]]],[11,"deref_mut","","",152,[[["usize",15]]]],[11,"drop","","",152,[[["usize",15]]]],[11,"from","forest_actor::init","",19,[[]]],[11,"into","","",19,[[]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"vzip","","",19,[[]]],[11,"init","","",19,[[],["usize",15]]],[11,"deref","","",19,[[["usize",15]]]],[11,"deref_mut","","",19,[[["usize",15]]]],[11,"drop","","",19,[[["usize",15]]]],[11,"from","","",20,[[]]],[11,"into","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"vzip","","",20,[[]]],[11,"init","","",20,[[],["usize",15]]],[11,"deref","","",20,[[["usize",15]]]],[11,"deref_mut","","",20,[[["usize",15]]]],[11,"drop","","",20,[[["usize",15]]]],[11,"from","","",21,[[]]],[11,"into","","",21,[[]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"vzip","","",21,[[]]],[11,"init","","",21,[[],["usize",15]]],[11,"deref","","",21,[[["usize",15]]]],[11,"deref_mut","","",21,[[["usize",15]]]],[11,"drop","","",21,[[["usize",15]]]],[11,"from","","",22,[[]]],[11,"into","","",22,[[]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"vzip","","",22,[[]]],[11,"init","","",22,[[],["usize",15]]],[11,"deref","","",22,[[["usize",15]]]],[11,"deref_mut","","",22,[[["usize",15]]]],[11,"drop","","",22,[[["usize",15]]]],[11,"from","","",23,[[]]],[11,"into","","",23,[[]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"vzip","","",23,[[]]],[11,"init","","",23,[[],["usize",15]]],[11,"deref","","",23,[[["usize",15]]]],[11,"deref_mut","","",23,[[["usize",15]]]],[11,"drop","","",23,[[["usize",15]]]],[11,"from","","",153,[[]]],[11,"into","","",153,[[]]],[11,"borrow","","",153,[[]]],[11,"borrow_mut","","",153,[[]]],[11,"try_from","","",153,[[],["result",4]]],[11,"try_into","","",153,[[],["result",4]]],[11,"type_id","","",153,[[],["typeid",3]]],[11,"vzip","","",153,[[]]],[11,"init","","",153,[[],["usize",15]]],[11,"deref","","",153,[[["usize",15]]]],[11,"deref_mut","","",153,[[["usize",15]]]],[11,"drop","","",153,[[["usize",15]]]],[11,"from","forest_actor::market","",24,[[]]],[11,"into","","",24,[[]]],[11,"to_owned","","",24,[[]]],[11,"clone_into","","",24,[[]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"vzip","","",24,[[]]],[11,"init","","",24,[[],["usize",15]]],[11,"deref","","",24,[[["usize",15]]]],[11,"deref_mut","","",24,[[["usize",15]]]],[11,"drop","","",24,[[["usize",15]]]],[11,"from","","",25,[[]]],[11,"into","","",25,[[]]],[11,"to_owned","","",25,[[]]],[11,"clone_into","","",25,[[]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"vzip","","",25,[[]]],[11,"init","","",25,[[],["usize",15]]],[11,"deref","","",25,[[["usize",15]]]],[11,"deref_mut","","",25,[[["usize",15]]]],[11,"drop","","",25,[[["usize",15]]]],[11,"from","","",26,[[]]],[11,"into","","",26,[[]]],[11,"to_owned","","",26,[[]]],[11,"clone_into","","",26,[[]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"vzip","","",26,[[]]],[11,"init","","",26,[[],["usize",15]]],[11,"deref","","",26,[[["usize",15]]]],[11,"deref_mut","","",26,[[["usize",15]]]],[11,"drop","","",26,[[["usize",15]]]],[11,"from","","",27,[[]]],[11,"into","","",27,[[]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"vzip","","",27,[[]]],[11,"init","","",27,[[],["usize",15]]],[11,"deref","","",27,[[["usize",15]]]],[11,"deref_mut","","",27,[[["usize",15]]]],[11,"drop","","",27,[[["usize",15]]]],[11,"from","","",28,[[]]],[11,"into","","",28,[[]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"vzip","","",28,[[]]],[11,"init","","",28,[[],["usize",15]]],[11,"deref","","",28,[[["usize",15]]]],[11,"deref_mut","","",28,[[["usize",15]]]],[11,"drop","","",28,[[["usize",15]]]],[11,"from","","",29,[[]]],[11,"into","","",29,[[]]],[11,"borrow","","",29,[[]]],[11,"borrow_mut","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"try_into","","",29,[[],["result",4]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"vzip","","",29,[[]]],[11,"init","","",29,[[],["usize",15]]],[11,"deref","","",29,[[["usize",15]]]],[11,"deref_mut","","",29,[[["usize",15]]]],[11,"drop","","",29,[[["usize",15]]]],[11,"from","","",30,[[]]],[11,"into","","",30,[[]]],[11,"borrow","","",30,[[]]],[11,"borrow_mut","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"try_into","","",30,[[],["result",4]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"vzip","","",30,[[]]],[11,"init","","",30,[[],["usize",15]]],[11,"deref","","",30,[[["usize",15]]]],[11,"deref_mut","","",30,[[["usize",15]]]],[11,"drop","","",30,[[["usize",15]]]],[11,"from","","",31,[[]]],[11,"into","","",31,[[]]],[11,"borrow","","",31,[[]]],[11,"borrow_mut","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"try_into","","",31,[[],["result",4]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"vzip","","",31,[[]]],[11,"init","","",31,[[],["usize",15]]],[11,"deref","","",31,[[["usize",15]]]],[11,"deref_mut","","",31,[[["usize",15]]]],[11,"drop","","",31,[[["usize",15]]]],[11,"from","","",32,[[]]],[11,"into","","",32,[[]]],[11,"borrow","","",32,[[]]],[11,"borrow_mut","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"try_into","","",32,[[],["result",4]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"vzip","","",32,[[]]],[11,"init","","",32,[[],["usize",15]]],[11,"deref","","",32,[[["usize",15]]]],[11,"deref_mut","","",32,[[["usize",15]]]],[11,"drop","","",32,[[["usize",15]]]],[11,"from","","",33,[[]]],[11,"into","","",33,[[]]],[11,"borrow","","",33,[[]]],[11,"borrow_mut","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"try_into","","",33,[[],["result",4]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"vzip","","",33,[[]]],[11,"init","","",33,[[],["usize",15]]],[11,"deref","","",33,[[["usize",15]]]],[11,"deref_mut","","",33,[[["usize",15]]]],[11,"drop","","",33,[[["usize",15]]]],[11,"from","","",34,[[]]],[11,"into","","",34,[[]]],[11,"borrow","","",34,[[]]],[11,"borrow_mut","","",34,[[]]],[11,"try_from","","",34,[[],["result",4]]],[11,"try_into","","",34,[[],["result",4]]],[11,"type_id","","",34,[[],["typeid",3]]],[11,"vzip","","",34,[[]]],[11,"init","","",34,[[],["usize",15]]],[11,"deref","","",34,[[["usize",15]]]],[11,"deref_mut","","",34,[[["usize",15]]]],[11,"drop","","",34,[[["usize",15]]]],[11,"from","","",35,[[]]],[11,"into","","",35,[[]]],[11,"borrow","","",35,[[]]],[11,"borrow_mut","","",35,[[]]],[11,"try_from","","",35,[[],["result",4]]],[11,"try_into","","",35,[[],["result",4]]],[11,"type_id","","",35,[[],["typeid",3]]],[11,"vzip","","",35,[[]]],[11,"init","","",35,[[],["usize",15]]],[11,"deref","","",35,[[["usize",15]]]],[11,"deref_mut","","",35,[[["usize",15]]]],[11,"drop","","",35,[[["usize",15]]]],[11,"from","","",36,[[]]],[11,"into","","",36,[[]]],[11,"borrow","","",36,[[]]],[11,"borrow_mut","","",36,[[]]],[11,"try_from","","",36,[[],["result",4]]],[11,"try_into","","",36,[[],["result",4]]],[11,"type_id","","",36,[[],["typeid",3]]],[11,"vzip","","",36,[[]]],[11,"init","","",36,[[],["usize",15]]],[11,"deref","","",36,[[["usize",15]]]],[11,"deref_mut","","",36,[[["usize",15]]]],[11,"drop","","",36,[[["usize",15]]]],[11,"from","","",37,[[]]],[11,"into","","",37,[[]]],[11,"borrow","","",37,[[]]],[11,"borrow_mut","","",37,[[]]],[11,"try_from","","",37,[[],["result",4]]],[11,"try_into","","",37,[[],["result",4]]],[11,"type_id","","",37,[[],["typeid",3]]],[11,"vzip","","",37,[[]]],[11,"init","","",37,[[],["usize",15]]],[11,"deref","","",37,[[["usize",15]]]],[11,"deref_mut","","",37,[[["usize",15]]]],[11,"drop","","",37,[[["usize",15]]]],[11,"from","","",38,[[]]],[11,"into","","",38,[[]]],[11,"borrow","","",38,[[]]],[11,"borrow_mut","","",38,[[]]],[11,"try_from","","",38,[[],["result",4]]],[11,"try_into","","",38,[[],["result",4]]],[11,"type_id","","",38,[[],["typeid",3]]],[11,"vzip","","",38,[[]]],[11,"init","","",38,[[],["usize",15]]],[11,"deref","","",38,[[["usize",15]]]],[11,"deref_mut","","",38,[[["usize",15]]]],[11,"drop","","",38,[[["usize",15]]]],[11,"from","","",39,[[]]],[11,"into","","",39,[[]]],[11,"borrow","","",39,[[]]],[11,"borrow_mut","","",39,[[]]],[11,"try_from","","",39,[[],["result",4]]],[11,"try_into","","",39,[[],["result",4]]],[11,"type_id","","",39,[[],["typeid",3]]],[11,"vzip","","",39,[[]]],[11,"init","","",39,[[],["usize",15]]],[11,"deref","","",39,[[["usize",15]]]],[11,"deref_mut","","",39,[[["usize",15]]]],[11,"drop","","",39,[[["usize",15]]]],[11,"from","","",40,[[]]],[11,"into","","",40,[[]]],[11,"borrow","","",40,[[]]],[11,"borrow_mut","","",40,[[]]],[11,"try_from","","",40,[[],["result",4]]],[11,"try_into","","",40,[[],["result",4]]],[11,"type_id","","",40,[[],["typeid",3]]],[11,"vzip","","",40,[[]]],[11,"init","","",40,[[],["usize",15]]],[11,"deref","","",40,[[["usize",15]]]],[11,"deref_mut","","",40,[[["usize",15]]]],[11,"drop","","",40,[[["usize",15]]]],[11,"from","","",41,[[]]],[11,"into","","",41,[[]]],[11,"borrow","","",41,[[]]],[11,"borrow_mut","","",41,[[]]],[11,"try_from","","",41,[[],["result",4]]],[11,"try_into","","",41,[[],["result",4]]],[11,"type_id","","",41,[[],["typeid",3]]],[11,"vzip","","",41,[[]]],[11,"init","","",41,[[],["usize",15]]],[11,"deref","","",41,[[["usize",15]]]],[11,"deref_mut","","",41,[[["usize",15]]]],[11,"drop","","",41,[[["usize",15]]]],[11,"from","","",154,[[]]],[11,"into","","",154,[[]]],[11,"borrow","","",154,[[]]],[11,"borrow_mut","","",154,[[]]],[11,"try_from","","",154,[[],["result",4]]],[11,"try_into","","",154,[[],["result",4]]],[11,"type_id","","",154,[[],["typeid",3]]],[11,"vzip","","",154,[[]]],[11,"init","","",154,[[],["usize",15]]],[11,"deref","","",154,[[["usize",15]]]],[11,"deref_mut","","",154,[[["usize",15]]]],[11,"drop","","",154,[[["usize",15]]]],[11,"from","forest_actor::miner","",42,[[]]],[11,"into","","",42,[[]]],[11,"borrow","","",42,[[]]],[11,"borrow_mut","","",42,[[]]],[11,"try_from","","",42,[[],["result",4]]],[11,"try_into","","",42,[[],["result",4]]],[11,"type_id","","",42,[[],["typeid",3]]],[11,"vzip","","",42,[[]]],[11,"init","","",42,[[],["usize",15]]],[11,"deref","","",42,[[["usize",15]]]],[11,"deref_mut","","",42,[[["usize",15]]]],[11,"drop","","",42,[[["usize",15]]]],[11,"from","","",43,[[]]],[11,"into","","",43,[[]]],[11,"borrow","","",43,[[]]],[11,"borrow_mut","","",43,[[]]],[11,"try_from","","",43,[[],["result",4]]],[11,"try_into","","",43,[[],["result",4]]],[11,"type_id","","",43,[[],["typeid",3]]],[11,"vzip","","",43,[[]]],[11,"init","","",43,[[],["usize",15]]],[11,"deref","","",43,[[["usize",15]]]],[11,"deref_mut","","",43,[[["usize",15]]]],[11,"drop","","",43,[[["usize",15]]]],[11,"from","","",44,[[]]],[11,"into","","",44,[[]]],[11,"borrow","","",44,[[]]],[11,"borrow_mut","","",44,[[]]],[11,"try_from","","",44,[[],["result",4]]],[11,"try_into","","",44,[[],["result",4]]],[11,"type_id","","",44,[[],["typeid",3]]],[11,"vzip","","",44,[[]]],[11,"init","","",44,[[],["usize",15]]],[11,"deref","","",44,[[["usize",15]]]],[11,"deref_mut","","",44,[[["usize",15]]]],[11,"drop","","",44,[[["usize",15]]]],[11,"from","","",155,[[]]],[11,"into","","",155,[[]]],[11,"borrow","","",155,[[]]],[11,"borrow_mut","","",155,[[]]],[11,"try_from","","",155,[[],["result",4]]],[11,"try_into","","",155,[[],["result",4]]],[11,"type_id","","",155,[[],["typeid",3]]],[11,"vzip","","",155,[[]]],[11,"init","","",155,[[],["usize",15]]],[11,"deref","","",155,[[["usize",15]]]],[11,"deref_mut","","",155,[[["usize",15]]]],[11,"drop","","",155,[[["usize",15]]]],[11,"from","","",45,[[]]],[11,"into","","",45,[[]]],[11,"borrow","","",45,[[]]],[11,"borrow_mut","","",45,[[]]],[11,"try_from","","",45,[[],["result",4]]],[11,"try_into","","",45,[[],["result",4]]],[11,"type_id","","",45,[[],["typeid",3]]],[11,"vzip","","",45,[[]]],[11,"init","","",45,[[],["usize",15]]],[11,"deref","","",45,[[["usize",15]]]],[11,"deref_mut","","",45,[[["usize",15]]]],[11,"drop","","",45,[[["usize",15]]]],[11,"from","","",46,[[]]],[11,"into","","",46,[[]]],[11,"borrow","","",46,[[]]],[11,"borrow_mut","","",46,[[]]],[11,"try_from","","",46,[[],["result",4]]],[11,"try_into","","",46,[[],["result",4]]],[11,"type_id","","",46,[[],["typeid",3]]],[11,"vzip","","",46,[[]]],[11,"init","","",46,[[],["usize",15]]],[11,"deref","","",46,[[["usize",15]]]],[11,"deref_mut","","",46,[[["usize",15]]]],[11,"drop","","",46,[[["usize",15]]]],[11,"from","","",47,[[]]],[11,"into","","",47,[[]]],[11,"to_owned","","",47,[[]]],[11,"clone_into","","",47,[[]]],[11,"borrow","","",47,[[]]],[11,"borrow_mut","","",47,[[]]],[11,"try_from","","",47,[[],["result",4]]],[11,"try_into","","",47,[[],["result",4]]],[11,"type_id","","",47,[[],["typeid",3]]],[11,"vzip","","",47,[[]]],[11,"init","","",47,[[],["usize",15]]],[11,"deref","","",47,[[["usize",15]]]],[11,"deref_mut","","",47,[[["usize",15]]]],[11,"drop","","",47,[[["usize",15]]]],[11,"from","","",48,[[]]],[11,"into","","",48,[[]]],[11,"borrow","","",48,[[]]],[11,"borrow_mut","","",48,[[]]],[11,"try_from","","",48,[[],["result",4]]],[11,"try_into","","",48,[[],["result",4]]],[11,"type_id","","",48,[[],["typeid",3]]],[11,"vzip","","",48,[[]]],[11,"init","","",48,[[],["usize",15]]],[11,"deref","","",48,[[["usize",15]]]],[11,"deref_mut","","",48,[[["usize",15]]]],[11,"drop","","",48,[[["usize",15]]]],[11,"from","","",156,[[]]],[11,"into","","",156,[[]]],[11,"borrow","","",156,[[]]],[11,"borrow_mut","","",156,[[]]],[11,"try_from","","",156,[[],["result",4]]],[11,"try_into","","",156,[[],["result",4]]],[11,"type_id","","",156,[[],["typeid",3]]],[11,"vzip","","",156,[[]]],[11,"init","","",156,[[],["usize",15]]],[11,"deref","","",156,[[["usize",15]]]],[11,"deref_mut","","",156,[[["usize",15]]]],[11,"drop","","",156,[[["usize",15]]]],[11,"from","","",157,[[]]],[11,"into","","",157,[[]]],[11,"borrow","","",157,[[]]],[11,"borrow_mut","","",157,[[]]],[11,"try_from","","",157,[[],["result",4]]],[11,"try_into","","",157,[[],["result",4]]],[11,"type_id","","",157,[[],["typeid",3]]],[11,"vzip","","",157,[[]]],[11,"init","","",157,[[],["usize",15]]],[11,"deref","","",157,[[["usize",15]]]],[11,"deref_mut","","",157,[[["usize",15]]]],[11,"drop","","",157,[[["usize",15]]]],[11,"from","","",49,[[]]],[11,"into","","",49,[[]]],[11,"to_owned","","",49,[[]]],[11,"clone_into","","",49,[[]]],[11,"borrow","","",49,[[]]],[11,"borrow_mut","","",49,[[]]],[11,"try_from","","",49,[[],["result",4]]],[11,"try_into","","",49,[[],["result",4]]],[11,"type_id","","",49,[[],["typeid",3]]],[11,"vzip","","",49,[[]]],[11,"init","","",49,[[],["usize",15]]],[11,"deref","","",49,[[["usize",15]]]],[11,"deref_mut","","",49,[[["usize",15]]]],[11,"drop","","",49,[[["usize",15]]]],[11,"from","","",50,[[]]],[11,"into","","",50,[[]]],[11,"to_owned","","",50,[[]]],[11,"clone_into","","",50,[[]]],[11,"borrow","","",50,[[]]],[11,"borrow_mut","","",50,[[]]],[11,"try_from","","",50,[[],["result",4]]],[11,"try_into","","",50,[[],["result",4]]],[11,"type_id","","",50,[[],["typeid",3]]],[11,"equivalent","","",50,[[],["bool",15]]],[11,"vzip","","",50,[[]]],[11,"init","","",50,[[],["usize",15]]],[11,"deref","","",50,[[["usize",15]]]],[11,"deref_mut","","",50,[[["usize",15]]]],[11,"drop","","",50,[[["usize",15]]]],[11,"from","","",51,[[]]],[11,"into","","",51,[[]]],[11,"borrow","","",51,[[]]],[11,"borrow_mut","","",51,[[]]],[11,"try_from","","",51,[[],["result",4]]],[11,"try_into","","",51,[[],["result",4]]],[11,"type_id","","",51,[[],["typeid",3]]],[11,"vzip","","",51,[[]]],[11,"init","","",51,[[],["usize",15]]],[11,"deref","","",51,[[["usize",15]]]],[11,"deref_mut","","",51,[[["usize",15]]]],[11,"drop","","",51,[[["usize",15]]]],[11,"from","","",158,[[]]],[11,"into","","",158,[[]]],[11,"borrow","","",158,[[]]],[11,"borrow_mut","","",158,[[]]],[11,"try_from","","",158,[[],["result",4]]],[11,"try_into","","",158,[[],["result",4]]],[11,"type_id","","",158,[[],["typeid",3]]],[11,"vzip","","",158,[[]]],[11,"init","","",158,[[],["usize",15]]],[11,"deref","","",158,[[["usize",15]]]],[11,"deref_mut","","",158,[[["usize",15]]]],[11,"drop","","",158,[[["usize",15]]]],[11,"from","","",159,[[]]],[11,"into","","",159,[[]]],[11,"borrow","","",159,[[]]],[11,"borrow_mut","","",159,[[]]],[11,"try_from","","",159,[[],["result",4]]],[11,"try_into","","",159,[[],["result",4]]],[11,"type_id","","",159,[[],["typeid",3]]],[11,"vzip","","",159,[[]]],[11,"init","","",159,[[],["usize",15]]],[11,"deref","","",159,[[["usize",15]]]],[11,"deref_mut","","",159,[[["usize",15]]]],[11,"drop","","",159,[[["usize",15]]]],[11,"from","","",52,[[]]],[11,"into","","",52,[[]]],[11,"borrow","","",52,[[]]],[11,"borrow_mut","","",52,[[]]],[11,"try_from","","",52,[[],["result",4]]],[11,"try_into","","",52,[[],["result",4]]],[11,"type_id","","",52,[[],["typeid",3]]],[11,"vzip","","",52,[[]]],[11,"init","","",52,[[],["usize",15]]],[11,"deref","","",52,[[["usize",15]]]],[11,"deref_mut","","",52,[[["usize",15]]]],[11,"drop","","",52,[[["usize",15]]]],[11,"from","","",53,[[]]],[11,"into","","",53,[[]]],[11,"to_owned","","",53,[[]]],[11,"clone_into","","",53,[[]]],[11,"borrow","","",53,[[]]],[11,"borrow_mut","","",53,[[]]],[11,"try_from","","",53,[[],["result",4]]],[11,"try_into","","",53,[[],["result",4]]],[11,"type_id","","",53,[[],["typeid",3]]],[11,"vzip","","",53,[[]]],[11,"init","","",53,[[],["usize",15]]],[11,"deref","","",53,[[["usize",15]]]],[11,"deref_mut","","",53,[[["usize",15]]]],[11,"drop","","",53,[[["usize",15]]]],[11,"from","","",54,[[]]],[11,"into","","",54,[[]]],[11,"borrow","","",54,[[]]],[11,"borrow_mut","","",54,[[]]],[11,"try_from","","",54,[[],["result",4]]],[11,"try_into","","",54,[[],["result",4]]],[11,"type_id","","",54,[[],["typeid",3]]],[11,"vzip","","",54,[[]]],[11,"init","","",54,[[],["usize",15]]],[11,"deref","","",54,[[["usize",15]]]],[11,"deref_mut","","",54,[[["usize",15]]]],[11,"drop","","",54,[[["usize",15]]]],[11,"from","","",55,[[]]],[11,"into","","",55,[[]]],[11,"borrow","","",55,[[]]],[11,"borrow_mut","","",55,[[]]],[11,"try_from","","",55,[[],["result",4]]],[11,"try_into","","",55,[[],["result",4]]],[11,"type_id","","",55,[[],["typeid",3]]],[11,"vzip","","",55,[[]]],[11,"init","","",55,[[],["usize",15]]],[11,"deref","","",55,[[["usize",15]]]],[11,"deref_mut","","",55,[[["usize",15]]]],[11,"drop","","",55,[[["usize",15]]]],[11,"from","","",56,[[]]],[11,"into","","",56,[[]]],[11,"borrow","","",56,[[]]],[11,"borrow_mut","","",56,[[]]],[11,"try_from","","",56,[[],["result",4]]],[11,"try_into","","",56,[[],["result",4]]],[11,"type_id","","",56,[[],["typeid",3]]],[11,"vzip","","",56,[[]]],[11,"init","","",56,[[],["usize",15]]],[11,"deref","","",56,[[["usize",15]]]],[11,"deref_mut","","",56,[[["usize",15]]]],[11,"drop","","",56,[[["usize",15]]]],[11,"from","","",57,[[]]],[11,"into","","",57,[[]]],[11,"borrow","","",57,[[]]],[11,"borrow_mut","","",57,[[]]],[11,"try_from","","",57,[[],["result",4]]],[11,"try_into","","",57,[[],["result",4]]],[11,"type_id","","",57,[[],["typeid",3]]],[11,"vzip","","",57,[[]]],[11,"init","","",57,[[],["usize",15]]],[11,"deref","","",57,[[["usize",15]]]],[11,"deref_mut","","",57,[[["usize",15]]]],[11,"drop","","",57,[[["usize",15]]]],[11,"from","","",58,[[]]],[11,"into","","",58,[[]]],[11,"borrow","","",58,[[]]],[11,"borrow_mut","","",58,[[]]],[11,"try_from","","",58,[[],["result",4]]],[11,"try_into","","",58,[[],["result",4]]],[11,"type_id","","",58,[[],["typeid",3]]],[11,"vzip","","",58,[[]]],[11,"init","","",58,[[],["usize",15]]],[11,"deref","","",58,[[["usize",15]]]],[11,"deref_mut","","",58,[[["usize",15]]]],[11,"drop","","",58,[[["usize",15]]]],[11,"from","","",59,[[]]],[11,"into","","",59,[[]]],[11,"borrow","","",59,[[]]],[11,"borrow_mut","","",59,[[]]],[11,"try_from","","",59,[[],["result",4]]],[11,"try_into","","",59,[[],["result",4]]],[11,"type_id","","",59,[[],["typeid",3]]],[11,"vzip","","",59,[[]]],[11,"init","","",59,[[],["usize",15]]],[11,"deref","","",59,[[["usize",15]]]],[11,"deref_mut","","",59,[[["usize",15]]]],[11,"drop","","",59,[[["usize",15]]]],[11,"from","","",60,[[]]],[11,"into","","",60,[[]]],[11,"borrow","","",60,[[]]],[11,"borrow_mut","","",60,[[]]],[11,"try_from","","",60,[[],["result",4]]],[11,"try_into","","",60,[[],["result",4]]],[11,"type_id","","",60,[[],["typeid",3]]],[11,"vzip","","",60,[[]]],[11,"init","","",60,[[],["usize",15]]],[11,"deref","","",60,[[["usize",15]]]],[11,"deref_mut","","",60,[[["usize",15]]]],[11,"drop","","",60,[[["usize",15]]]],[11,"from","","",61,[[]]],[11,"into","","",61,[[]]],[11,"borrow","","",61,[[]]],[11,"borrow_mut","","",61,[[]]],[11,"try_from","","",61,[[],["result",4]]],[11,"try_into","","",61,[[],["result",4]]],[11,"type_id","","",61,[[],["typeid",3]]],[11,"vzip","","",61,[[]]],[11,"init","","",61,[[],["usize",15]]],[11,"deref","","",61,[[["usize",15]]]],[11,"deref_mut","","",61,[[["usize",15]]]],[11,"drop","","",61,[[["usize",15]]]],[11,"from","","",62,[[]]],[11,"into","","",62,[[]]],[11,"borrow","","",62,[[]]],[11,"borrow_mut","","",62,[[]]],[11,"try_from","","",62,[[],["result",4]]],[11,"try_into","","",62,[[],["result",4]]],[11,"type_id","","",62,[[],["typeid",3]]],[11,"vzip","","",62,[[]]],[11,"init","","",62,[[],["usize",15]]],[11,"deref","","",62,[[["usize",15]]]],[11,"deref_mut","","",62,[[["usize",15]]]],[11,"drop","","",62,[[["usize",15]]]],[11,"from","","",63,[[]]],[11,"into","","",63,[[]]],[11,"borrow","","",63,[[]]],[11,"borrow_mut","","",63,[[]]],[11,"try_from","","",63,[[],["result",4]]],[11,"try_into","","",63,[[],["result",4]]],[11,"type_id","","",63,[[],["typeid",3]]],[11,"vzip","","",63,[[]]],[11,"init","","",63,[[],["usize",15]]],[11,"deref","","",63,[[["usize",15]]]],[11,"deref_mut","","",63,[[["usize",15]]]],[11,"drop","","",63,[[["usize",15]]]],[11,"from","","",64,[[]]],[11,"into","","",64,[[]]],[11,"borrow","","",64,[[]]],[11,"borrow_mut","","",64,[[]]],[11,"try_from","","",64,[[],["result",4]]],[11,"try_into","","",64,[[],["result",4]]],[11,"type_id","","",64,[[],["typeid",3]]],[11,"vzip","","",64,[[]]],[11,"init","","",64,[[],["usize",15]]],[11,"deref","","",64,[[["usize",15]]]],[11,"deref_mut","","",64,[[["usize",15]]]],[11,"drop","","",64,[[["usize",15]]]],[11,"from","","",65,[[]]],[11,"into","","",65,[[]]],[11,"borrow","","",65,[[]]],[11,"borrow_mut","","",65,[[]]],[11,"try_from","","",65,[[],["result",4]]],[11,"try_into","","",65,[[],["result",4]]],[11,"type_id","","",65,[[],["typeid",3]]],[11,"vzip","","",65,[[]]],[11,"init","","",65,[[],["usize",15]]],[11,"deref","","",65,[[["usize",15]]]],[11,"deref_mut","","",65,[[["usize",15]]]],[11,"drop","","",65,[[["usize",15]]]],[11,"from","","",66,[[]]],[11,"into","","",66,[[]]],[11,"borrow","","",66,[[]]],[11,"borrow_mut","","",66,[[]]],[11,"try_from","","",66,[[],["result",4]]],[11,"try_into","","",66,[[],["result",4]]],[11,"type_id","","",66,[[],["typeid",3]]],[11,"vzip","","",66,[[]]],[11,"init","","",66,[[],["usize",15]]],[11,"deref","","",66,[[["usize",15]]]],[11,"deref_mut","","",66,[[["usize",15]]]],[11,"drop","","",66,[[["usize",15]]]],[11,"from","","",67,[[]]],[11,"into","","",67,[[]]],[11,"borrow","","",67,[[]]],[11,"borrow_mut","","",67,[[]]],[11,"try_from","","",67,[[],["result",4]]],[11,"try_into","","",67,[[],["result",4]]],[11,"type_id","","",67,[[],["typeid",3]]],[11,"vzip","","",67,[[]]],[11,"init","","",67,[[],["usize",15]]],[11,"deref","","",67,[[["usize",15]]]],[11,"deref_mut","","",67,[[["usize",15]]]],[11,"drop","","",67,[[["usize",15]]]],[11,"from","","",68,[[]]],[11,"into","","",68,[[]]],[11,"borrow","","",68,[[]]],[11,"borrow_mut","","",68,[[]]],[11,"try_from","","",68,[[],["result",4]]],[11,"try_into","","",68,[[],["result",4]]],[11,"type_id","","",68,[[],["typeid",3]]],[11,"vzip","","",68,[[]]],[11,"init","","",68,[[],["usize",15]]],[11,"deref","","",68,[[["usize",15]]]],[11,"deref_mut","","",68,[[["usize",15]]]],[11,"drop","","",68,[[["usize",15]]]],[11,"from","","",69,[[]]],[11,"into","","",69,[[]]],[11,"borrow","","",69,[[]]],[11,"borrow_mut","","",69,[[]]],[11,"try_from","","",69,[[],["result",4]]],[11,"try_into","","",69,[[],["result",4]]],[11,"type_id","","",69,[[],["typeid",3]]],[11,"vzip","","",69,[[]]],[11,"init","","",69,[[],["usize",15]]],[11,"deref","","",69,[[["usize",15]]]],[11,"deref_mut","","",69,[[["usize",15]]]],[11,"drop","","",69,[[["usize",15]]]],[11,"from","","",70,[[]]],[11,"into","","",70,[[]]],[11,"borrow","","",70,[[]]],[11,"borrow_mut","","",70,[[]]],[11,"try_from","","",70,[[],["result",4]]],[11,"try_into","","",70,[[],["result",4]]],[11,"type_id","","",70,[[],["typeid",3]]],[11,"vzip","","",70,[[]]],[11,"init","","",70,[[],["usize",15]]],[11,"deref","","",70,[[["usize",15]]]],[11,"deref_mut","","",70,[[["usize",15]]]],[11,"drop","","",70,[[["usize",15]]]],[11,"from","","",71,[[]]],[11,"into","","",71,[[]]],[11,"borrow","","",71,[[]]],[11,"borrow_mut","","",71,[[]]],[11,"try_from","","",71,[[],["result",4]]],[11,"try_into","","",71,[[],["result",4]]],[11,"type_id","","",71,[[],["typeid",3]]],[11,"vzip","","",71,[[]]],[11,"init","","",71,[[],["usize",15]]],[11,"deref","","",71,[[["usize",15]]]],[11,"deref_mut","","",71,[[["usize",15]]]],[11,"drop","","",71,[[["usize",15]]]],[11,"from","","",72,[[]]],[11,"into","","",72,[[]]],[11,"borrow","","",72,[[]]],[11,"borrow_mut","","",72,[[]]],[11,"try_from","","",72,[[],["result",4]]],[11,"try_into","","",72,[[],["result",4]]],[11,"type_id","","",72,[[],["typeid",3]]],[11,"vzip","","",72,[[]]],[11,"init","","",72,[[],["usize",15]]],[11,"deref","","",72,[[["usize",15]]]],[11,"deref_mut","","",72,[[["usize",15]]]],[11,"drop","","",72,[[["usize",15]]]],[11,"from","","",73,[[]]],[11,"into","","",73,[[]]],[11,"borrow","","",73,[[]]],[11,"borrow_mut","","",73,[[]]],[11,"try_from","","",73,[[],["result",4]]],[11,"try_into","","",73,[[],["result",4]]],[11,"type_id","","",73,[[],["typeid",3]]],[11,"vzip","","",73,[[]]],[11,"init","","",73,[[],["usize",15]]],[11,"deref","","",73,[[["usize",15]]]],[11,"deref_mut","","",73,[[["usize",15]]]],[11,"drop","","",73,[[["usize",15]]]],[11,"from","","",74,[[]]],[11,"into","","",74,[[]]],[11,"borrow","","",74,[[]]],[11,"borrow_mut","","",74,[[]]],[11,"try_from","","",74,[[],["result",4]]],[11,"try_into","","",74,[[],["result",4]]],[11,"type_id","","",74,[[],["typeid",3]]],[11,"vzip","","",74,[[]]],[11,"init","","",74,[[],["usize",15]]],[11,"deref","","",74,[[["usize",15]]]],[11,"deref_mut","","",74,[[["usize",15]]]],[11,"drop","","",74,[[["usize",15]]]],[11,"from","","",75,[[]]],[11,"into","","",75,[[]]],[11,"borrow","","",75,[[]]],[11,"borrow_mut","","",75,[[]]],[11,"try_from","","",75,[[],["result",4]]],[11,"try_into","","",75,[[],["result",4]]],[11,"type_id","","",75,[[],["typeid",3]]],[11,"vzip","","",75,[[]]],[11,"init","","",75,[[],["usize",15]]],[11,"deref","","",75,[[["usize",15]]]],[11,"deref_mut","","",75,[[["usize",15]]]],[11,"drop","","",75,[[["usize",15]]]],[11,"from","","",76,[[]]],[11,"into","","",76,[[]]],[11,"borrow","","",76,[[]]],[11,"borrow_mut","","",76,[[]]],[11,"try_from","","",76,[[],["result",4]]],[11,"try_into","","",76,[[],["result",4]]],[11,"type_id","","",76,[[],["typeid",3]]],[11,"vzip","","",76,[[]]],[11,"init","","",76,[[],["usize",15]]],[11,"deref","","",76,[[["usize",15]]]],[11,"deref_mut","","",76,[[["usize",15]]]],[11,"drop","","",76,[[["usize",15]]]],[11,"from","","",77,[[]]],[11,"into","","",77,[[]]],[11,"borrow","","",77,[[]]],[11,"borrow_mut","","",77,[[]]],[11,"try_from","","",77,[[],["result",4]]],[11,"try_into","","",77,[[],["result",4]]],[11,"type_id","","",77,[[],["typeid",3]]],[11,"vzip","","",77,[[]]],[11,"init","","",77,[[],["usize",15]]],[11,"deref","","",77,[[["usize",15]]]],[11,"deref_mut","","",77,[[["usize",15]]]],[11,"drop","","",77,[[["usize",15]]]],[11,"from","","",78,[[]]],[11,"into","","",78,[[]]],[11,"borrow","","",78,[[]]],[11,"borrow_mut","","",78,[[]]],[11,"try_from","","",78,[[],["result",4]]],[11,"try_into","","",78,[[],["result",4]]],[11,"type_id","","",78,[[],["typeid",3]]],[11,"vzip","","",78,[[]]],[11,"init","","",78,[[],["usize",15]]],[11,"deref","","",78,[[["usize",15]]]],[11,"deref_mut","","",78,[[["usize",15]]]],[11,"drop","","",78,[[["usize",15]]]],[11,"from","","",79,[[]]],[11,"into","","",79,[[]]],[11,"borrow","","",79,[[]]],[11,"borrow_mut","","",79,[[]]],[11,"try_from","","",79,[[],["result",4]]],[11,"try_into","","",79,[[],["result",4]]],[11,"type_id","","",79,[[],["typeid",3]]],[11,"vzip","","",79,[[]]],[11,"init","","",79,[[],["usize",15]]],[11,"deref","","",79,[[["usize",15]]]],[11,"deref_mut","","",79,[[["usize",15]]]],[11,"drop","","",79,[[["usize",15]]]],[11,"from","","",80,[[]]],[11,"into","","",80,[[]]],[11,"borrow","","",80,[[]]],[11,"borrow_mut","","",80,[[]]],[11,"try_from","","",80,[[],["result",4]]],[11,"try_into","","",80,[[],["result",4]]],[11,"type_id","","",80,[[],["typeid",3]]],[11,"vzip","","",80,[[]]],[11,"init","","",80,[[],["usize",15]]],[11,"deref","","",80,[[["usize",15]]]],[11,"deref_mut","","",80,[[["usize",15]]]],[11,"drop","","",80,[[["usize",15]]]],[11,"from","","",81,[[]]],[11,"into","","",81,[[]]],[11,"borrow","","",81,[[]]],[11,"borrow_mut","","",81,[[]]],[11,"try_from","","",81,[[],["result",4]]],[11,"try_into","","",81,[[],["result",4]]],[11,"type_id","","",81,[[],["typeid",3]]],[11,"vzip","","",81,[[]]],[11,"init","","",81,[[],["usize",15]]],[11,"deref","","",81,[[["usize",15]]]],[11,"deref_mut","","",81,[[["usize",15]]]],[11,"drop","","",81,[[["usize",15]]]],[11,"from","","",82,[[]]],[11,"into","","",82,[[]]],[11,"borrow","","",82,[[]]],[11,"borrow_mut","","",82,[[]]],[11,"try_from","","",82,[[],["result",4]]],[11,"try_into","","",82,[[],["result",4]]],[11,"type_id","","",82,[[],["typeid",3]]],[11,"vzip","","",82,[[]]],[11,"init","","",82,[[],["usize",15]]],[11,"deref","","",82,[[["usize",15]]]],[11,"deref_mut","","",82,[[["usize",15]]]],[11,"drop","","",82,[[["usize",15]]]],[11,"from","","",83,[[]]],[11,"into","","",83,[[]]],[11,"to_owned","","",83,[[]]],[11,"clone_into","","",83,[[]]],[11,"borrow","","",83,[[]]],[11,"borrow_mut","","",83,[[]]],[11,"try_from","","",83,[[],["result",4]]],[11,"try_into","","",83,[[],["result",4]]],[11,"type_id","","",83,[[],["typeid",3]]],[11,"vzip","","",83,[[]]],[11,"init","","",83,[[],["usize",15]]],[11,"deref","","",83,[[["usize",15]]]],[11,"deref_mut","","",83,[[["usize",15]]]],[11,"drop","","",83,[[["usize",15]]]],[11,"from","","",84,[[]]],[11,"into","","",84,[[]]],[11,"to_owned","","",84,[[]]],[11,"clone_into","","",84,[[]]],[11,"borrow","","",84,[[]]],[11,"borrow_mut","","",84,[[]]],[11,"try_from","","",84,[[],["result",4]]],[11,"try_into","","",84,[[],["result",4]]],[11,"type_id","","",84,[[],["typeid",3]]],[11,"vzip","","",84,[[]]],[11,"init","","",84,[[],["usize",15]]],[11,"deref","","",84,[[["usize",15]]]],[11,"deref_mut","","",84,[[["usize",15]]]],[11,"drop","","",84,[[["usize",15]]]],[11,"from","","",85,[[]]],[11,"into","","",85,[[]]],[11,"to_owned","","",85,[[]]],[11,"clone_into","","",85,[[]]],[11,"borrow","","",85,[[]]],[11,"borrow_mut","","",85,[[]]],[11,"try_from","","",85,[[],["result",4]]],[11,"try_into","","",85,[[],["result",4]]],[11,"type_id","","",85,[[],["typeid",3]]],[11,"vzip","","",85,[[]]],[11,"init","","",85,[[],["usize",15]]],[11,"deref","","",85,[[["usize",15]]]],[11,"deref_mut","","",85,[[["usize",15]]]],[11,"drop","","",85,[[["usize",15]]]],[11,"from","","",86,[[]]],[11,"into","","",86,[[]]],[11,"to_owned","","",86,[[]]],[11,"clone_into","","",86,[[]]],[11,"borrow","","",86,[[]]],[11,"borrow_mut","","",86,[[]]],[11,"try_from","","",86,[[],["result",4]]],[11,"try_into","","",86,[[],["result",4]]],[11,"type_id","","",86,[[],["typeid",3]]],[11,"vzip","","",86,[[]]],[11,"init","","",86,[[],["usize",15]]],[11,"deref","","",86,[[["usize",15]]]],[11,"deref_mut","","",86,[[["usize",15]]]],[11,"drop","","",86,[[["usize",15]]]],[11,"from","","",87,[[]]],[11,"into","","",87,[[]]],[11,"borrow","","",87,[[]]],[11,"borrow_mut","","",87,[[]]],[11,"try_from","","",87,[[],["result",4]]],[11,"try_into","","",87,[[],["result",4]]],[11,"type_id","","",87,[[],["typeid",3]]],[11,"vzip","","",87,[[]]],[11,"init","","",87,[[],["usize",15]]],[11,"deref","","",87,[[["usize",15]]]],[11,"deref_mut","","",87,[[["usize",15]]]],[11,"drop","","",87,[[["usize",15]]]],[11,"from","","",88,[[]]],[11,"into","","",88,[[]]],[11,"to_owned","","",88,[[]]],[11,"clone_into","","",88,[[]]],[11,"borrow","","",88,[[]]],[11,"borrow_mut","","",88,[[]]],[11,"try_from","","",88,[[],["result",4]]],[11,"try_into","","",88,[[],["result",4]]],[11,"type_id","","",88,[[],["typeid",3]]],[11,"vzip","","",88,[[]]],[11,"init","","",88,[[],["usize",15]]],[11,"deref","","",88,[[["usize",15]]]],[11,"deref_mut","","",88,[[["usize",15]]]],[11,"drop","","",88,[[["usize",15]]]],[11,"from","","",89,[[]]],[11,"into","","",89,[[]]],[11,"borrow","","",89,[[]]],[11,"borrow_mut","","",89,[[]]],[11,"try_from","","",89,[[],["result",4]]],[11,"try_into","","",89,[[],["result",4]]],[11,"type_id","","",89,[[],["typeid",3]]],[11,"vzip","","",89,[[]]],[11,"init","","",89,[[],["usize",15]]],[11,"deref","","",89,[[["usize",15]]]],[11,"deref_mut","","",89,[[["usize",15]]]],[11,"drop","","",89,[[["usize",15]]]],[11,"from","","",90,[[]]],[11,"into","","",90,[[]]],[11,"borrow","","",90,[[]]],[11,"borrow_mut","","",90,[[]]],[11,"try_from","","",90,[[],["result",4]]],[11,"try_into","","",90,[[],["result",4]]],[11,"type_id","","",90,[[],["typeid",3]]],[11,"vzip","","",90,[[]]],[11,"init","","",90,[[],["usize",15]]],[11,"deref","","",90,[[["usize",15]]]],[11,"deref_mut","","",90,[[["usize",15]]]],[11,"drop","","",90,[[["usize",15]]]],[11,"from","","",91,[[]]],[11,"into","","",91,[[]]],[11,"borrow","","",91,[[]]],[11,"borrow_mut","","",91,[[]]],[11,"try_from","","",91,[[],["result",4]]],[11,"try_into","","",91,[[],["result",4]]],[11,"type_id","","",91,[[],["typeid",3]]],[11,"vzip","","",91,[[]]],[11,"init","","",91,[[],["usize",15]]],[11,"deref","","",91,[[["usize",15]]]],[11,"deref_mut","","",91,[[["usize",15]]]],[11,"drop","","",91,[[["usize",15]]]],[11,"from","","",160,[[]]],[11,"into","","",160,[[]]],[11,"borrow","","",160,[[]]],[11,"borrow_mut","","",160,[[]]],[11,"try_from","","",160,[[],["result",4]]],[11,"try_into","","",160,[[],["result",4]]],[11,"type_id","","",160,[[],["typeid",3]]],[11,"vzip","","",160,[[]]],[11,"init","","",160,[[],["usize",15]]],[11,"deref","","",160,[[["usize",15]]]],[11,"deref_mut","","",160,[[["usize",15]]]],[11,"drop","","",160,[[["usize",15]]]],[11,"from","forest_actor::multisig","",92,[[]]],[11,"into","","",92,[[]]],[11,"to_owned","","",92,[[]]],[11,"clone_into","","",92,[[]]],[11,"borrow","","",92,[[]]],[11,"borrow_mut","","",92,[[]]],[11,"try_from","","",92,[[],["result",4]]],[11,"try_into","","",92,[[],["result",4]]],[11,"type_id","","",92,[[],["typeid",3]]],[11,"vzip","","",92,[[]]],[11,"init","","",92,[[],["usize",15]]],[11,"deref","","",92,[[["usize",15]]]],[11,"deref_mut","","",92,[[["usize",15]]]],[11,"drop","","",92,[[["usize",15]]]],[11,"from","","",93,[[]]],[11,"into","","",93,[[]]],[11,"to_owned","","",93,[[]]],[11,"clone_into","","",93,[[]]],[11,"borrow","","",93,[[]]],[11,"borrow_mut","","",93,[[]]],[11,"try_from","","",93,[[],["result",4]]],[11,"try_into","","",93,[[],["result",4]]],[11,"type_id","","",93,[[],["typeid",3]]],[11,"vzip","","",93,[[]]],[11,"init","","",93,[[],["usize",15]]],[11,"deref","","",93,[[["usize",15]]]],[11,"deref_mut","","",93,[[["usize",15]]]],[11,"drop","","",93,[[["usize",15]]]],[11,"from","","",94,[[]]],[11,"into","","",94,[[]]],[11,"to_owned","","",94,[[]]],[11,"clone_into","","",94,[[]]],[11,"borrow","","",94,[[]]],[11,"borrow_mut","","",94,[[]]],[11,"try_from","","",94,[[],["result",4]]],[11,"try_into","","",94,[[],["result",4]]],[11,"type_id","","",94,[[],["typeid",3]]],[11,"vzip","","",94,[[]]],[11,"init","","",94,[[],["usize",15]]],[11,"deref","","",94,[[["usize",15]]]],[11,"deref_mut","","",94,[[["usize",15]]]],[11,"drop","","",94,[[["usize",15]]]],[11,"from","","",95,[[]]],[11,"into","","",95,[[]]],[11,"borrow","","",95,[[]]],[11,"borrow_mut","","",95,[[]]],[11,"try_from","","",95,[[],["result",4]]],[11,"try_into","","",95,[[],["result",4]]],[11,"type_id","","",95,[[],["typeid",3]]],[11,"vzip","","",95,[[]]],[11,"init","","",95,[[],["usize",15]]],[11,"deref","","",95,[[["usize",15]]]],[11,"deref_mut","","",95,[[["usize",15]]]],[11,"drop","","",95,[[["usize",15]]]],[11,"from","","",96,[[]]],[11,"into","","",96,[[]]],[11,"borrow","","",96,[[]]],[11,"borrow_mut","","",96,[[]]],[11,"try_from","","",96,[[],["result",4]]],[11,"try_into","","",96,[[],["result",4]]],[11,"type_id","","",96,[[],["typeid",3]]],[11,"vzip","","",96,[[]]],[11,"init","","",96,[[],["usize",15]]],[11,"deref","","",96,[[["usize",15]]]],[11,"deref_mut","","",96,[[["usize",15]]]],[11,"drop","","",96,[[["usize",15]]]],[11,"from","","",97,[[]]],[11,"into","","",97,[[]]],[11,"borrow","","",97,[[]]],[11,"borrow_mut","","",97,[[]]],[11,"try_from","","",97,[[],["result",4]]],[11,"try_into","","",97,[[],["result",4]]],[11,"type_id","","",97,[[],["typeid",3]]],[11,"vzip","","",97,[[]]],[11,"init","","",97,[[],["usize",15]]],[11,"deref","","",97,[[["usize",15]]]],[11,"deref_mut","","",97,[[["usize",15]]]],[11,"drop","","",97,[[["usize",15]]]],[11,"from","","",98,[[]]],[11,"into","","",98,[[]]],[11,"borrow","","",98,[[]]],[11,"borrow_mut","","",98,[[]]],[11,"try_from","","",98,[[],["result",4]]],[11,"try_into","","",98,[[],["result",4]]],[11,"type_id","","",98,[[],["typeid",3]]],[11,"vzip","","",98,[[]]],[11,"init","","",98,[[],["usize",15]]],[11,"deref","","",98,[[["usize",15]]]],[11,"deref_mut","","",98,[[["usize",15]]]],[11,"drop","","",98,[[["usize",15]]]],[11,"from","","",99,[[]]],[11,"into","","",99,[[]]],[11,"borrow","","",99,[[]]],[11,"borrow_mut","","",99,[[]]],[11,"try_from","","",99,[[],["result",4]]],[11,"try_into","","",99,[[],["result",4]]],[11,"type_id","","",99,[[],["typeid",3]]],[11,"vzip","","",99,[[]]],[11,"init","","",99,[[],["usize",15]]],[11,"deref","","",99,[[["usize",15]]]],[11,"deref_mut","","",99,[[["usize",15]]]],[11,"drop","","",99,[[["usize",15]]]],[11,"from","","",100,[[]]],[11,"into","","",100,[[]]],[11,"borrow","","",100,[[]]],[11,"borrow_mut","","",100,[[]]],[11,"try_from","","",100,[[],["result",4]]],[11,"try_into","","",100,[[],["result",4]]],[11,"type_id","","",100,[[],["typeid",3]]],[11,"vzip","","",100,[[]]],[11,"init","","",100,[[],["usize",15]]],[11,"deref","","",100,[[["usize",15]]]],[11,"deref_mut","","",100,[[["usize",15]]]],[11,"drop","","",100,[[["usize",15]]]],[11,"from","","",101,[[]]],[11,"into","","",101,[[]]],[11,"borrow","","",101,[[]]],[11,"borrow_mut","","",101,[[]]],[11,"try_from","","",101,[[],["result",4]]],[11,"try_into","","",101,[[],["result",4]]],[11,"type_id","","",101,[[],["typeid",3]]],[11,"vzip","","",101,[[]]],[11,"init","","",101,[[],["usize",15]]],[11,"deref","","",101,[[["usize",15]]]],[11,"deref_mut","","",101,[[["usize",15]]]],[11,"drop","","",101,[[["usize",15]]]],[11,"from","","",102,[[]]],[11,"into","","",102,[[]]],[11,"borrow","","",102,[[]]],[11,"borrow_mut","","",102,[[]]],[11,"try_from","","",102,[[],["result",4]]],[11,"try_into","","",102,[[],["result",4]]],[11,"type_id","","",102,[[],["typeid",3]]],[11,"vzip","","",102,[[]]],[11,"init","","",102,[[],["usize",15]]],[11,"deref","","",102,[[["usize",15]]]],[11,"deref_mut","","",102,[[["usize",15]]]],[11,"drop","","",102,[[["usize",15]]]],[11,"from","","",103,[[]]],[11,"into","","",103,[[]]],[11,"borrow","","",103,[[]]],[11,"borrow_mut","","",103,[[]]],[11,"try_from","","",103,[[],["result",4]]],[11,"try_into","","",103,[[],["result",4]]],[11,"type_id","","",103,[[],["typeid",3]]],[11,"vzip","","",103,[[]]],[11,"init","","",103,[[],["usize",15]]],[11,"deref","","",103,[[["usize",15]]]],[11,"deref_mut","","",103,[[["usize",15]]]],[11,"drop","","",103,[[["usize",15]]]],[11,"from","","",104,[[]]],[11,"into","","",104,[[]]],[11,"borrow","","",104,[[]]],[11,"borrow_mut","","",104,[[]]],[11,"try_from","","",104,[[],["result",4]]],[11,"try_into","","",104,[[],["result",4]]],[11,"type_id","","",104,[[],["typeid",3]]],[11,"vzip","","",104,[[]]],[11,"init","","",104,[[],["usize",15]]],[11,"deref","","",104,[[["usize",15]]]],[11,"deref_mut","","",104,[[["usize",15]]]],[11,"drop","","",104,[[["usize",15]]]],[11,"from","","",105,[[]]],[11,"into","","",105,[[]]],[11,"borrow","","",105,[[]]],[11,"borrow_mut","","",105,[[]]],[11,"try_from","","",105,[[],["result",4]]],[11,"try_into","","",105,[[],["result",4]]],[11,"type_id","","",105,[[],["typeid",3]]],[11,"vzip","","",105,[[]]],[11,"init","","",105,[[],["usize",15]]],[11,"deref","","",105,[[["usize",15]]]],[11,"deref_mut","","",105,[[["usize",15]]]],[11,"drop","","",105,[[["usize",15]]]],[11,"from","","",106,[[]]],[11,"into","","",106,[[]]],[11,"borrow","","",106,[[]]],[11,"borrow_mut","","",106,[[]]],[11,"try_from","","",106,[[],["result",4]]],[11,"try_into","","",106,[[],["result",4]]],[11,"type_id","","",106,[[],["typeid",3]]],[11,"vzip","","",106,[[]]],[11,"init","","",106,[[],["usize",15]]],[11,"deref","","",106,[[["usize",15]]]],[11,"deref_mut","","",106,[[["usize",15]]]],[11,"drop","","",106,[[["usize",15]]]],[11,"from","","",161,[[]]],[11,"into","","",161,[[]]],[11,"borrow","","",161,[[]]],[11,"borrow_mut","","",161,[[]]],[11,"try_from","","",161,[[],["result",4]]],[11,"try_into","","",161,[[],["result",4]]],[11,"type_id","","",161,[[],["typeid",3]]],[11,"vzip","","",161,[[]]],[11,"init","","",161,[[],["usize",15]]],[11,"deref","","",161,[[["usize",15]]]],[11,"deref_mut","","",161,[[["usize",15]]]],[11,"drop","","",161,[[["usize",15]]]],[11,"from","forest_actor::network","",162,[[]]],[11,"into","","",162,[[]]],[11,"borrow","","",162,[[]]],[11,"borrow_mut","","",162,[[]]],[11,"try_from","","",162,[[],["result",4]]],[11,"try_into","","",162,[[],["result",4]]],[11,"type_id","","",162,[[],["typeid",3]]],[11,"vzip","","",162,[[]]],[11,"init","","",162,[[],["usize",15]]],[11,"deref","","",162,[[["usize",15]]]],[11,"deref_mut","","",162,[[["usize",15]]]],[11,"drop","","",162,[[["usize",15]]]],[11,"from","","",163,[[]]],[11,"into","","",163,[[]]],[11,"borrow","","",163,[[]]],[11,"borrow_mut","","",163,[[]]],[11,"try_from","","",163,[[],["result",4]]],[11,"try_into","","",163,[[],["result",4]]],[11,"type_id","","",163,[[],["typeid",3]]],[11,"vzip","","",163,[[]]],[11,"init","","",163,[[],["usize",15]]],[11,"deref","","",163,[[["usize",15]]]],[11,"deref_mut","","",163,[[["usize",15]]]],[11,"drop","","",163,[[["usize",15]]]],[11,"from","","",164,[[]]],[11,"into","","",164,[[]]],[11,"borrow","","",164,[[]]],[11,"borrow_mut","","",164,[[]]],[11,"try_from","","",164,[[],["result",4]]],[11,"try_into","","",164,[[],["result",4]]],[11,"type_id","","",164,[[],["typeid",3]]],[11,"vzip","","",164,[[]]],[11,"init","","",164,[[],["usize",15]]],[11,"deref","","",164,[[["usize",15]]]],[11,"deref_mut","","",164,[[["usize",15]]]],[11,"drop","","",164,[[["usize",15]]]],[11,"from","forest_actor::paych","",109,[[]]],[11,"into","","",109,[[]]],[11,"borrow","","",109,[[]]],[11,"borrow_mut","","",109,[[]]],[11,"try_from","","",109,[[],["result",4]]],[11,"try_into","","",109,[[],["result",4]]],[11,"type_id","","",109,[[],["typeid",3]]],[11,"vzip","","",109,[[]]],[11,"init","","",109,[[],["usize",15]]],[11,"deref","","",109,[[["usize",15]]]],[11,"deref_mut","","",109,[[["usize",15]]]],[11,"drop","","",109,[[["usize",15]]]],[11,"from","","",107,[[]]],[11,"into","","",107,[[]]],[11,"to_owned","","",107,[[]]],[11,"clone_into","","",107,[[]]],[11,"borrow","","",107,[[]]],[11,"borrow_mut","","",107,[[]]],[11,"try_from","","",107,[[],["result",4]]],[11,"try_into","","",107,[[],["result",4]]],[11,"type_id","","",107,[[],["typeid",3]]],[11,"vzip","","",107,[[]]],[11,"init","","",107,[[],["usize",15]]],[11,"deref","","",107,[[["usize",15]]]],[11,"deref_mut","","",107,[[["usize",15]]]],[11,"drop","","",107,[[["usize",15]]]],[11,"from","","",108,[[]]],[11,"into","","",108,[[]]],[11,"to_owned","","",108,[[]]],[11,"clone_into","","",108,[[]]],[11,"borrow","","",108,[[]]],[11,"borrow_mut","","",108,[[]]],[11,"try_from","","",108,[[],["result",4]]],[11,"try_into","","",108,[[],["result",4]]],[11,"type_id","","",108,[[],["typeid",3]]],[11,"vzip","","",108,[[]]],[11,"init","","",108,[[],["usize",15]]],[11,"deref","","",108,[[["usize",15]]]],[11,"deref_mut","","",108,[[["usize",15]]]],[11,"drop","","",108,[[["usize",15]]]],[11,"from","","",110,[[]]],[11,"into","","",110,[[]]],[11,"borrow","","",110,[[]]],[11,"borrow_mut","","",110,[[]]],[11,"try_from","","",110,[[],["result",4]]],[11,"try_into","","",110,[[],["result",4]]],[11,"type_id","","",110,[[],["typeid",3]]],[11,"vzip","","",110,[[]]],[11,"init","","",110,[[],["usize",15]]],[11,"deref","","",110,[[["usize",15]]]],[11,"deref_mut","","",110,[[["usize",15]]]],[11,"drop","","",110,[[["usize",15]]]],[11,"from","","",111,[[]]],[11,"into","","",111,[[]]],[11,"to_owned","","",111,[[]]],[11,"clone_into","","",111,[[]]],[11,"borrow","","",111,[[]]],[11,"borrow_mut","","",111,[[]]],[11,"try_from","","",111,[[],["result",4]]],[11,"try_into","","",111,[[],["result",4]]],[11,"type_id","","",111,[[],["typeid",3]]],[11,"vzip","","",111,[[]]],[11,"init","","",111,[[],["usize",15]]],[11,"deref","","",111,[[["usize",15]]]],[11,"deref_mut","","",111,[[["usize",15]]]],[11,"drop","","",111,[[["usize",15]]]],[11,"from","","",112,[[]]],[11,"into","","",112,[[]]],[11,"to_owned","","",112,[[]]],[11,"clone_into","","",112,[[]]],[11,"borrow","","",112,[[]]],[11,"borrow_mut","","",112,[[]]],[11,"try_from","","",112,[[],["result",4]]],[11,"try_into","","",112,[[],["result",4]]],[11,"type_id","","",112,[[],["typeid",3]]],[11,"vzip","","",112,[[]]],[11,"init","","",112,[[],["usize",15]]],[11,"deref","","",112,[[["usize",15]]]],[11,"deref_mut","","",112,[[["usize",15]]]],[11,"drop","","",112,[[["usize",15]]]],[11,"from","","",113,[[]]],[11,"into","","",113,[[]]],[11,"borrow","","",113,[[]]],[11,"borrow_mut","","",113,[[]]],[11,"try_from","","",113,[[],["result",4]]],[11,"try_into","","",113,[[],["result",4]]],[11,"type_id","","",113,[[],["typeid",3]]],[11,"vzip","","",113,[[]]],[11,"init","","",113,[[],["usize",15]]],[11,"deref","","",113,[[["usize",15]]]],[11,"deref_mut","","",113,[[["usize",15]]]],[11,"drop","","",113,[[["usize",15]]]],[11,"from","","",114,[[]]],[11,"into","","",114,[[]]],[11,"borrow","","",114,[[]]],[11,"borrow_mut","","",114,[[]]],[11,"try_from","","",114,[[],["result",4]]],[11,"try_into","","",114,[[],["result",4]]],[11,"type_id","","",114,[[],["typeid",3]]],[11,"vzip","","",114,[[]]],[11,"init","","",114,[[],["usize",15]]],[11,"deref","","",114,[[["usize",15]]]],[11,"deref_mut","","",114,[[["usize",15]]]],[11,"drop","","",114,[[["usize",15]]]],[11,"from","","",115,[[]]],[11,"into","","",115,[[]]],[11,"borrow","","",115,[[]]],[11,"borrow_mut","","",115,[[]]],[11,"try_from","","",115,[[],["result",4]]],[11,"try_into","","",115,[[],["result",4]]],[11,"type_id","","",115,[[],["typeid",3]]],[11,"vzip","","",115,[[]]],[11,"init","","",115,[[],["usize",15]]],[11,"deref","","",115,[[["usize",15]]]],[11,"deref_mut","","",115,[[["usize",15]]]],[11,"drop","","",115,[[["usize",15]]]],[11,"from","","",165,[[]]],[11,"into","","",165,[[]]],[11,"borrow","","",165,[[]]],[11,"borrow_mut","","",165,[[]]],[11,"try_from","","",165,[[],["result",4]]],[11,"try_into","","",165,[[],["result",4]]],[11,"type_id","","",165,[[],["typeid",3]]],[11,"vzip","","",165,[[]]],[11,"init","","",165,[[],["usize",15]]],[11,"deref","","",165,[[["usize",15]]]],[11,"deref_mut","","",165,[[["usize",15]]]],[11,"drop","","",165,[[["usize",15]]]],[11,"from","forest_actor::power","",116,[[]]],[11,"into","","",116,[[]]],[11,"borrow","","",116,[[]]],[11,"borrow_mut","","",116,[[]]],[11,"try_from","","",116,[[],["result",4]]],[11,"try_into","","",116,[[],["result",4]]],[11,"type_id","","",116,[[],["typeid",3]]],[11,"vzip","","",116,[[]]],[11,"init","","",116,[[],["usize",15]]],[11,"deref","","",116,[[["usize",15]]]],[11,"deref_mut","","",116,[[["usize",15]]]],[11,"drop","","",116,[[["usize",15]]]],[11,"from","","",117,[[]]],[11,"into","","",117,[[]]],[11,"to_owned","","",117,[[]]],[11,"clone_into","","",117,[[]]],[11,"borrow","","",117,[[]]],[11,"borrow_mut","","",117,[[]]],[11,"try_from","","",117,[[],["result",4]]],[11,"try_into","","",117,[[],["result",4]]],[11,"type_id","","",117,[[],["typeid",3]]],[11,"vzip","","",117,[[]]],[11,"init","","",117,[[],["usize",15]]],[11,"deref","","",117,[[["usize",15]]]],[11,"deref_mut","","",117,[[["usize",15]]]],[11,"drop","","",117,[[["usize",15]]]],[11,"from","","",118,[[]]],[11,"into","","",118,[[]]],[11,"to_owned","","",118,[[]]],[11,"clone_into","","",118,[[]]],[11,"borrow","","",118,[[]]],[11,"borrow_mut","","",118,[[]]],[11,"try_from","","",118,[[],["result",4]]],[11,"try_into","","",118,[[],["result",4]]],[11,"type_id","","",118,[[],["typeid",3]]],[11,"vzip","","",118,[[]]],[11,"init","","",118,[[],["usize",15]]],[11,"deref","","",118,[[["usize",15]]]],[11,"deref_mut","","",118,[[["usize",15]]]],[11,"drop","","",118,[[["usize",15]]]],[11,"from","","",119,[[]]],[11,"into","","",119,[[]]],[11,"borrow","","",119,[[]]],[11,"borrow_mut","","",119,[[]]],[11,"try_from","","",119,[[],["result",4]]],[11,"try_into","","",119,[[],["result",4]]],[11,"type_id","","",119,[[],["typeid",3]]],[11,"vzip","","",119,[[]]],[11,"init","","",119,[[],["usize",15]]],[11,"deref","","",119,[[["usize",15]]]],[11,"deref_mut","","",119,[[["usize",15]]]],[11,"drop","","",119,[[["usize",15]]]],[11,"from","","",120,[[]]],[11,"into","","",120,[[]]],[11,"borrow","","",120,[[]]],[11,"borrow_mut","","",120,[[]]],[11,"try_from","","",120,[[],["result",4]]],[11,"try_into","","",120,[[],["result",4]]],[11,"type_id","","",120,[[],["typeid",3]]],[11,"vzip","","",120,[[]]],[11,"init","","",120,[[],["usize",15]]],[11,"deref","","",120,[[["usize",15]]]],[11,"deref_mut","","",120,[[["usize",15]]]],[11,"drop","","",120,[[["usize",15]]]],[11,"from","","",121,[[]]],[11,"into","","",121,[[]]],[11,"borrow","","",121,[[]]],[11,"borrow_mut","","",121,[[]]],[11,"try_from","","",121,[[],["result",4]]],[11,"try_into","","",121,[[],["result",4]]],[11,"type_id","","",121,[[],["typeid",3]]],[11,"vzip","","",121,[[]]],[11,"init","","",121,[[],["usize",15]]],[11,"deref","","",121,[[["usize",15]]]],[11,"deref_mut","","",121,[[["usize",15]]]],[11,"drop","","",121,[[["usize",15]]]],[11,"from","","",122,[[]]],[11,"into","","",122,[[]]],[11,"borrow","","",122,[[]]],[11,"borrow_mut","","",122,[[]]],[11,"try_from","","",122,[[],["result",4]]],[11,"try_into","","",122,[[],["result",4]]],[11,"type_id","","",122,[[],["typeid",3]]],[11,"vzip","","",122,[[]]],[11,"init","","",122,[[],["usize",15]]],[11,"deref","","",122,[[["usize",15]]]],[11,"deref_mut","","",122,[[["usize",15]]]],[11,"drop","","",122,[[["usize",15]]]],[11,"from","","",123,[[]]],[11,"into","","",123,[[]]],[11,"borrow","","",123,[[]]],[11,"borrow_mut","","",123,[[]]],[11,"try_from","","",123,[[],["result",4]]],[11,"try_into","","",123,[[],["result",4]]],[11,"type_id","","",123,[[],["typeid",3]]],[11,"vzip","","",123,[[]]],[11,"init","","",123,[[],["usize",15]]],[11,"deref","","",123,[[["usize",15]]]],[11,"deref_mut","","",123,[[["usize",15]]]],[11,"drop","","",123,[[["usize",15]]]],[11,"from","","",124,[[]]],[11,"into","","",124,[[]]],[11,"borrow","","",124,[[]]],[11,"borrow_mut","","",124,[[]]],[11,"try_from","","",124,[[],["result",4]]],[11,"try_into","","",124,[[],["result",4]]],[11,"type_id","","",124,[[],["typeid",3]]],[11,"vzip","","",124,[[]]],[11,"init","","",124,[[],["usize",15]]],[11,"deref","","",124,[[["usize",15]]]],[11,"deref_mut","","",124,[[["usize",15]]]],[11,"drop","","",124,[[["usize",15]]]],[11,"from","","",166,[[]]],[11,"into","","",166,[[]]],[11,"borrow","","",166,[[]]],[11,"borrow_mut","","",166,[[]]],[11,"try_from","","",166,[[],["result",4]]],[11,"try_into","","",166,[[],["result",4]]],[11,"type_id","","",166,[[],["typeid",3]]],[11,"vzip","","",166,[[]]],[11,"init","","",166,[[],["usize",15]]],[11,"deref","","",166,[[["usize",15]]]],[11,"deref_mut","","",166,[[["usize",15]]]],[11,"drop","","",166,[[["usize",15]]]],[11,"from","forest_actor::reward","",167,[[]]],[11,"into","","",167,[[]]],[11,"borrow","","",167,[[]]],[11,"borrow_mut","","",167,[[]]],[11,"try_from","","",167,[[],["result",4]]],[11,"try_into","","",167,[[],["result",4]]],[11,"type_id","","",167,[[],["typeid",3]]],[11,"vzip","","",167,[[]]],[11,"init","","",167,[[],["usize",15]]],[11,"deref","","",167,[[["usize",15]]]],[11,"deref_mut","","",167,[[["usize",15]]]],[11,"drop","","",167,[[["usize",15]]]],[11,"from","","",168,[[]]],[11,"into","","",168,[[]]],[11,"borrow","","",168,[[]]],[11,"borrow_mut","","",168,[[]]],[11,"try_from","","",168,[[],["result",4]]],[11,"try_into","","",168,[[],["result",4]]],[11,"type_id","","",168,[[],["typeid",3]]],[11,"vzip","","",168,[[]]],[11,"init","","",168,[[],["usize",15]]],[11,"deref","","",168,[[["usize",15]]]],[11,"deref_mut","","",168,[[["usize",15]]]],[11,"drop","","",168,[[["usize",15]]]],[11,"from","","",169,[[]]],[11,"into","","",169,[[]]],[11,"borrow","","",169,[[]]],[11,"borrow_mut","","",169,[[]]],[11,"try_from","","",169,[[],["result",4]]],[11,"try_into","","",169,[[],["result",4]]],[11,"type_id","","",169,[[],["typeid",3]]],[11,"vzip","","",169,[[]]],[11,"init","","",169,[[],["usize",15]]],[11,"deref","","",169,[[["usize",15]]]],[11,"deref_mut","","",169,[[["usize",15]]]],[11,"drop","","",169,[[["usize",15]]]],[11,"from","","",126,[[]]],[11,"into","","",126,[[]]],[11,"borrow","","",126,[[]]],[11,"borrow_mut","","",126,[[]]],[11,"try_from","","",126,[[],["result",4]]],[11,"try_into","","",126,[[],["result",4]]],[11,"type_id","","",126,[[],["typeid",3]]],[11,"vzip","","",126,[[]]],[11,"init","","",126,[[],["usize",15]]],[11,"deref","","",126,[[["usize",15]]]],[11,"deref_mut","","",126,[[["usize",15]]]],[11,"drop","","",126,[[["usize",15]]]],[11,"from","","",127,[[]]],[11,"into","","",127,[[]]],[11,"to_owned","","",127,[[]]],[11,"clone_into","","",127,[[]]],[11,"borrow","","",127,[[]]],[11,"borrow_mut","","",127,[[]]],[11,"try_from","","",127,[[],["result",4]]],[11,"try_into","","",127,[[],["result",4]]],[11,"type_id","","",127,[[],["typeid",3]]],[11,"vzip","","",127,[[]]],[11,"init","","",127,[[],["usize",15]]],[11,"deref","","",127,[[["usize",15]]]],[11,"deref_mut","","",127,[[["usize",15]]]],[11,"drop","","",127,[[["usize",15]]]],[11,"from","","",125,[[]]],[11,"into","","",125,[[]]],[11,"to_owned","","",125,[[]]],[11,"clone_into","","",125,[[]]],[11,"borrow","","",125,[[]]],[11,"borrow_mut","","",125,[[]]],[11,"try_from","","",125,[[],["result",4]]],[11,"try_into","","",125,[[],["result",4]]],[11,"type_id","","",125,[[],["typeid",3]]],[11,"vzip","","",125,[[]]],[11,"init","","",125,[[],["usize",15]]],[11,"deref","","",125,[[["usize",15]]]],[11,"deref_mut","","",125,[[["usize",15]]]],[11,"drop","","",125,[[["usize",15]]]],[11,"from","","",128,[[]]],[11,"into","","",128,[[]]],[11,"to_owned","","",128,[[]]],[11,"clone_into","","",128,[[]]],[11,"borrow","","",128,[[]]],[11,"borrow_mut","","",128,[[]]],[11,"try_from","","",128,[[],["result",4]]],[11,"try_into","","",128,[[],["result",4]]],[11,"type_id","","",128,[[],["typeid",3]]],[11,"vzip","","",128,[[]]],[11,"init","","",128,[[],["usize",15]]],[11,"deref","","",128,[[["usize",15]]]],[11,"deref_mut","","",128,[[["usize",15]]]],[11,"drop","","",128,[[["usize",15]]]],[11,"from","","",129,[[]]],[11,"into","","",129,[[]]],[11,"to_owned","","",129,[[]]],[11,"clone_into","","",129,[[]]],[11,"borrow","","",129,[[]]],[11,"borrow_mut","","",129,[[]]],[11,"try_from","","",129,[[],["result",4]]],[11,"try_into","","",129,[[],["result",4]]],[11,"type_id","","",129,[[],["typeid",3]]],[11,"vzip","","",129,[[]]],[11,"init","","",129,[[],["usize",15]]],[11,"deref","","",129,[[["usize",15]]]],[11,"deref_mut","","",129,[[["usize",15]]]],[11,"drop","","",129,[[["usize",15]]]],[11,"from","","",130,[[]]],[11,"into","","",130,[[]]],[11,"borrow","","",130,[[]]],[11,"borrow_mut","","",130,[[]]],[11,"try_from","","",130,[[],["result",4]]],[11,"try_into","","",130,[[],["result",4]]],[11,"type_id","","",130,[[],["typeid",3]]],[11,"vzip","","",130,[[]]],[11,"init","","",130,[[],["usize",15]]],[11,"deref","","",130,[[["usize",15]]]],[11,"deref_mut","","",130,[[["usize",15]]]],[11,"drop","","",130,[[["usize",15]]]],[11,"from","","",170,[[]]],[11,"into","","",170,[[]]],[11,"borrow","","",170,[[]]],[11,"borrow_mut","","",170,[[]]],[11,"try_from","","",170,[[],["result",4]]],[11,"try_into","","",170,[[],["result",4]]],[11,"type_id","","",170,[[],["typeid",3]]],[11,"vzip","","",170,[[]]],[11,"init","","",170,[[],["usize",15]]],[11,"deref","","",170,[[["usize",15]]]],[11,"deref_mut","","",170,[[["usize",15]]]],[11,"drop","","",170,[[["usize",15]]]],[11,"from","forest_actor::singletons","",171,[[]]],[11,"into","","",171,[[]]],[11,"borrow","","",171,[[]]],[11,"borrow_mut","","",171,[[]]],[11,"try_from","","",171,[[],["result",4]]],[11,"try_into","","",171,[[],["result",4]]],[11,"type_id","","",171,[[],["typeid",3]]],[11,"vzip","","",171,[[]]],[11,"init","","",171,[[],["usize",15]]],[11,"deref","","",171,[[["usize",15]]]],[11,"deref_mut","","",171,[[["usize",15]]]],[11,"drop","","",171,[[["usize",15]]]],[11,"from","","",172,[[]]],[11,"into","","",172,[[]]],[11,"borrow","","",172,[[]]],[11,"borrow_mut","","",172,[[]]],[11,"try_from","","",172,[[],["result",4]]],[11,"try_into","","",172,[[],["result",4]]],[11,"type_id","","",172,[[],["typeid",3]]],[11,"vzip","","",172,[[]]],[11,"init","","",172,[[],["usize",15]]],[11,"deref","","",172,[[["usize",15]]]],[11,"deref_mut","","",172,[[["usize",15]]]],[11,"drop","","",172,[[["usize",15]]]],[11,"from","","",173,[[]]],[11,"into","","",173,[[]]],[11,"borrow","","",173,[[]]],[11,"borrow_mut","","",173,[[]]],[11,"try_from","","",173,[[],["result",4]]],[11,"try_into","","",173,[[],["result",4]]],[11,"type_id","","",173,[[],["typeid",3]]],[11,"vzip","","",173,[[]]],[11,"init","","",173,[[],["usize",15]]],[11,"deref","","",173,[[["usize",15]]]],[11,"deref_mut","","",173,[[["usize",15]]]],[11,"drop","","",173,[[["usize",15]]]],[11,"from","","",174,[[]]],[11,"into","","",174,[[]]],[11,"borrow","","",174,[[]]],[11,"borrow_mut","","",174,[[]]],[11,"try_from","","",174,[[],["result",4]]],[11,"try_into","","",174,[[],["result",4]]],[11,"type_id","","",174,[[],["typeid",3]]],[11,"vzip","","",174,[[]]],[11,"init","","",174,[[],["usize",15]]],[11,"deref","","",174,[[["usize",15]]]],[11,"deref_mut","","",174,[[["usize",15]]]],[11,"drop","","",174,[[["usize",15]]]],[11,"from","","",175,[[]]],[11,"into","","",175,[[]]],[11,"borrow","","",175,[[]]],[11,"borrow_mut","","",175,[[]]],[11,"try_from","","",175,[[],["result",4]]],[11,"try_into","","",175,[[],["result",4]]],[11,"type_id","","",175,[[],["typeid",3]]],[11,"vzip","","",175,[[]]],[11,"init","","",175,[[],["usize",15]]],[11,"deref","","",175,[[["usize",15]]]],[11,"deref_mut","","",175,[[["usize",15]]]],[11,"drop","","",175,[[["usize",15]]]],[11,"from","","",176,[[]]],[11,"into","","",176,[[]]],[11,"borrow","","",176,[[]]],[11,"borrow_mut","","",176,[[]]],[11,"try_from","","",176,[[],["result",4]]],[11,"try_into","","",176,[[],["result",4]]],[11,"type_id","","",176,[[],["typeid",3]]],[11,"vzip","","",176,[[]]],[11,"init","","",176,[[],["usize",15]]],[11,"deref","","",176,[[["usize",15]]]],[11,"deref_mut","","",176,[[["usize",15]]]],[11,"drop","","",176,[[["usize",15]]]],[11,"from","","",177,[[]]],[11,"into","","",177,[[]]],[11,"borrow","","",177,[[]]],[11,"borrow_mut","","",177,[[]]],[11,"try_from","","",177,[[],["result",4]]],[11,"try_into","","",177,[[],["result",4]]],[11,"type_id","","",177,[[],["typeid",3]]],[11,"vzip","","",177,[[]]],[11,"init","","",177,[[],["usize",15]]],[11,"deref","","",177,[[["usize",15]]]],[11,"deref_mut","","",177,[[["usize",15]]]],[11,"drop","","",177,[[["usize",15]]]],[11,"from","","",178,[[]]],[11,"into","","",178,[[]]],[11,"borrow","","",178,[[]]],[11,"borrow_mut","","",178,[[]]],[11,"try_from","","",178,[[],["result",4]]],[11,"try_into","","",178,[[],["result",4]]],[11,"type_id","","",178,[[],["typeid",3]]],[11,"vzip","","",178,[[]]],[11,"init","","",178,[[],["usize",15]]],[11,"deref","","",178,[[["usize",15]]]],[11,"deref_mut","","",178,[[["usize",15]]]],[11,"drop","","",178,[[["usize",15]]]],[11,"from","","",179,[[]]],[11,"into","","",179,[[]]],[11,"borrow","","",179,[[]]],[11,"borrow_mut","","",179,[[]]],[11,"try_from","","",179,[[],["result",4]]],[11,"try_into","","",179,[[],["result",4]]],[11,"type_id","","",179,[[],["typeid",3]]],[11,"vzip","","",179,[[]]],[11,"init","","",179,[[],["usize",15]]],[11,"deref","","",179,[[["usize",15]]]],[11,"deref_mut","","",179,[[["usize",15]]]],[11,"drop","","",179,[[["usize",15]]]],[11,"from","","",180,[[]]],[11,"into","","",180,[[]]],[11,"borrow","","",180,[[]]],[11,"borrow_mut","","",180,[[]]],[11,"try_from","","",180,[[],["result",4]]],[11,"try_into","","",180,[[],["result",4]]],[11,"type_id","","",180,[[],["typeid",3]]],[11,"vzip","","",180,[[]]],[11,"init","","",180,[[],["usize",15]]],[11,"deref","","",180,[[["usize",15]]]],[11,"deref_mut","","",180,[[["usize",15]]]],[11,"drop","","",180,[[["usize",15]]]],[11,"from","forest_actor::system","",131,[[]]],[11,"into","","",131,[[]]],[11,"borrow","","",131,[[]]],[11,"borrow_mut","","",131,[[]]],[11,"try_from","","",131,[[],["result",4]]],[11,"try_into","","",131,[[],["result",4]]],[11,"type_id","","",131,[[],["typeid",3]]],[11,"vzip","","",131,[[]]],[11,"init","","",131,[[],["usize",15]]],[11,"deref","","",131,[[["usize",15]]]],[11,"deref_mut","","",131,[[["usize",15]]]],[11,"drop","","",131,[[["usize",15]]]],[11,"from","","",181,[[]]],[11,"into","","",181,[[]]],[11,"borrow","","",181,[[]]],[11,"borrow_mut","","",181,[[]]],[11,"try_from","","",181,[[],["result",4]]],[11,"try_into","","",181,[[],["result",4]]],[11,"type_id","","",181,[[],["typeid",3]]],[11,"vzip","","",181,[[]]],[11,"init","","",181,[[],["usize",15]]],[11,"deref","","",181,[[["usize",15]]]],[11,"deref_mut","","",181,[[["usize",15]]]],[11,"drop","","",181,[[["usize",15]]]],[11,"from","","",182,[[]]],[11,"into","","",182,[[]]],[11,"borrow","","",182,[[]]],[11,"borrow_mut","","",182,[[]]],[11,"try_from","","",182,[[],["result",4]]],[11,"try_into","","",182,[[],["result",4]]],[11,"type_id","","",182,[[],["typeid",3]]],[11,"vzip","","",182,[[]]],[11,"init","","",182,[[],["usize",15]]],[11,"deref","","",182,[[["usize",15]]]],[11,"deref_mut","","",182,[[["usize",15]]]],[11,"drop","","",182,[[["usize",15]]]],[11,"from","forest_actor::verifreg","",132,[[]]],[11,"into","","",132,[[]]],[11,"borrow","","",132,[[]]],[11,"borrow_mut","","",132,[[]]],[11,"try_from","","",132,[[],["result",4]]],[11,"try_into","","",132,[[],["result",4]]],[11,"type_id","","",132,[[],["typeid",3]]],[11,"vzip","","",132,[[]]],[11,"init","","",132,[[],["usize",15]]],[11,"deref","","",132,[[["usize",15]]]],[11,"deref_mut","","",132,[[["usize",15]]]],[11,"drop","","",132,[[["usize",15]]]],[11,"from","","",183,[[]]],[11,"into","","",183,[[]]],[11,"borrow","","",183,[[]]],[11,"borrow_mut","","",183,[[]]],[11,"try_from","","",183,[[],["result",4]]],[11,"try_into","","",183,[[],["result",4]]],[11,"type_id","","",183,[[],["typeid",3]]],[11,"vzip","","",183,[[]]],[11,"init","","",183,[[],["usize",15]]],[11,"deref","","",183,[[["usize",15]]]],[11,"deref_mut","","",183,[[["usize",15]]]],[11,"drop","","",183,[[["usize",15]]]],[11,"from","","",133,[[]]],[11,"into","","",133,[[]]],[11,"to_owned","","",133,[[]]],[11,"clone_into","","",133,[[]]],[11,"borrow","","",133,[[]]],[11,"borrow_mut","","",133,[[]]],[11,"try_from","","",133,[[],["result",4]]],[11,"try_into","","",133,[[],["result",4]]],[11,"type_id","","",133,[[],["typeid",3]]],[11,"equivalent","","",133,[[],["bool",15]]],[11,"vzip","","",133,[[]]],[11,"init","","",133,[[],["usize",15]]],[11,"deref","","",133,[[["usize",15]]]],[11,"deref_mut","","",133,[[["usize",15]]]],[11,"drop","","",133,[[["usize",15]]]],[11,"from","","",134,[[]]],[11,"into","","",134,[[]]],[11,"to_owned","","",134,[[]]],[11,"clone_into","","",134,[[]]],[11,"borrow","","",134,[[]]],[11,"borrow_mut","","",134,[[]]],[11,"try_from","","",134,[[],["result",4]]],[11,"try_into","","",134,[[],["result",4]]],[11,"type_id","","",134,[[],["typeid",3]]],[11,"vzip","","",134,[[]]],[11,"init","","",134,[[],["usize",15]]],[11,"deref","","",134,[[["usize",15]]]],[11,"deref_mut","","",134,[[["usize",15]]]],[11,"drop","","",134,[[["usize",15]]]],[11,"from","","",135,[[]]],[11,"into","","",135,[[]]],[11,"borrow","","",135,[[]]],[11,"borrow_mut","","",135,[[]]],[11,"try_from","","",135,[[],["result",4]]],[11,"try_into","","",135,[[],["result",4]]],[11,"type_id","","",135,[[],["typeid",3]]],[11,"vzip","","",135,[[]]],[11,"init","","",135,[[],["usize",15]]],[11,"deref","","",135,[[["usize",15]]]],[11,"deref_mut","","",135,[[["usize",15]]]],[11,"drop","","",135,[[["usize",15]]]],[11,"from","","",184,[[]]],[11,"into","","",184,[[]]],[11,"borrow","","",184,[[]]],[11,"borrow_mut","","",184,[[]]],[11,"try_from","","",184,[[],["result",4]]],[11,"try_into","","",184,[[],["result",4]]],[11,"type_id","","",184,[[],["typeid",3]]],[11,"vzip","","",184,[[]]],[11,"init","","",184,[[],["usize",15]]],[11,"deref","","",184,[[["usize",15]]]],[11,"deref_mut","","",184,[[["usize",15]]]],[11,"drop","","",184,[[["usize",15]]]],[11,"from","forest_actor::util","",185,[[]]],[11,"into","","",185,[[]]],[11,"borrow","","",185,[[]]],[11,"borrow_mut","","",185,[[]]],[11,"try_from","","",185,[[],["result",4]]],[11,"try_into","","",185,[[],["result",4]]],[11,"type_id","","",185,[[],["typeid",3]]],[11,"vzip","","",185,[[]]],[11,"init","","",185,[[],["usize",15]]],[11,"deref","","",185,[[["usize",15]]]],[11,"deref_mut","","",185,[[["usize",15]]]],[11,"drop","","",185,[[["usize",15]]]],[11,"from","forest_actor::util::chaos","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"init","","",0,[[],["usize",15]]],[11,"deref","","",0,[[["usize",15]]]],[11,"deref_mut","","",0,[[["usize",15]]]],[11,"drop","","",0,[[["usize",15]]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"init","","",1,[[],["usize",15]]],[11,"deref","","",1,[[["usize",15]]]],[11,"deref_mut","","",1,[[["usize",15]]]],[11,"drop","","",1,[[["usize",15]]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"init","","",2,[[],["usize",15]]],[11,"deref","","",2,[[["usize",15]]]],[11,"deref_mut","","",2,[[["usize",15]]]],[11,"drop","","",2,[[["usize",15]]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"init","","",3,[[],["usize",15]]],[11,"deref","","",3,[[["usize",15]]]],[11,"deref_mut","","",3,[[["usize",15]]]],[11,"drop","","",3,[[["usize",15]]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"init","","",4,[[],["usize",15]]],[11,"deref","","",4,[[["usize",15]]]],[11,"deref_mut","","",4,[[["usize",15]]]],[11,"drop","","",4,[[["usize",15]]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"vzip","","",5,[[]]],[11,"init","","",5,[[],["usize",15]]],[11,"deref","","",5,[[["usize",15]]]],[11,"deref_mut","","",5,[[["usize",15]]]],[11,"drop","","",5,[[["usize",15]]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"vzip","","",6,[[]]],[11,"init","","",6,[[],["usize",15]]],[11,"deref","","",6,[[["usize",15]]]],[11,"deref_mut","","",6,[[["usize",15]]]],[11,"drop","","",6,[[["usize",15]]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"vzip","","",7,[[]]],[11,"init","","",7,[[],["usize",15]]],[11,"deref","","",7,[[["usize",15]]]],[11,"deref_mut","","",7,[[["usize",15]]]],[11,"drop","","",7,[[["usize",15]]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"vzip","","",8,[[]]],[11,"init","","",8,[[],["usize",15]]],[11,"deref","","",8,[[["usize",15]]]],[11,"deref_mut","","",8,[[["usize",15]]]],[11,"drop","","",8,[[["usize",15]]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"vzip","","",9,[[]]],[11,"init","","",9,[[],["usize",15]]],[11,"deref","","",9,[[["usize",15]]]],[11,"deref_mut","","",9,[[["usize",15]]]],[11,"drop","","",9,[[["usize",15]]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"vzip","","",10,[[]]],[11,"init","","",10,[[],["usize",15]]],[11,"deref","","",10,[[["usize",15]]]],[11,"deref_mut","","",10,[[["usize",15]]]],[11,"drop","","",10,[[["usize",15]]]],[11,"from","forest_actor::util","",186,[[]]],[11,"into","","",186,[[]]],[11,"borrow","","",186,[[]]],[11,"borrow_mut","","",186,[[]]],[11,"try_from","","",186,[[],["result",4]]],[11,"try_into","","",186,[[],["result",4]]],[11,"type_id","","",186,[[],["typeid",3]]],[11,"vzip","","",186,[[]]],[11,"init","","",186,[[],["usize",15]]],[11,"deref","","",186,[[["usize",15]]]],[11,"deref_mut","","",186,[[["usize",15]]]],[11,"drop","","",186,[[["usize",15]]]],[11,"from","","",187,[[]]],[11,"into","","",187,[[]]],[11,"borrow","","",187,[[]]],[11,"borrow_mut","","",187,[[]]],[11,"try_from","","",187,[[],["result",4]]],[11,"try_into","","",187,[[],["result",4]]],[11,"type_id","","",187,[[],["typeid",3]]],[11,"vzip","","",187,[[]]],[11,"init","","",187,[[],["usize",15]]],[11,"deref","","",187,[[["usize",15]]]],[11,"deref_mut","","",187,[[["usize",15]]]],[11,"drop","","",187,[[["usize",15]]]],[11,"from","","",188,[[]]],[11,"into","","",188,[[]]],[11,"borrow","","",188,[[]]],[11,"borrow_mut","","",188,[[]]],[11,"try_from","","",188,[[],["result",4]]],[11,"try_into","","",188,[[],["result",4]]],[11,"type_id","","",188,[[],["typeid",3]]],[11,"vzip","","",188,[[]]],[11,"init","","",188,[[],["usize",15]]],[11,"deref","","",188,[[["usize",15]]]],[11,"deref_mut","","",188,[[["usize",15]]]],[11,"drop","","",188,[[["usize",15]]]],[11,"from","forest_actor::util::smooth","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"vzip","","",11,[[]]],[11,"init","","",11,[[],["usize",15]]],[11,"deref","","",11,[[["usize",15]]]],[11,"deref_mut","","",11,[[["usize",15]]]],[11,"drop","","",11,[[["usize",15]]]],[11,"from","","",189,[[]]],[11,"into","","",189,[[]]],[11,"borrow","","",189,[[]]],[11,"borrow_mut","","",189,[[]]],[11,"try_from","","",189,[[],["result",4]]],[11,"try_into","","",189,[[],["result",4]]],[11,"type_id","","",189,[[],["typeid",3]]],[11,"vzip","","",189,[[]]],[11,"init","","",189,[[],["usize",15]]],[11,"deref","","",189,[[["usize",15]]]],[11,"deref_mut","","",189,[[["usize",15]]]],[11,"drop","","",189,[[["usize",15]]]],[11,"from","","",190,[[]]],[11,"into","","",190,[[]]],[11,"borrow","","",190,[[]]],[11,"borrow_mut","","",190,[[]]],[11,"try_from","","",190,[[],["result",4]]],[11,"try_into","","",190,[[],["result",4]]],[11,"type_id","","",190,[[],["typeid",3]]],[11,"vzip","","",190,[[]]],[11,"init","","",190,[[],["usize",15]]],[11,"deref","","",190,[[["usize",15]]]],[11,"deref_mut","","",190,[[["usize",15]]]],[11,"drop","","",190,[[["usize",15]]]],[11,"from","","",191,[[]]],[11,"into","","",191,[[]]],[11,"borrow","","",191,[[]]],[11,"borrow_mut","","",191,[[]]],[11,"try_from","","",191,[[],["result",4]]],[11,"try_into","","",191,[[],["result",4]]],[11,"type_id","","",191,[[],["typeid",3]]],[11,"vzip","","",191,[[]]],[11,"init","","",191,[[],["usize",15]]],[11,"deref","","",191,[[["usize",15]]]],[11,"deref_mut","","",191,[[["usize",15]]]],[11,"drop","","",191,[[["usize",15]]]],[11,"from","","",192,[[]]],[11,"into","","",192,[[]]],[11,"borrow","","",192,[[]]],[11,"borrow_mut","","",192,[[]]],[11,"try_from","","",192,[[],["result",4]]],[11,"try_into","","",192,[[],["result",4]]],[11,"type_id","","",192,[[],["typeid",3]]],[11,"vzip","","",192,[[]]],[11,"init","","",192,[[],["usize",15]]],[11,"deref","","",192,[[["usize",15]]]],[11,"deref_mut","","",192,[[["usize",15]]]],[11,"drop","","",192,[[["usize",15]]]],[11,"from","","",193,[[]]],[11,"into","","",193,[[]]],[11,"borrow","","",193,[[]]],[11,"borrow_mut","","",193,[[]]],[11,"try_from","","",193,[[],["result",4]]],[11,"try_into","","",193,[[],["result",4]]],[11,"type_id","","",193,[[],["typeid",3]]],[11,"vzip","","",193,[[]]],[11,"init","","",193,[[],["usize",15]]],[11,"deref","","",193,[[["usize",15]]]],[11,"deref_mut","","",193,[[["usize",15]]]],[11,"drop","","",193,[[["usize",15]]]],[11,"from","","",194,[[]]],[11,"into","","",194,[[]]],[11,"borrow","","",194,[[]]],[11,"borrow_mut","","",194,[[]]],[11,"try_from","","",194,[[],["result",4]]],[11,"try_into","","",194,[[],["result",4]]],[11,"type_id","","",194,[[],["typeid",3]]],[11,"vzip","","",194,[[]]],[11,"init","","",194,[[],["usize",15]]],[11,"deref","","",194,[[["usize",15]]]],[11,"deref_mut","","",194,[[["usize",15]]]],[11,"drop","","",194,[[["usize",15]]]],[11,"from","","",195,[[]]],[11,"into","","",195,[[]]],[11,"borrow","","",195,[[]]],[11,"borrow_mut","","",195,[[]]],[11,"try_from","","",195,[[],["result",4]]],[11,"try_into","","",195,[[],["result",4]]],[11,"type_id","","",195,[[],["typeid",3]]],[11,"vzip","","",195,[[]]],[11,"init","","",195,[[],["usize",15]]],[11,"deref","","",195,[[["usize",15]]]],[11,"deref_mut","","",195,[[["usize",15]]]],[11,"drop","","",195,[[["usize",15]]]],[11,"from","forest_actor","",196,[[]]],[11,"into","","",196,[[]]],[11,"to_owned","","",196,[[]]],[11,"clone_into","","",196,[[]]],[11,"to_string","","",196,[[],["string",3]]],[11,"borrow","","",196,[[]]],[11,"borrow_mut","","",196,[[]]],[11,"try_from","","",196,[[],["result",4]]],[11,"try_into","","",196,[[],["result",4]]],[11,"type_id","","",196,[[],["typeid",3]]],[11,"vzip","","",196,[[]]],[11,"init","","",196,[[],["usize",15]]],[11,"deref","","",196,[[["usize",15]]]],[11,"deref_mut","","",196,[[["usize",15]]]],[11,"drop","","",196,[[["usize",15]]]],[11,"from","","",136,[[]]],[11,"into","","",136,[[]]],[11,"to_owned","","",136,[[]]],[11,"clone_into","","",136,[[]]],[11,"borrow","","",136,[[]]],[11,"borrow_mut","","",136,[[]]],[11,"try_from","","",136,[[],["result",4]]],[11,"try_into","","",136,[[],["result",4]]],[11,"type_id","","",136,[[],["typeid",3]]],[11,"equivalent","","",136,[[],["bool",15]]],[11,"vzip","","",136,[[]]],[11,"init","","",136,[[],["usize",15]]],[11,"deref","","",136,[[["usize",15]]]],[11,"deref_mut","","",136,[[["usize",15]]]],[11,"drop","","",136,[[["usize",15]]]],[11,"from","","",137,[[]]],[11,"into","","",137,[[]]],[11,"to_owned","","",137,[[]]],[11,"clone_into","","",137,[[]]],[11,"borrow","","",137,[[]]],[11,"borrow_mut","","",137,[[]]],[11,"try_from","","",137,[[],["result",4]]],[11,"try_into","","",137,[[],["result",4]]],[11,"type_id","","",137,[[],["typeid",3]]],[11,"equivalent","","",137,[[],["bool",15]]],[11,"vzip","","",137,[[]]],[11,"init","","",137,[[],["usize",15]]],[11,"deref","","",137,[[["usize",15]]]],[11,"deref_mut","","",137,[[["usize",15]]]],[11,"drop","","",137,[[["usize",15]]]],[11,"from","","",197,[[]]],[11,"into","","",197,[[]]],[11,"to_owned","","",197,[[]]],[11,"clone_into","","",197,[[]]],[11,"borrow","","",197,[[]]],[11,"borrow_mut","","",197,[[]]],[11,"try_from","","",197,[[],["result",4]]],[11,"try_into","","",197,[[],["result",4]]],[11,"type_id","","",197,[[],["typeid",3]]],[11,"equivalent","","",197,[[],["bool",15]]],[11,"get_hash","","",197,[[],["u64",15]]],[11,"vzip","","",197,[[]]],[11,"init","","",197,[[],["usize",15]]],[11,"deref","","",197,[[["usize",15]]]],[11,"deref_mut","","",197,[[["usize",15]]]],[11,"drop","","",197,[[["usize",15]]]],[11,"get_hash","","",197,[[],["u64",15]]],[11,"fmt","","",196,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",197,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",136,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",137,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",196,[[["formatter",3]],[["error",3],["result",4]]]],[11,"deref","","",197,[[]]],[11,"hash","","",197,[[]]],[11,"from_i64","","",137,[[["i64",15]],[["exitcode",4],["option",4]]]],[11,"from_u64","","",137,[[["u64",15]],[["exitcode",4],["option",4]]]],[11,"serialize","","",197,[[],["result",4]]],[11,"serialize","","",136,[[],["result",4]]],[11,"serialize","","",137,[[],["result",4]]],[11,"from","","",196,[[["error",3]],["actorerror",3]]],[11,"from","","",196,[[["error",3]],["actorerror",3]]],[11,"default","","",197,[[],["serialized",3]]],[11,"clone","","",136,[[],["actorstate",3]]],[11,"clone","","",137,[[],["exitcode",4]]],[11,"clone","","",196,[[],["actorerror",3]]],[11,"clone","","",197,[[],["serialized",3]]],[11,"eq","","",196,[[["actorerror",3]],["bool",15]]],[11,"ne","","",196,[[["actorerror",3]],["bool",15]]],[11,"eq","","",137,[[["exitcode",4]],["bool",15]]],[11,"eq","","",197,[[["serialized",3]],["bool",15]]],[11,"ne","","",197,[[["serialized",3]],["bool",15]]],[11,"eq","","",136,[[["actorstate",3]],["bool",15]]],[11,"ne","","",136,[[["actorstate",3]],["bool",15]]],[11,"deserialize","","",136,[[],[["result",4],["actorstate",3]]]],[11,"deserialize","","",197,[[],[["result",4],["serialized",3]]]],[11,"deserialize","","",137,[[],[["exitcode",4],["result",4]]]],[11,"from","forest_actor::paych","",114,[[["signedvoucher",3]]]],[11,"clone","forest_actor::cron","",15,[[],["entry",3]]],[11,"clone","forest_actor::market","",24,[[],["dealproposal",3]]],[11,"clone","","",25,[[],["clientdealproposal",3]]],[11,"clone","","",26,[[],["dealstate",3]]],[11,"clone","forest_actor::miner","",47,[[],["expirationset",3]]],[11,"clone","","",49,[[],["partition",3]]],[11,"clone","","",50,[[],["powerpair",3]]],[11,"clone","","",53,[[],["state",3]]],[11,"clone","","",83,[[],["sectorprecommitinfo",3]]],[11,"clone","","",84,[[],["sectorprecommitonchaininfo",3]]],[11,"clone","","",85,[[],["sectoronchaininfo",3]]],[11,"clone","","",86,[[],["fault",3]]],[11,"clone","","",88,[[],["disputewindowedpostparams",3]]],[11,"clone","forest_actor::multisig","",92,[[],["state",3]]],[11,"clone","","",93,[[],["txnid",3]]],[11,"clone","","",94,[[],["transaction",3]]],[11,"clone","forest_actor::paych","",107,[[],["lanestate",3]]],[11,"clone","","",108,[[],["merge",3]]],[11,"clone","","",111,[[],["signedvoucher",3]]],[11,"clone","","",112,[[],["modverifyparams",3]]],[11,"clone","forest_actor::power","",117,[[],["claim",3]]],[11,"clone","","",118,[[],["cronevent",3]]],[11,"clone","forest_actor::reward","",127,[[],["vestingfunction",4]]],[11,"clone","","",125,[[],["reward",3]]],[11,"clone","","",128,[[],["awardblockrewardparams",3]]],[11,"clone","","",129,[[],["thisepochrewardreturn",3]]],[11,"clone","forest_actor::verifreg","",133,[[],["verifierparams",3]]],[11,"clone","","",134,[[],["bytesparams",3]]],[11,"clone","forest_actor::util::smooth","",11,[[],["filterestimate",3]]],[11,"default","forest_actor::cron","",16,[[],["state",3]]],[11,"default","","",18,[[],["constructorparams",3]]],[11,"default","forest_actor::market","",27,[[],["state",3]]],[11,"default","","",36,[[],["verifydealsforactivationreturn",3]]],[11,"default","","",37,[[],["sectorweights",3]]],[11,"default","forest_actor::miner","",47,[[],["expirationset",3]]],[11,"default","","",50,[[],["powerpair",3]]],[11,"default","","",158,[[],["deadlinesectormap",3]]],[11,"default","","",159,[[],["partitionsectormap",3]]],[11,"default","","",56,[[],["terminationresult",3]]],[11,"default","","",90,[[],["vestingfunds",3]]],[11,"default","forest_actor::multisig","",93,[[],["txnid",3]]],[11,"default","forest_actor::paych","",107,[[],["lanestate",3]]],[11,"default","","",108,[[],["merge",3]]],[11,"default","forest_actor::power","",116,[[],["state",3]]],[11,"default","forest_actor::reward","",126,[[],["state",3]]],[11,"default","forest_actor::system","",181,[[],["state",3]]],[11,"default","forest_actor::util::chaos","",0,[[],["state",3]]],[11,"default","forest_actor::util::smooth","",11,[[],["filterestimate",3]]],[11,"eq","forest_actor::cron","",15,[[["entry",3]],["bool",15]]],[11,"ne","","",15,[[["entry",3]],["bool",15]]],[11,"eq","forest_actor::market","",24,[[["dealproposal",3]],["bool",15]]],[11,"ne","","",24,[[["dealproposal",3]],["bool",15]]],[11,"eq","","",25,[[["clientdealproposal",3]],["bool",15]]],[11,"ne","","",25,[[["clientdealproposal",3]],["bool",15]]],[11,"eq","","",26,[[["dealstate",3]],["bool",15]]],[11,"ne","","",26,[[["dealstate",3]],["bool",15]]],[11,"eq","forest_actor::miner","",50,[[["powerpair",3]],["bool",15]]],[11,"ne","","",50,[[["powerpair",3]],["bool",15]]],[11,"eq","","",55,[[["minerinfo",3]],["bool",15]]],[11,"ne","","",55,[[["minerinfo",3]],["bool",15]]],[11,"eq","","",82,[[["workerkeychange",3]],["bool",15]]],[11,"ne","","",82,[[["workerkeychange",3]],["bool",15]]],[11,"eq","","",83,[[["sectorprecommitinfo",3]],["bool",15]]],[11,"ne","","",83,[[["sectorprecommitinfo",3]],["bool",15]]],[11,"eq","","",84,[[["sectorprecommitonchaininfo",3]],["bool",15]]],[11,"ne","","",84,[[["sectorprecommitonchaininfo",3]],["bool",15]]],[11,"eq","","",85,[[["sectoronchaininfo",3]],["bool",15]]],[11,"ne","","",85,[[["sectoronchaininfo",3]],["bool",15]]],[11,"eq","","",86,[[["fault",3]],["bool",15]]],[11,"ne","","",86,[[["fault",3]],["bool",15]]],[11,"eq","","",88,[[["disputewindowedpostparams",3]],["bool",15]]],[11,"ne","","",88,[[["disputewindowedpostparams",3]],["bool",15]]],[11,"eq","forest_actor::multisig","",94,[[["transaction",3]],["bool",15]]],[11,"ne","","",94,[[["transaction",3]],["bool",15]]],[11,"eq","forest_actor::paych","",107,[[["lanestate",3]],["bool",15]]],[11,"ne","","",107,[[["lanestate",3]],["bool",15]]],[11,"eq","","",108,[[["merge",3]],["bool",15]]],[11,"ne","","",108,[[["merge",3]],["bool",15]]],[11,"eq","","",111,[[["signedvoucher",3]],["bool",15]]],[11,"ne","","",111,[[["signedvoucher",3]],["bool",15]]],[11,"eq","","",112,[[["modverifyparams",3]],["bool",15]]],[11,"ne","","",112,[[["modverifyparams",3]],["bool",15]]],[11,"eq","forest_actor::power","",117,[[["claim",3]],["bool",15]]],[11,"ne","","",117,[[["claim",3]],["bool",15]]],[11,"eq","forest_actor::reward","",127,[[["vestingfunction",4]],["bool",15]]],[11,"eq","","",125,[[["reward",3]],["bool",15]]],[11,"ne","","",125,[[["reward",3]],["bool",15]]],[11,"eq","","",128,[[["awardblockrewardparams",3]],["bool",15]]],[11,"ne","","",128,[[["awardblockrewardparams",3]],["bool",15]]],[11,"eq","","",129,[[["thisepochrewardreturn",3]],["bool",15]]],[11,"ne","","",129,[[["thisepochrewardreturn",3]],["bool",15]]],[11,"eq","forest_actor::verifreg","",133,[[["verifierparams",3]],["bool",15]]],[11,"ne","","",133,[[["verifierparams",3]],["bool",15]]],[11,"eq","","",134,[[["bytesparams",3]],["bool",15]]],[11,"ne","","",134,[[["bytesparams",3]],["bool",15]]],[11,"eq","forest_actor::util","",187,[[],["bool",15]]],[11,"eq","forest_actor::util::smooth","",11,[[["filterestimate",3]],["bool",15]]],[11,"ne","","",11,[[["filterestimate",3]],["bool",15]]],[11,"deref","forest_actor","",139,[[],["cid",3]]],[11,"deref","","",140,[[],["cid",3]]],[11,"deref","","",141,[[],["cid",3]]],[11,"deref","","",142,[[],["cid",3]]],[11,"deref","","",143,[[],["cid",3]]],[11,"deref","","",144,[[],["cid",3]]],[11,"deref","","",145,[[],["cid",3]]],[11,"deref","","",146,[[],["cid",3]]],[11,"deref","","",147,[[],["cid",3]]],[11,"deref","","",148,[[],["cid",3]]],[11,"deref","","",149,[[],["cid",3]]],[11,"deref","","",150,[[],["cid",3]]],[11,"deref","","",151,[[]]],[11,"deref","forest_actor::miner","",156,[[],["bigint",3]]],[11,"deref","","",157,[[],["bigint",3]]],[11,"deref","forest_actor::network","",162,[[],["bigint",3]]],[11,"deref","","",163,[[],["bigint",3]]],[11,"deref","","",164,[[],["bigint",3]]],[11,"deref","forest_actor::reward","",167,[[],["storagepower",6]]],[11,"deref","","",168,[[],["storagepower",6]]],[11,"deref","","",169,[[],["storagepower",6]]],[11,"deref","forest_actor::singletons","",171,[[],["address",3]]],[11,"deref","","",172,[[],["address",3]]],[11,"deref","","",173,[[],["address",3]]],[11,"deref","","",174,[[],["address",3]]],[11,"deref","","",175,[[],["address",3]]],[11,"deref","","",176,[[],["address",3]]],[11,"deref","","",177,[[],["address",3]]],[11,"deref","","",178,[[],["address",3]]],[11,"deref","","",179,[[],["address",3]]],[11,"deref","","",180,[[],["address",3]]],[11,"deref","forest_actor::verifreg","",183,[[],["storagepower",6]]],[11,"deref","forest_actor::util::smooth","",190,[[],["vec",3]]],[11,"deref","","",191,[[],["vec",3]]],[11,"deref","","",192,[[],["bigint",3]]],[11,"deref","","",193,[[],["bigint",3]]],[11,"deref","","",194,[[],["bigint",3]]],[11,"deref","","",195,[[],["bigint",3]]],[11,"fmt","forest_actor::cron","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",18,[[["formatter",3]],["result",6]]],[11,"fmt","forest_actor::market","",24,[[["formatter",3]],["result",6]]],[11,"fmt","","",25,[[["formatter",3]],["result",6]]],[11,"fmt","","",26,[[["formatter",3]],["result",6]]],[11,"fmt","forest_actor::miner","",47,[[["formatter",3]],["result",6]]],[11,"fmt","","",50,[[["formatter",3]],["result",6]]],[11,"fmt","","",55,[[["formatter",3]],["result",6]]],[11,"fmt","","",59,[[["formatter",3]],["result",6]]],[11,"fmt","","",82,[[["formatter",3]],["result",6]]],[11,"fmt","","",83,[[["formatter",3]],["result",6]]],[11,"fmt","","",84,[[["formatter",3]],["result",6]]],[11,"fmt","","",85,[[["formatter",3]],["result",6]]],[11,"fmt","","",86,[[["formatter",3]],["result",6]]],[11,"fmt","","",87,[[["formatter",3]],["result",6]]],[11,"fmt","","",88,[[["formatter",3]],["result",6]]],[11,"fmt","forest_actor::multisig","",93,[[["formatter",3]],["result",6]]],[11,"fmt","","",94,[[["formatter",3]],["result",6]]],[11,"fmt","","",95,[[["formatter",3]],["result",6]]],[11,"fmt","forest_actor::paych","",109,[[["formatter",3]],["result",6]]],[11,"fmt","","",107,[[["formatter",3]],["result",6]]],[11,"fmt","","",108,[[["formatter",3]],["result",6]]],[11,"fmt","","",111,[[["formatter",3]],["result",6]]],[11,"fmt","","",112,[[["formatter",3]],["result",6]]],[11,"fmt","forest_actor::power","",117,[[["formatter",3]],["result",6]]],[11,"fmt","","",118,[[["formatter",3]],["result",6]]],[11,"fmt","forest_actor::reward","",127,[[["formatter",3]],["result",6]]],[11,"fmt","","",125,[[["formatter",3]],["result",6]]],[11,"fmt","","",128,[[["formatter",3]],["result",6]]],[11,"fmt","","",129,[[["formatter",3]],["result",6]]],[11,"fmt","forest_actor::verifreg","",133,[[["formatter",3]],["result",6]]],[11,"fmt","","",134,[[["formatter",3]],["result",6]]],[11,"fmt","forest_actor::util","",187,[[["formatter",3]],["result",6]]],[11,"fmt","forest_actor::util::smooth","",11,[[["formatter",3]],["result",6]]],[11,"neg","forest_actor::miner","",50,[[]]],[11,"add_assign","","",50,[[]]],[11,"add_assign","","",56,[[]]],[11,"sub_assign","","",50,[[]]],[11,"initialize","forest_actor","",139,[[]]],[11,"initialize","","",140,[[]]],[11,"initialize","","",141,[[]]],[11,"initialize","","",142,[[]]],[11,"initialize","","",143,[[]]],[11,"initialize","","",144,[[]]],[11,"initialize","","",145,[[]]],[11,"initialize","","",146,[[]]],[11,"initialize","","",147,[[]]],[11,"initialize","","",148,[[]]],[11,"initialize","","",149,[[]]],[11,"initialize","","",150,[[]]],[11,"initialize","","",151,[[]]],[11,"initialize","forest_actor::miner","",156,[[]]],[11,"initialize","","",157,[[]]],[11,"initialize","forest_actor::network","",162,[[]]],[11,"initialize","","",163,[[]]],[11,"initialize","","",164,[[]]],[11,"initialize","forest_actor::reward","",167,[[]]],[11,"initialize","","",168,[[]]],[11,"initialize","","",169,[[]]],[11,"initialize","forest_actor::singletons","",171,[[]]],[11,"initialize","","",172,[[]]],[11,"initialize","","",173,[[]]],[11,"initialize","","",174,[[]]],[11,"initialize","","",175,[[]]],[11,"initialize","","",176,[[]]],[11,"initialize","","",177,[[]]],[11,"initialize","","",178,[[]]],[11,"initialize","","",179,[[]]],[11,"initialize","","",180,[[]]],[11,"initialize","forest_actor::verifreg","",183,[[]]],[11,"initialize","forest_actor::util::smooth","",190,[[]]],[11,"initialize","","",191,[[]]],[11,"initialize","","",192,[[]]],[11,"initialize","","",193,[[]]],[11,"initialize","","",194,[[]]],[11,"initialize","","",195,[[]]],[11,"serialize","forest_actor::account","",13,[[],["result",4]]],[11,"serialize","forest_actor::cron","",16,[[],["result",4]]],[11,"serialize","","",15,[[],["result",4]]],[11,"serialize","","",18,[[],["result",4]]],[11,"serialize","forest_actor::init","",19,[[],["result",4]]],[11,"serialize","","",20,[[],["result",4]]],[11,"serialize","","",21,[[],["result",4]]],[11,"serialize","","",22,[[],["result",4]]],[11,"serialize","forest_actor::market","",24,[[],["result",4]]],[11,"serialize","","",25,[[],["result",4]]],[11,"serialize","","",26,[[],["result",4]]],[11,"serialize","","",27,[[],["result",4]]],[11,"serialize","","",28,[[],["result",4]]],[11,"serialize","","",29,[[],["result",4]]],[11,"serialize","","",30,[[],["result",4]]],[11,"serialize","","",31,[[],["result",4]]],[11,"serialize","","",32,[[],["result",4]]],[11,"serialize","","",33,[[],["result",4]]],[11,"serialize","","",34,[[],["result",4]]],[11,"serialize","","",35,[[],["result",4]]],[11,"serialize","","",36,[[],["result",4]]],[11,"serialize","","",37,[[],["result",4]]],[11,"serialize","","",38,[[],["result",4]]],[11,"serialize","","",39,[[],["result",4]]],[11,"serialize","","",40,[[],["result",4]]],[11,"serialize","forest_actor::miner","",43,[[],["result",4]]],[11,"serialize","","",44,[[],["result",4]]],[11,"serialize","","",155,[[],["result",4]]],[11,"serialize","","",45,[[],["result",4]]],[11,"serialize","","",47,[[],["result",4]]],[11,"serialize","","",49,[[],["result",4]]],[11,"serialize","","",50,[[],["result",4]]],[11,"serialize","","",159,[[],["result",4]]],[11,"serialize","","",53,[[],["result",4]]],[11,"serialize","","",55,[[],["result",4]]],[11,"serialize","","",57,[[],["result",4]]],[11,"serialize","","",58,[[],["result",4]]],[11,"serialize","","",60,[[],["result",4]]],[11,"serialize","","",61,[[],["result",4]]],[11,"serialize","","",62,[[],["result",4]]],[11,"serialize","","",63,[[],["result",4]]],[11,"serialize","","",64,[[],["result",4]]],[11,"serialize","","",65,[[],["result",4]]],[11,"serialize","","",66,[[],["result",4]]],[11,"serialize","","",67,[[],["result",4]]],[11,"serialize","","",68,[[],["result",4]]],[11,"serialize","","",69,[[],["result",4]]],[11,"serialize","","",70,[[],["result",4]]],[11,"serialize","","",71,[[],["result",4]]],[11,"serialize","","",72,[[],["result",4]]],[11,"serialize","","",73,[[],["result",4]]],[11,"serialize","","",74,[[],["result",4]]],[11,"serialize","","",75,[[],["result",4]]],[11,"serialize","","",76,[[],["result",4]]],[11,"serialize","","",77,[[],["result",4]]],[11,"serialize","","",78,[[],["result",4]]],[11,"serialize","","",79,[[],["result",4]]],[11,"serialize","","",80,[[],["result",4]]],[11,"serialize","","",81,[[],["result",4]]],[11,"serialize","","",82,[[],["result",4]]],[11,"serialize","","",83,[[],["result",4]]],[11,"serialize","","",84,[[],["result",4]]],[11,"serialize","","",85,[[],["result",4]]],[11,"serialize","","",86,[[],["result",4]]],[11,"serialize","","",87,[[],["result",4]]],[11,"serialize","","",88,[[],["result",4]]],[11,"serialize","","",89,[[],["result",4]]],[11,"serialize","","",90,[[],["result",4]]],[11,"serialize","forest_actor::multisig","",92,[[],["result",4]]],[11,"serialize","","",93,[[],["result",4]]],[11,"serialize","","",94,[[],["result",4]]],[11,"serialize","","",95,[[],["result",4]]],[11,"serialize","","",96,[[],["result",4]]],[11,"serialize","","",97,[[],["result",4]]],[11,"serialize","","",98,[[],["result",4]]],[11,"serialize","","",99,[[],["result",4]]],[11,"serialize","","",100,[[],["result",4]]],[11,"serialize","","",101,[[],["result",4]]],[11,"serialize","","",102,[[],["result",4]]],[11,"serialize","","",103,[[],["result",4]]],[11,"serialize","","",104,[[],["result",4]]],[11,"serialize","","",105,[[],["result",4]]],[11,"serialize","forest_actor::paych","",109,[[],["result",4]]],[11,"serialize","","",107,[[],["result",4]]],[11,"serialize","","",108,[[],["result",4]]],[11,"serialize","","",110,[[],["result",4]]],[11,"serialize","","",111,[[],["result",4]]],[11,"serialize","","",112,[[],["result",4]]],[11,"serialize","","",113,[[],["result",4]]],[11,"serialize","","",114,[[],["result",4]]],[11,"serialize","forest_actor::power","",116,[[],["result",4]]],[11,"serialize","","",117,[[],["result",4]]],[11,"serialize","","",118,[[],["result",4]]],[11,"serialize","","",119,[[],["result",4]]],[11,"serialize","","",120,[[],["result",4]]],[11,"serialize","","",121,[[],["result",4]]],[11,"serialize","","",122,[[],["result",4]]],[11,"serialize","","",123,[[],["result",4]]],[11,"serialize","forest_actor::reward","",126,[[],["result",4]]],[11,"serialize","","",127,[[],["result",4]]],[11,"serialize","","",125,[[],["result",4]]],[11,"serialize","","",128,[[],["result",4]]],[11,"serialize","","",129,[[],["result",4]]],[11,"serialize","forest_actor::system","",181,[[],["result",4]]],[11,"serialize","forest_actor::verifreg","",132,[[],["result",4]]],[11,"serialize","","",133,[[],["result",4]]],[11,"serialize","","",134,[[],["result",4]]],[11,"serialize","forest_actor::util::chaos","",0,[[],["result",4]]],[11,"serialize","","",1,[[],["result",4]]],[11,"serialize","","",2,[[],["result",4]]],[11,"serialize","","",3,[[],["result",4]]],[11,"serialize","","",4,[[],["result",4]]],[11,"serialize","","",5,[[],["result",4]]],[11,"serialize","","",6,[[],["result",4]]],[11,"serialize","","",7,[[],["result",4]]],[11,"serialize","","",8,[[],["result",4]]],[11,"serialize","forest_actor::util::smooth","",11,[[],["result",4]]],[11,"deserialize","forest_actor::account","",13,[[],["result",4]]],[11,"deserialize","forest_actor::cron","",16,[[],["result",4]]],[11,"deserialize","","",15,[[],["result",4]]],[11,"deserialize","","",18,[[],["result",4]]],[11,"deserialize","forest_actor::init","",19,[[],["result",4]]],[11,"deserialize","","",20,[[],["result",4]]],[11,"deserialize","","",21,[[],["result",4]]],[11,"deserialize","","",22,[[],["result",4]]],[11,"deserialize","forest_actor::market","",24,[[],["result",4]]],[11,"deserialize","","",25,[[],["result",4]]],[11,"deserialize","","",26,[[],["result",4]]],[11,"deserialize","","",27,[[],["result",4]]],[11,"deserialize","","",28,[[],["result",4]]],[11,"deserialize","","",29,[[],["result",4]]],[11,"deserialize","","",31,[[],["result",4]]],[11,"deserialize","","",32,[[],["result",4]]],[11,"deserialize","","",33,[[],["result",4]]],[11,"deserialize","","",34,[[],["result",4]]],[11,"deserialize","","",36,[[],["result",4]]],[11,"deserialize","","",37,[[],["result",4]]],[11,"deserialize","","",38,[[],["result",4]]],[11,"deserialize","","",39,[[],["result",4]]],[11,"deserialize","forest_actor::miner","",43,[[],["result",4]]],[11,"deserialize","","",44,[[],["result",4]]],[11,"deserialize","","",155,[[],["result",4]]],[11,"deserialize","","",45,[[],["result",4]]],[11,"deserialize","","",47,[[],["result",4]]],[11,"deserialize","","",49,[[],["result",4]]],[11,"deserialize","","",50,[[],["result",4]]],[11,"deserialize","","",159,[[],["result",4]]],[11,"deserialize","","",53,[[],["result",4]]],[11,"deserialize","","",55,[[],["result",4]]],[11,"deserialize","","",57,[[],["result",4]]],[11,"deserialize","","",58,[[],["result",4]]],[11,"deserialize","","",60,[[],["result",4]]],[11,"deserialize","","",61,[[],["result",4]]],[11,"deserialize","","",62,[[],["result",4]]],[11,"deserialize","","",63,[[],["result",4]]],[11,"deserialize","","",64,[[],["result",4]]],[11,"deserialize","","",65,[[],["result",4]]],[11,"deserialize","","",66,[[],["result",4]]],[11,"deserialize","","",67,[[],["result",4]]],[11,"deserialize","","",68,[[],["result",4]]],[11,"deserialize","","",69,[[],["result",4]]],[11,"deserialize","","",70,[[],["result",4]]],[11,"deserialize","","",71,[[],["result",4]]],[11,"deserialize","","",72,[[],["result",4]]],[11,"deserialize","","",73,[[],["result",4]]],[11,"deserialize","","",74,[[],["result",4]]],[11,"deserialize","","",75,[[],["result",4]]],[11,"deserialize","","",76,[[],["result",4]]],[11,"deserialize","","",77,[[],["result",4]]],[11,"deserialize","","",78,[[],["result",4]]],[11,"deserialize","","",79,[[],["result",4]]],[11,"deserialize","","",80,[[],["result",4]]],[11,"deserialize","","",81,[[],["result",4]]],[11,"deserialize","","",82,[[],["result",4]]],[11,"deserialize","","",83,[[],["result",4]]],[11,"deserialize","","",84,[[],["result",4]]],[11,"deserialize","","",85,[[],["result",4]]],[11,"deserialize","","",86,[[],["result",4]]],[11,"deserialize","","",87,[[],["result",4]]],[11,"deserialize","","",88,[[],["result",4]]],[11,"deserialize","","",89,[[],["result",4]]],[11,"deserialize","","",90,[[],["result",4]]],[11,"deserialize","forest_actor::multisig","",92,[[],["result",4]]],[11,"deserialize","","",93,[[],["result",4]]],[11,"deserialize","","",94,[[],["result",4]]],[11,"deserialize","","",96,[[],["result",4]]],[11,"deserialize","","",97,[[],["result",4]]],[11,"deserialize","","",98,[[],["result",4]]],[11,"deserialize","","",99,[[],["result",4]]],[11,"deserialize","","",100,[[],["result",4]]],[11,"deserialize","","",101,[[],["result",4]]],[11,"deserialize","","",102,[[],["result",4]]],[11,"deserialize","","",103,[[],["result",4]]],[11,"deserialize","","",104,[[],["result",4]]],[11,"deserialize","","",105,[[],["result",4]]],[11,"deserialize","forest_actor::paych","",109,[[],["result",4]]],[11,"deserialize","","",107,[[],["result",4]]],[11,"deserialize","","",108,[[],["result",4]]],[11,"deserialize","","",110,[[],["result",4]]],[11,"deserialize","","",111,[[],["result",4]]],[11,"deserialize","","",112,[[],["result",4]]],[11,"deserialize","","",113,[[],["result",4]]],[11,"deserialize","","",114,[[],["result",4]]],[11,"deserialize","forest_actor::power","",116,[[],["result",4]]],[11,"deserialize","","",117,[[],["result",4]]],[11,"deserialize","","",118,[[],["result",4]]],[11,"deserialize","","",119,[[],["result",4]]],[11,"deserialize","","",120,[[],["result",4]]],[11,"deserialize","","",121,[[],["result",4]]],[11,"deserialize","","",122,[[],["result",4]]],[11,"deserialize","","",123,[[],["result",4]]],[11,"deserialize","forest_actor::reward","",126,[[],["result",4]]],[11,"deserialize","","",127,[[],["result",4]]],[11,"deserialize","","",125,[[],["result",4]]],[11,"deserialize","","",128,[[],["result",4]]],[11,"deserialize","","",129,[[],["result",4]]],[11,"deserialize","forest_actor::system","",181,[[],["result",4]]],[11,"deserialize","forest_actor::verifreg","",132,[[],["result",4]]],[11,"deserialize","","",133,[[],["result",4]]],[11,"deserialize","","",134,[[],["result",4]]],[11,"deserialize","forest_actor::util::chaos","",0,[[],["result",4]]],[11,"deserialize","","",1,[[],["result",4]]],[11,"deserialize","","",2,[[],["result",4]]],[11,"deserialize","","",3,[[],["result",4]]],[11,"deserialize","","",4,[[],["result",4]]],[11,"deserialize","","",5,[[],["result",4]]],[11,"deserialize","","",6,[[],["result",4]]],[11,"deserialize","","",7,[[],["result",4]]],[11,"deserialize","","",8,[[],["result",4]]],[11,"deserialize","forest_actor::util::smooth","",11,[[],["result",4]]],[11,"from_i64","forest_actor::account","",14,[[["i64",15]],["option",4]]],[11,"from_u64","","",14,[[["u64",15]],["option",4]]],[11,"from_i64","forest_actor::cron","",17,[[["i64",15]],["option",4]]],[11,"from_u64","","",17,[[["u64",15]],["option",4]]],[11,"from_i64","forest_actor::init","",23,[[["i64",15]],["option",4]]],[11,"from_u64","","",23,[[["u64",15]],["option",4]]],[11,"from_i64","forest_actor::market","",41,[[["i64",15]],["option",4]]],[11,"from_u64","","",41,[[["u64",15]],["option",4]]],[11,"from_i64","forest_actor::miner","",91,[[["i64",15]],["option",4]]],[11,"from_u64","","",91,[[["u64",15]],["option",4]]],[11,"from_i64","forest_actor::multisig","",106,[[["i64",15]],["option",4]]],[11,"from_u64","","",106,[[["u64",15]],["option",4]]],[11,"from_i64","forest_actor::paych","",115,[[["i64",15]],["option",4]]],[11,"from_u64","","",115,[[["u64",15]],["option",4]]],[11,"from_i64","forest_actor::power","",124,[[["i64",15]],["option",4]]],[11,"from_u64","","",124,[[["u64",15]],["option",4]]],[11,"from_i64","forest_actor::reward","",127,[[["i64",15]],["option",4]]],[11,"from_u64","","",127,[[["u64",15]],["option",4]]],[11,"from_i64","","",130,[[["i64",15]],["option",4]]],[11,"from_u64","","",130,[[["u64",15]],["option",4]]],[11,"from_i64","forest_actor::system","",131,[[["i64",15]],["option",4]]],[11,"from_u64","","",131,[[["u64",15]],["option",4]]],[11,"from_i64","forest_actor::verifreg","",135,[[["i64",15]],["option",4]]],[11,"from_u64","","",135,[[["u64",15]],["option",4]]],[11,"from_i64","forest_actor::util::chaos","",9,[[["i64",15]],["option",4]]],[11,"from_u64","","",9,[[["u64",15]],["option",4]]],[11,"invoke_method","forest_actor::account","",138,[[["serialized",3],["methodnum",6]],[["actorerror",3],["serialized",3],["result",4]]]],[11,"invoke_method","forest_actor::cron","",152,[[["serialized",3],["methodnum",6]],[["actorerror",3],["serialized",3],["result",4]]]],[11,"invoke_method","forest_actor::init","",153,[[["serialized",3],["methodnum",6]],[["actorerror",3],["serialized",3],["result",4]]]],[11,"invoke_method","forest_actor::market","",154,[[["serialized",3],["methodnum",6]],[["actorerror",3],["serialized",3],["result",4]]]],[11,"invoke_method","forest_actor::miner","",160,[[["serialized",3],["methodnum",6]],[["actorerror",3],["serialized",3],["result",4]]]],[11,"invoke_method","forest_actor::multisig","",161,[[["serialized",3],["methodnum",6]],[["actorerror",3],["serialized",3],["result",4]]]],[11,"invoke_method","forest_actor::paych","",165,[[["serialized",3],["methodnum",6]],[["actorerror",3],["serialized",3],["result",4]]]],[11,"invoke_method","forest_actor::power","",166,[[["serialized",3],["methodnum",6]],[["actorerror",3],["serialized",3],["result",4]]]],[11,"invoke_method","forest_actor::reward","",170,[[["serialized",3],["methodnum",6]],[["actorerror",3],["serialized",3],["result",4]]]],[11,"invoke_method","forest_actor::system","",182,[[["serialized",3],["methodnum",6]],[["actorerror",3],["serialized",3],["result",4]]]],[11,"invoke_method","forest_actor::verifreg","",184,[[["serialized",3],["methodnum",6]],[["actorerror",3],["serialized",3],["result",4]]]],[11,"invoke_method","forest_actor::util::chaos","",10,[[["serialized",3],["methodnum",6]],[["actorerror",3],["serialized",3],["result",4]]]],[11,"constructor","forest_actor::account","Constructor for Account actor",138,[[["address",3]],[["actorerror",3],["result",4]]]],[11,"pubkey_address","","",138,[[],[["result",4],["actorerror",3],["address",3]]]],[11,"new","forest_actor::init","",19,[[["string",3]],[["box",3],["result",4]]]],[11,"map_address_to_new_id","","Allocates a new ID address and stores a mapping of the …",19,[[["address",3]],[["address",3],["hamterror",4],["result",4]]]],[11,"resolve_address","","ResolveAddress resolves an address to an ID-address, if …",19,[[["address",3]],[["result",4],["box",3],["option",4]]]],[11,"constructor","","Init actor constructor",153,[[["constructorparams",3]],[["actorerror",3],["result",4]]]],[11,"exec","","Exec init actor",153,[[["execparams",3]],[["actorerror",3],["result",4],["execreturn",3]]]],[11,"duration","forest_actor::market","",24,[[],["chainepoch",6]]],[11,"weight","","Computes weight for a deal proposal, which is a function …",24,[[],["dealweight",6]]],[11,"total_storage_fee","","",24,[[],["tokenamount",6]]],[11,"client_balance_requirement","","",24,[[],["tokenamount",6]]],[11,"provider_balance_requirement","","",24,[[],["tokenamount",6]]],[11,"new","","",27,[[],[["box",3],["result",4]]]],[11,"total_locked","","",27,[[],["tokenamount",6]]],[11,"constructor","","",154,[[],[["actorerror",3],["result",4]]]],[11,"new","forest_actor::miner","",42,[[["cid",3],["quantspec",3]],[["result",4],["amterror",4]]]],[11,"add_to_queue","","Adds values to the queue entry for an epoch.",42,[[["bitfield",3],["chainepoch",6]],[["result",4],["box",3]]]],[11,"add_to_queue_values","","",42,[[["chainepoch",6]],[["result",4],["box",3]]]],[11,"cut","","Cut cuts the elements from the bits in the given bitfield …",42,[[["bitfield",3]],[["result",4],["box",3]]]],[11,"add_many_to_queue_values","","",42,[[["hashmap",3]],[["result",4],["box",3]]]],[11,"pop_until","","Removes and returns all values with keys less than or …",42,[[["chainepoch",6]],[["result",4],["box",3]]]],[11,"new","","",43,[[["cid",3]]]],[11,"load_deadline","","",43,[[["usize",15]],[["box",3],["result",4],["deadline",3]]]],[11,"for_each","","",43,[[],[["result",4],["box",3]]]],[11,"update_deadline","","",43,[[["usize",15],["deadline",3]],[["result",4],["box",3]]]],[11,"new","","",44,[[],[["box",3],["result",4]]]],[11,"partitions_amt","","",44,[[],[["amt",3],["box",3],["result",4]]]],[11,"optimistic_proofs_amt","","",44,[[],[["amt",3],["box",3],["result",4]]]],[11,"partitions_snapshot_amt","","",44,[[],[["amt",3],["box",3],["result",4]]]],[11,"optimistic_proofs_snapshot_amt","","",44,[[],[["amt",3],["box",3],["result",4]]]],[11,"load_partition","","",44,[[["usize",15]],[["box",3],["result",4],["partition",3]]]],[11,"load_partition_snapshot","","",44,[[["usize",15]],[["box",3],["result",4],["partition",3]]]],[11,"add_expiration_partitions","","Adds some partition numbers to the set expiring at an …",44,[[["chainepoch",6],["quantspec",3]],[["result",4],["box",3]]]],[11,"pop_expired_sectors","","PopExpiredSectors terminates expired sectors from all …",44,[[["chainepoch",6],["quantspec",3]],[["expirationset",3],["box",3],["result",4]]]],[11,"add_sectors","","Adds sectors to a deadline. It\'s the caller\'s …",44,[[["quantspec",3],["sectorsize",4],["u64",15],["bool",15]],[["result",4],["powerpair",3],["box",3]]]],[11,"pop_early_terminations","","",44,[[["u64",15]],[["box",3],["result",4]]]],[11,"pop_expired_partitions","","",44,[[["chainepoch",6],["quantspec",3]],[["result",4],["box",3]]]],[11,"terminate_sectors","","",44,[[["quantspec",3],["sectorsize",4],["sectors",3],["chainepoch",6],["partitionsectormap",3]],[["result",4],["powerpair",3],["box",3]]]],[11,"remove_partitions","","RemovePartitions removes the specified partitions, …",44,[[["bitfield",3],["quantspec",3]],[["result",4],["box",3]]]],[11,"record_faults","","",44,[[["quantspec",3],["sectorsize",4],["sectors",3],["chainepoch",6],["partitionsectormap",3]],[["result",4],["powerpair",3],["box",3]]]],[11,"declare_faults_recovered","","",44,[[["sectors",3],["partitionsectormap",3],["sectorsize",4]],[["result",4],["box",3]]]],[11,"process_deadline_end","","Processes all PoSt submissions, marking unproven sectors …",44,[[["quantspec",3],["chainepoch",6]],[["actorerror",3],["result",4]]]],[11,"for_each","","",44,[[],[["result",4],["box",3]]]],[11,"validate_state","","",44,[[],[["result",4],["str",15]]]],[11,"load_partitions_for_dispute","","",44,[[["bitfield",3]],[["disputeinfo",3],["box",3],["result",4]]]],[11,"is_live","","",44,[[],["bool",15]]],[11,"record_proven_sectors","","Processes a series of posts, recording proven partitions …",44,[[["quantspec",3],["sectorsize",4],["sectors",3],["chainepoch",6]],[["postresult",3],["box",3],["result",4]]]],[11,"record_post_proofs","","",44,[[["bitfield",3]],[["result",4],["box",3]]]],[11,"take_post_proofs","","",44,[[["u64",15]],[["box",3],["result",4]]]],[11,"reschedule_sector_expirations","","RescheduleSectorExpirations reschedules the expirations …",44,[[["quantspec",3],["sectorsize",4],["sectors",3],["chainepoch",6],["partitionsectormap",3]],[["box",3],["result",4],["vec",3]]]],[11,"find_sector","","Returns the deadline and partition index for a sector …",43,[[["sectornumber",6]],[["box",3],["result",4]]]],[11,"empty","","",47,[[]]],[11,"add","","Adds sectors and power to the expiration set in place.",47,[[["powerpair",3],["bitfield",3],["tokenamount",6]]]],[11,"remove","","Removes sectors and power from the expiration set in …",47,[[["powerpair",3],["bitfield",3],["tokenamount",6]],[["result",4],["box",3]]]],[11,"is_empty","","A set is empty if it has no sectors. The power and pledge …",47,[[],["bool",15]]],[11,"len","","Counts all sectors in the expiration set.",47,[[],["usize",15]]],[11,"validate_state","","validates a set of assertions that must hold for …",47,[[],[["result",4],["str",15]]]],[11,"new","","Loads a queue root.",48,[[["cid",3],["quantspec",3]],[["result",4],["amterror",4]]]],[11,"add_active_sectors","","Adds a collection of sectors to their on-time target …",48,[[["sectorsize",4]],[["result",4],["box",3]]]],[11,"reschedule_expirations","","Reschedules some sectors to a new (quantized) expiration …",48,[[["chainepoch",6],["sectorsize",4]],[["result",4],["box",3]]]],[11,"reschedule_as_faults","","Re-schedules sectors to expire at an early expiration …",48,[[["chainepoch",6],["sectorsize",4]],[["result",4],["powerpair",3],["box",3]]]],[11,"reschedule_all_as_faults","","Re-schedules <em>all</em> sectors to expire at an early expiration …",48,[[["chainepoch",6]],[["result",4],["box",3]]]],[11,"reschedule_recovered","","Removes sectors from any queue entries in which they …",48,[[["sectoronchaininfo",3],["sectorsize",4],["vec",3]],[["result",4],["powerpair",3],["box",3]]]],[11,"replace_sectors","","Removes some sectors and adds some others. The sectors …",48,[[["sectorsize",4]],[["box",3],["result",4]]]],[11,"remove_sectors","","Remove some sectors from the queue. The sectors may be …",48,[[["bitfield",3],["sectorsize",4]],[["box",3],["result",4]]]],[11,"pop_until","","Removes and aggregates entries from the queue up to and …",48,[[["chainepoch",6]],[["expirationset",3],["box",3],["result",4]]]],[11,"new","","",49,[[],[["box",3],["result",4]]]],[11,"live_sectors","","Live sectors are those that are not terminated (but may …",49,[[],["bitfield",3]]],[11,"active_sectors","","Active sectors are those that are neither terminated nor …",49,[[],["bitfield",3]]],[11,"active_power","","Active power is power of non-faulty sectors.",49,[[],["powerpair",3]]],[11,"add_sectors","","AddSectors adds new sectors to the partition. The sectors …",49,[[["bool",15],["quantspec",3],["sectorsize",4]],[["result",4],["powerpair",3],["box",3]]]],[11,"add_faults","","marks a set of sectors faulty",49,[[["quantspec",3],["sectorsize",4],["bitfield",3],["chainepoch",6]],[["result",4],["box",3]]]],[11,"record_faults","","Declares a set of sectors faulty. Already faulty sectors …",49,[[["quantspec",3],["sectorsize",4],["sectors",3],["chainepoch",6],["unvalidatedbitfield",4]],[["result",4],["box",3]]]],[11,"recover_faults","","Removes sector numbers from faults and thus from …",49,[[["sectors",3],["quantspec",3],["sectorsize",4]],[["result",4],["powerpair",3],["box",3]]]],[11,"activate_unproven","","Activates unproven sectors, returning the activated power.",49,[[],["powerpair",3]]],[11,"declare_faults_recovered","","Declares sectors as recovering. Non-faulty and already …",49,[[["sectors",3],["sectorsize",4],["unvalidatedbitfield",4]],[["result",4],["box",3]]]],[11,"remove_recoveries","","Removes sectors from recoveries and recovering power. …",49,[[["bitfield",3],["powerpair",3]]]],[11,"reschedule_expirations","","RescheduleExpirations moves expiring sectors to the …",49,[[["quantspec",3],["sectorsize",4],["sectors",3],["chainepoch",6],["unvalidatedbitfield",4]],[["box",3],["result",4],["vec",3]]]],[11,"replace_sectors","","Replaces a number of \\\"old\\\" sectors with new ones. The old …",49,[[["quantspec",3],["sectorsize",4]],[["box",3],["result",4]]]],[11,"record_early_termination","","Record the epoch of any sectors expiring early, for …",49,[[["bitfield",3],["chainepoch",6]],[["result",4],["box",3]]]],[11,"terminate_sectors","","Marks a collection of sectors as terminated. The sectors …",49,[[["quantspec",3],["sectorsize",4],["sectors",3],["chainepoch",6],["unvalidatedbitfield",4]],[["expirationset",3],["box",3],["result",4]]]],[11,"pop_expired_sectors","","PopExpiredSectors traverses the expiration queue up to …",49,[[["chainepoch",6],["quantspec",3]],[["expirationset",3],["box",3],["result",4]]]],[11,"record_missed_post","","Marks all non-faulty sectors in the partition as faulty …",49,[[["chainepoch",6],["quantspec",3]],[["box",3],["result",4]]]],[11,"pop_early_terminations","","",49,[[["u64",15]],[["box",3],["result",4]]]],[11,"record_skipped_faults","","Discovers how skipped faults declared during post …",49,[[["quantspec",3],["sectorsize",4],["sectors",3],["chainepoch",6],["unvalidatedbitfield",4]],[["result",4],["box",3]]]],[11,"validate_power_state","","Test invariants about the partition power are valid.",49,[[],[["result",4],["str",15]]]],[11,"validate_bf_state","","",49,[[],[["result",4],["str",15]]]],[11,"validate_state","","",49,[[],[["string",3],["result",4]]]],[11,"zero","","",50,[[]]],[11,"is_zero","","",50,[[],["bool",15]]],[11,"new","","",158,[[]]],[11,"check","","Check validates all bitfields and counts the number of …",158,[[["u64",15]],[["string",3],["result",4]]]],[11,"count","","Counts the number of partitions & sectors within the map.",158,[[],[["string",3],["result",4]]]],[11,"add","","Records the given sector bitfield at the given …",158,[[["usize",15],["unvalidatedbitfield",4]],[["string",3],["result",4]]]],[11,"add_values","","Records the given sectors at the given deadline/partition …",158,[[["usize",15]],[["string",3],["result",4]]]],[11,"deadlines","","Returns a sorted vec of deadlines in the map.",158,[[],[["usize",15],["vec",3]]]],[11,"iter","","Walks the deadlines in deadline order.",158,[[]]],[11,"add_values","","Records the given sectors at the given partition.",159,[[["usize",15],["vec",3],["u64",15]],[["string",3],["result",4]]]],[11,"add","","Records the given sector bitfield at the given partition …",159,[[["usize",15],["unvalidatedbitfield",4]],[["string",3],["result",4]]]],[11,"count","","Counts the number of partitions & sectors within the map.",159,[[],[["string",3],["result",4]]]],[11,"partitions","","Returns a sorted vec of partitions in the map.",159,[[],[["usize",15],["vec",3]]]],[11,"iter","","Walks the partitions in the map, in order of increasing …",159,[[]]],[11,"len","","",159,[[],["usize",15]]],[11,"is_empty","","",159,[[],["bool",15]]],[11,"load","","",52,[[["cid",3]],[["result",4],["amterror",4]]]],[11,"load_sector","","",52,[[],[["vec",3],["actorerror",3],["result",4]]]],[11,"get","","",52,[[["sectornumber",6]],[["box",3],["option",4],["result",4]]]],[11,"store","","",52,[[["sectoronchaininfo",3],["vec",3]],[["result",4],["box",3]]]],[11,"must_get","","",52,[[["sectornumber",6]],[["sectoronchaininfo",3],["box",3],["result",4]]]],[11,"load_for_proof","","Loads info for a set of sectors to be proven. If any of …",52,[[["bitfield",3]],[["box",3],["result",4],["vec",3]]]],[11,"load_with_fault_max","","Loads sector info for a sequence of sectors, substituting …",52,[[["bitfield",3],["sectornumber",6]],[["box",3],["result",4],["vec",3]]]],[11,"new","","",53,[[["usize",15],["cid",3],["chainepoch",6]],[["box",3],["result",4]]]],[11,"get_info","","",53,[[],[["box",3],["result",4],["minerinfo",3]]]],[11,"save_info","","",53,[[["minerinfo",3]],[["result",4],["box",3]]]],[11,"deadline_info","","Returns deadline calculations for the current (according …",53,[[["chainepoch",6]],["deadlineinfo",3]]],[11,"recorded_deadline_info","","",53,[[["chainepoch",6]],["deadlineinfo",3]]],[11,"current_proving_period_start","","",53,[[["chainepoch",6]],["chainepoch",6]]],[11,"quant_spec_for_deadline","","Returns deadline calculations for the current (according …",53,[[["usize",15]],["quantspec",3]]],[11,"allocate_sector_number","","",53,[[["sectornumber",6]],[["actorerror",3],["result",4]]]],[11,"mask_sector_numbers","","",53,[[["bitfield",3]],[["actorerror",3],["result",4]]]],[11,"put_precommitted_sector","","Stores a pre-committed sector info, failing if the sector …",53,[[["sectorprecommitonchaininfo",3]],[["result",4],["box",3]]]],[11,"get_precommitted_sector","","",53,[[["sectornumber",6]],[["hamterror",4],["option",4],["result",4]]]],[11,"find_precommitted_sectors","","Gets and returns the requested pre-committed sectors, …",53,[[],[["vec",3],["box",3],["result",4]]]],[11,"delete_precommitted_sectors","","",53,[[],[["result",4],["hamterror",4]]]],[11,"has_sector_number","","",53,[[["sectornumber",6]],[["bool",15],["result",4],["box",3]]]],[11,"put_sectors","","",53,[[["sectoronchaininfo",3],["vec",3]],[["result",4],["box",3]]]],[11,"get_sector","","",53,[[["sectornumber",6]],[["box",3],["option",4],["result",4]]]],[11,"delete_sectors","","",53,[[["bitfield",3]],[["amterror",4],["result",4]]]],[11,"for_each_sector","","",53,[[],[["result",4],["box",3]]]],[11,"find_sector","","Returns the deadline and partition index for a sector …",53,[[["sectornumber",6]],[["box",3],["result",4]]]],[11,"reschedule_sector_expirations","","Schedules each sector to expire at its next deadline end. …",53,[[["chainepoch",6],["sectorsize",4],["deadlinesectormap",3]],[["box",3],["result",4],["vec",3]]]],[11,"assign_sectors_to_deadlines","","Assign new sectors to deadlines.",53,[[["sectorsize",4],["vec",3],["sectoronchaininfo",3],["chainepoch",6],["u64",15]],[["result",4],["box",3]]]],[11,"pop_early_terminations","","Pops up to <code>max_sectors</code> early terminated sectors from all …",53,[[["u64",15]],[["box",3],["result",4]]]],[11,"check_sector_health","","",53,[[["usize",15],["sectornumber",6]],[["result",4],["box",3]]]],[11,"load_sector_infos","","Loads sector info for a sequence of sectors.",53,[[["bitfield",3]],[["box",3],["result",4],["vec",3]]]],[11,"load_deadlines","","",53,[[],[["result",4],["actorerror",3],["deadlines",3]]]],[11,"save_deadlines","","",53,[[["deadlines",3]],[["result",4],["box",3]]]],[11,"load_vesting_funds","","Loads the vesting funds table from the store.",53,[[],[["vestingfunds",3],["box",3],["result",4]]]],[11,"save_vesting_funds","","Saves the vesting table to the store.",53,[[["vestingfunds",3]],[["result",4],["box",3]]]],[11,"continue_deadline_cron","","",53,[[],["bool",15]]],[11,"add_pre_commit_deposit","","",53,[[["tokenamount",6]],[["string",3],["result",4]]]],[11,"add_initial_pledge","","",53,[[["tokenamount",6]],[["string",3],["result",4]]]],[11,"apply_penalty","","",53,[[["tokenamount",6]],[["string",3],["result",4]]]],[11,"add_locked_funds","","First vests and unlocks the vested funds AND then locks …",53,[[["chainepoch",6],["vestspec",3],["tokenamount",6]],[["result",4],["tokenamount",6],["box",3]]]],[11,"repay_partial_debt_in_priority_order","","Draws from vesting table and unlocked funds to repay up …",53,[[["chainepoch",6],["tokenamount",6]],[["result",4],["box",3]]]],[11,"repay_debts","","Repays the full miner actor fee debt.  Returns the amount …",53,[[["tokenamount",6]],[["result",4],["tokenamount",6],["box",3]]]],[11,"unlock_unvested_funds","","Unlocks an amount of funds that have <em>not yet vested</em>, if …",53,[[["chainepoch",6],["tokenamount",6]],[["result",4],["tokenamount",6],["box",3]]]],[11,"unlock_vested_funds","","Unlocks all vesting funds that have vested before the …",53,[[["chainepoch",6]],[["result",4],["tokenamount",6],["box",3]]]],[11,"check_vested_funds","","CheckVestedFunds returns the amount of vested funds that …",53,[[["chainepoch",6]],[["result",4],["tokenamount",6],["box",3]]]],[11,"get_unlocked_balance","","Unclaimed funds that are not locked -- includes funds …",53,[[["tokenamount",6]],[["string",3],["result",4],["tokenamount",6]]]],[11,"get_available_balance","","Unclaimed funds. Actor balance - (locked funds, precommit …",53,[[["tokenamount",6]],[["string",3],["result",4],["tokenamount",6]]]],[11,"check_balance_invariants","","",53,[[["tokenamount",6]],[["string",3],["result",4]]]],[11,"quant_spec_every_deadline","","pre-commit expiry",53,[[],["quantspec",3]]],[11,"add_pre_commit_expiry","","",53,[[["chainepoch",6],["sectornumber",6]],[["result",4],["box",3]]]],[11,"expire_pre_commits","","",53,[[["chainepoch",6]],[["result",4],["tokenamount",6],["box",3]]]],[11,"advance_deadline","","",53,[[["chainepoch",6]],[["result",4],["advancedeadlineresult",3],["box",3]]]],[11,"new","","",55,[[["vec",3],["vec",3],["u8",15],["bytesde",3],["vec",3],["registeredpostproof",4],["address",3]],[["result",4],["actorerror",3]]]],[11,"new","","",56,[[]]],[11,"below_limit","","Returns true if we\'re below the partition/sector limit. …",56,[[["u64",15]],["bool",15]]],[11,"is_empty","","",56,[[],["bool",15]]],[11,"iter","","",56,[[]]],[11,"new","","",90,[[]]],[11,"unlock_vested_funds","","",90,[[["chainepoch",6]],["tokenamount",6]]],[11,"add_locked_funds","","",90,[[["chainepoch",6],["vestspec",3],["tokenamount",6]]]],[11,"unlock_unvested_funds","","",90,[[["chainepoch",6],["tokenamount",6]],["tokenamount",6]]],[11,"constructor","","",160,[[["minerconstructorparams",3]],[["actorerror",3],["result",4]]]],[11,"is_signer","forest_actor::multisig","Checks if <code>address</code> is in the list of signers",92,[[["address",3]],["bool",15]]],[11,"set_locked","","Set locked amount in multisig state.",92,[[["chainepoch",6],["tokenamount",6]]]],[11,"amount_locked","","Returns amount locked in multisig contract",92,[[["chainepoch",6]],["tokenamount",6]]],[11,"purge_approvals","","Iterates all pending transactions and removes an address …",92,[[["address",3]],[["result",4],["box",3]]]],[11,"key","","",93,[[],["byteskey",3]]],[11,"constructor","","Constructor for Multisig actor",161,[[["constructorparams",3]],[["actorerror",3],["result",4]]]],[11,"propose","","Multisig actor propose function",161,[[["proposeparams",3]],[["actorerror",3],["proposereturn",3],["result",4]]]],[11,"approve","","Multisig actor approve function",161,[[["txnidparams",3]],[["result",4],["approvereturn",3],["actorerror",3]]]],[11,"cancel","","Multisig actor cancel function",161,[[["txnidparams",3]],[["actorerror",3],["result",4]]]],[11,"add_signer","","Multisig actor function to add signers to multisig",161,[[["addsignerparams",3]],[["actorerror",3],["result",4]]]],[11,"remove_signer","","Multisig actor function to remove signers to multisig",161,[[["removesignerparams",3]],[["actorerror",3],["result",4]]]],[11,"swap_signer","","Multisig actor function to swap signers to multisig",161,[[["swapsignerparams",3]],[["actorerror",3],["result",4]]]],[11,"change_num_approvals_threshold","","Multisig actor function to change number of approvals …",161,[[["changenumapprovalsthresholdparams",3]],[["actorerror",3],["result",4]]]],[11,"lock_balance","","Multisig actor function to change number of approvals …",161,[[["lockbalanceparams",3]],[["actorerror",3],["result",4]]]],[11,"new","forest_actor::paych","",109,[[["cid",3],["address",3]]]],[11,"signing_bytes","","",111,[[],[["error",3],["result",4],["vec",3]]]],[11,"constructor","","Constructor for Payment channel actor",165,[[["constructorparams",3]],[["actorerror",3],["result",4]]]],[11,"update_channel_state","","",165,[[["updatechannelstateparams",3]],[["actorerror",3],["result",4]]]],[11,"settle","","",165,[[],[["actorerror",3],["result",4]]]],[11,"collect","","",165,[[],[["actorerror",3],["result",4]]]],[11,"new","forest_actor::power","",116,[[],[["result",4],["state",3],["box",3]]]],[11,"into_total_locked","","",116,[[],["tokenamount",6]]],[11,"miner_nominal_power_meets_consensus_minimum","","Checks power actor state for if miner meets minimum …",116,[[["address",3]],[["bool",15],["result",4],["box",3]]]],[11,"miner_power","","",116,[[["address",3]],[["option",4],["result",4],["box",3]]]],[11,"current_total_power","","",116,[[]]],[11,"get_claim","","",116,[[["address",3]],[["option",4],["result",4],["box",3]]]],[11,"new","forest_actor::reward","",126,[[["storagepower",6]]]],[11,"into_total_storage_power_reward","","",126,[[],["tokenamount",6]]],[11,"amount_vested","","",125,[[["chainepoch",6]],["tokenamount",6]]],[11,"constructor","forest_actor::system","System actor constructor.",182,[[],[["actorerror",3],["result",4]]]],[11,"new","forest_actor::verifreg","",132,[[["address",3]],[["result",4],["state",3],["box",3]]]],[11,"constructor","","Constructor for Registry Actor",184,[[["address",3]],[["actorerror",3],["result",4]]]],[11,"add_verifier","","",184,[[["addverifierparams",6]],[["actorerror",3],["result",4]]]],[11,"remove_verifier","","",184,[[["address",3]],[["actorerror",3],["result",4]]]],[11,"add_verified_client","","",184,[[["addverifierclientparams",6]],[["actorerror",3],["result",4]]]],[11,"use_bytes","","Called by StorageMarketActor during PublishStorageDeals. …",184,[[["usebytesparams",6]],[["actorerror",3],["result",4]]]],[11,"restore_bytes","","Called by HandleInitTimeoutDeals from StorageMarketActor …",184,[[["restorebytesparams",6]],[["actorerror",3],["result",4]]]],[11,"new","forest_actor::util","Initializes a new empty balance table",185,[[]]],[11,"from_root","","Initializes a balance table from a root Cid",185,[[["cid",3]],[["error",4],["result",4]]]],[11,"root","","Retrieve root from balance table",185,[[],[["result",4],["cid",3],["error",4]]]],[11,"get","","Gets token amount for given address in balance table",185,[[["address",3]],[["result",4],["tokenamount",6],["box",3]]]],[11,"add","","Adds token amount to previously initialized account.",185,[[["address",3],["tokenamount",6]],[["result",4],["box",3]]]],[11,"subtract_with_minimum","","Subtracts up to the specified amount from a balance, …",185,[[["address",3],["tokenamount",6]],[["result",4],["tokenamount",6],["box",3]]]],[11,"must_subtract","","Subtracts value from a balance, and errors if full amount …",185,[[["address",3],["tokenamount",6]],[["result",4],["box",3]]]],[11,"total","","Returns total balance held by this balance table",185,[[],[["result",4],["tokenamount",6],["box",3]]]],[11,"new","","Initializes a new empty multimap. The outer_bitwidth is …",186,[[["u32",15],["usize",15]]]],[11,"from_root","","Initializes a multimap from a root Cid",186,[[["u32",15],["cid",3],["usize",15]],[["error",4],["result",4]]]],[11,"root","","Retrieve root from the multimap.",186,[[],[["result",4],["cid",3],["error",4]]]],[11,"add","","Adds a value for a key.",186,[[["byteskey",3]],[["result",4],["box",3]]]],[11,"get","","Gets the Array of value type <code>V</code> using the multimap store.",186,[[],[["box",3],["result",4],["option",4]]]],[11,"remove_all","","Removes all values for a key.",186,[[],[["result",4],["box",3]]]],[11,"for_each","","Iterates through all values in the array at a given key.",186,[[],[["result",4],["box",3]]]],[11,"for_all","","Iterates through all arrays in the multimap",186,[[],[["result",4],["box",3]]]],[11,"new","","Initializes a new empty Set with the default bitwidth.",187,[[]]],[11,"new_set_with_bitwidth","","Initializes a new empty Set given a bitwidth.",187,[[["u32",15]]]],[11,"from_root","","Initializes a Set from a root Cid.",187,[[["cid",3]],[["error",4],["result",4]]]],[11,"root","","Retrieve root from the Set.",187,[[],[["result",4],["cid",3],["error",4]]]],[11,"put","","Adds key to the set.",187,[[["byteskey",3]],[["error",4],["result",4]]]],[11,"has","","Checks if key exists in the set.",187,[[],[["bool",15],["result",4],["error",4]]]],[11,"delete","","Deletes key from set.",187,[[],[["error",4],["option",4],["result",4]]]],[11,"for_each","","Iterates through all keys in the set.",187,[[],[["result",4],["box",3]]]],[11,"collect_keys","","Collects all keys from the set into a vector.",187,[[],[["result",4],["error",4],["vec",3]]]],[11,"new","","Initializes a new empty SetMultimap.",188,[[]]],[11,"from_root","","Initializes a SetMultimap from a root Cid.",188,[[["cid",3]],[["error",4],["result",4]]]],[11,"root","","Retrieve root from the SetMultimap.",188,[[],[["result",4],["cid",3],["error",4]]]],[11,"put","","Puts the DealID in the hash set of the key.",188,[[["chainepoch",6],["dealid",6]],[["result",4],["box",3]]]],[11,"put_many","","Puts slice of DealIDs in the hash set of the key.",188,[[["chainepoch",6]],[["result",4],["box",3]]]],[11,"get","","Gets the set at the given index of the <code>SetMultimap</code>",188,[[["chainepoch",6]],[["box",3],["option",4],["result",4]]]],[11,"remove","","Removes a DealID from a key hash set.",188,[[["chainepoch",6],["dealid",6]],[["result",4],["box",3]]]],[11,"remove_all","","Removes set at index.",188,[[["chainepoch",6]],[["result",4],["box",3]]]],[11,"for_each","","Iterates through keys and converts them to a DealID to …",188,[[["chainepoch",6]],[["result",4],["box",3]]]],[11,"new","forest_actor::util::smooth","Create a new filter estimate given two Q.0 format ints.",11,[[["bigint",3]]]],[11,"estimate","","Returns the Q.0 position estimate of the filter",11,[[],["bigint",3]]],[11,"extrapolate","","Extrapolate filter \\\"position\\\" delta epochs in the future.",11,[[["chainepoch",6]],["bigint",3]]],[11,"load","","",189,[[["bigint",3],["bigint",3],["filterestimate",3]]]],[11,"next_estimate","","",189,[[["bigint",3],["chainepoch",6]],["filterestimate",3]]],[11,"new","forest_actor","",196,[[["exitcode",4],["string",3]],["actorerror",3]]],[11,"new_fatal","","",196,[[["string",3]],["actorerror",3]]],[11,"is_fatal","","Returns true if error is fatal.",196,[[],["bool",15]]],[11,"exit_code","","Returns the exit code of the error.",196,[[],["exitcode",4]]],[11,"is_ok","","Returns true when the exit code is <code>Ok</code>.",196,[[],["bool",15]]],[11,"msg","","Error message of the actor error.",196,[[],["str",15]]],[11,"wrap","","Prefix error message with a string message.",196,[[],["actorerror",3]]],[11,"new","","Constructor for actor state",136,[[["u64",15],["bigint",3],["cid",3]],["actorstate",3]]],[11,"deduct_funds","","Safely deducts funds from an Actor",136,[[["bigint",3]],[["string",3],["result",4]]]],[11,"deposit_funds","","Deposits funds to an Actor",136,[[["bigint",3]]]],[11,"is_success","","returns true if the exit code was a success",137,[[],["bool",15]]],[11,"new","","Constructor if data is encoded already",197,[[["vec",3],["global",3],["u8",15]],["serialized",3]]],[11,"serialize","","Contructor for encoding Cbor encodable structure.",197,[[],[["result",4],["error",3],["serialized",3]]]],[11,"bytes","","Returns serialized bytes.",197,[[]]],[11,"deserialize","","Deserializes the serialized bytes into a defined type.",197,[[],[["result",4],["error",3]]]]],"p":[[3,"State"],[3,"CreateActorArgs"],[3,"ResolveAddressResponse"],[3,"SendArgs"],[3,"SendReturn"],[3,"MutateStateArgs"],[3,"AbortWithArgs"],[3,"InspectRuntimeReturn"],[3,"CallerValidationArgs"],[4,"Method"],[3,"Actor"],[3,"FilterEstimate"],[8,"ActorDowncast"],[3,"State"],[4,"Method"],[3,"Entry"],[3,"State"],[4,"Method"],[3,"ConstructorParams"],[3,"State"],[3,"ConstructorParams"],[3,"ExecParams"],[3,"ExecReturn"],[4,"Method"],[3,"DealProposal"],[3,"ClientDealProposal"],[3,"DealState"],[3,"State"],[3,"WithdrawBalanceParams"],[3,"OnMinerSectorsTerminateParams"],[3,"OnMinerSectorsTerminateParamsRef"],[3,"PublishStorageDealsParams"],[3,"PublishStorageDealsReturn"],[3,"VerifyDealsForActivationParams"],[3,"SectorDeals"],[3,"VerifyDealsForActivationParamsRef"],[3,"VerifyDealsForActivationReturn"],[3,"SectorWeights"],[3,"ActivateDealsParams"],[3,"ComputeDataCommitmentParams"],[3,"ComputeDataCommitmentParamsRef"],[4,"Method"],[3,"BitFieldQueue"],[3,"Deadlines"],[3,"Deadline"],[3,"DisputeInfo"],[3,"PoStResult"],[3,"ExpirationSet"],[3,"ExpirationQueue"],[3,"Partition"],[3,"PowerPair"],[3,"VestSpec"],[3,"Sectors"],[3,"State"],[3,"AdvanceDeadlineResult"],[3,"MinerInfo"],[3,"TerminationResult"],[3,"MinerConstructorParams"],[3,"CronEventPayload"],[3,"PartitionKey"],[3,"GetControlAddressesReturn"],[3,"ChangeWorkerAddressParams"],[3,"ChangePeerIDParams"],[3,"ChangeMultiaddrsParams"],[3,"ConfirmSectorProofsParams"],[3,"PoStPartition"],[3,"SubmitWindowedPoStParams"],[3,"ProveCommitSectorParams"],[3,"CheckSectorProvenParams"],[3,"ExtendSectorExpirationParams"],[3,"ExpirationExtension"],[3,"TerminateSectorsParams"],[3,"TerminationDeclaration"],[3,"TerminateSectorsReturn"],[3,"DeclareFaultsParams"],[3,"FaultDeclaration"],[3,"DeclareFaultsRecoveredParams"],[3,"RecoveryDeclaration"],[3,"CompactPartitionsParams"],[3,"CompactSectorNumbersParams"],[3,"ReportConsensusFaultParams"],[3,"WithdrawBalanceParams"],[3,"WorkerKeyChange"],[3,"SectorPreCommitInfo"],[3,"SectorPreCommitOnChainInfo"],[3,"SectorOnChainInfo"],[3,"Fault"],[3,"ApplyRewardParams"],[3,"DisputeWindowedPoStParams"],[3,"VestingFund"],[3,"VestingFunds"],[4,"Method"],[3,"State"],[3,"TxnID"],[3,"Transaction"],[3,"ProposalHashData"],[3,"ConstructorParams"],[3,"ProposeParams"],[3,"ProposeReturn"],[3,"TxnIDParams"],[3,"ApproveReturn"],[3,"AddSignerParams"],[3,"RemoveSignerParams"],[3,"SwapSignerParams"],[3,"ChangeNumApprovalsThresholdParams"],[3,"LockBalanceParams"],[4,"Method"],[3,"LaneState"],[3,"Merge"],[3,"State"],[3,"ConstructorParams"],[3,"SignedVoucher"],[3,"ModVerifyParams"],[3,"PaymentVerifyParams"],[3,"UpdateChannelStateParams"],[4,"Method"],[3,"State"],[3,"Claim"],[3,"CronEvent"],[3,"CreateMinerParams"],[3,"CreateMinerReturn"],[3,"UpdateClaimedPowerParams"],[3,"EnrollCronEventParams"],[3,"CurrentTotalPowerReturn"],[4,"Method"],[3,"Reward"],[3,"State"],[4,"VestingFunction"],[3,"AwardBlockRewardParams"],[3,"ThisEpochRewardReturn"],[4,"Method"],[4,"Method"],[3,"State"],[3,"VerifierParams"],[3,"BytesParams"],[4,"Method"],[3,"ActorState"],[4,"ExitCode"],[3,"Actor"],[3,"SYSTEM_ACTOR_CODE_ID"],[3,"INIT_ACTOR_CODE_ID"],[3,"CRON_ACTOR_CODE_ID"],[3,"ACCOUNT_ACTOR_CODE_ID"],[3,"POWER_ACTOR_CODE_ID"],[3,"MINER_ACTOR_CODE_ID"],[3,"MARKET_ACTOR_CODE_ID"],[3,"PAYCH_ACTOR_CODE_ID"],[3,"MULTISIG_ACTOR_CODE_ID"],[3,"REWARD_ACTOR_CODE_ID"],[3,"VERIFREG_ACTOR_CODE_ID"],[3,"CHAOS_ACTOR_CODE_ID"],[3,"CALLER_TYPES_SIGNABLE"],[3,"Actor"],[3,"Actor"],[3,"Actor"],[3,"WindowedPoSt"],[3,"BASE_REWARD_FOR_DISPUTED_WINDOW_POST"],[3,"BASE_PENALTY_FOR_DISPUTED_WINDOW_POST"],[3,"DeadlineSectorMap"],[3,"PartitionSectorMap"],[3,"Actor"],[3,"Actor"],[3,"QUALITY_BASE_MULTIPLIER"],[3,"DEAL_WEIGHT_MULTIPLIER"],[3,"VERIFIED_DEAL_WEIGHT_MULTIPLIER"],[3,"Actor"],[3,"Actor"],[3,"BASELINE_EXPONENT"],[3,"BASELINE_INITIAL_VALUE"],[3,"INIT_BASELINE_POWER"],[3,"Actor"],[3,"SYSTEM_ACTOR_ADDR"],[3,"INIT_ACTOR_ADDR"],[3,"REWARD_ACTOR_ADDR"],[3,"CRON_ACTOR_ADDR"],[3,"STORAGE_POWER_ACTOR_ADDR"],[3,"STORAGE_MARKET_ACTOR_ADDR"],[3,"VERIFIED_REGISTRY_ACTOR_ADDR"],[3,"CHAOS_ACTOR_ADDR"],[3,"BURNT_FUNDS_ACTOR_ADDR"],[3,"RESERVE_ADDRESS"],[3,"State"],[3,"Actor"],[3,"MINIMUM_VERIFIED_DEAL_SIZE"],[3,"Actor"],[3,"BalanceTable"],[3,"Multimap"],[3,"Set"],[3,"SetMultimap"],[3,"AlphaBetaFilter"],[3,"NUM"],[3,"DENOM"],[3,"DEFAULT_ALPHA"],[3,"DEFAULT_BETA"],[3,"LN_2"],[3,"EPSILON"],[3,"ActorError"],[3,"Serialized"]]},\
"forest_address":{"doc":"","i":[[0,"json","forest_address","",null,null],[0,"vec","forest_address::json","",null,null],[3,"AddressJsonVec","forest_address::json::vec","Wrapper for serializing and deserializing a Cid vector …",null,null],[12,"0","","",0,null],[3,"AddressJsonSlice","","Wrapper for serializing a cid slice to JSON.",null,null],[12,"0","","",1,null],[5,"serialize","","",null,[[],["result",4]]],[5,"deserialize","","",null,[[],[["vec",3],["result",4]]]],[0,"opt","forest_address::json","",null,null],[5,"serialize","forest_address::json::opt","",null,[[["option",4]],["result",4]]],[5,"deserialize","","",null,[[],[["option",4],["result",4]]]],[3,"AddressJson","forest_address::json","Wrapper for serializing and deserializing a SignedMessage …",null,null],[12,"0","","",2,null],[3,"AddressJsonRef","","Wrapper for serializing a SignedMessage reference to JSON.",null,null],[12,"0","","",3,null],[5,"serialize","","",null,[[["address",3]],["result",4]]],[5,"deserialize","","",null,[[],[["address",3],["result",4]]]],[4,"Error","forest_address","Address error",null,null],[13,"UnknownNetwork","","",4,null],[13,"UnknownProtocol","","",4,null],[13,"InvalidPayload","","",4,null],[13,"InvalidLength","","",4,null],[13,"InvalidPayloadLength","","",4,null],[13,"InvalidBLSLength","","",4,null],[13,"InvalidSECPLength","","",4,null],[13,"InvalidChecksum","","",4,null],[13,"Base32Decoding","","",4,null],[13,"NonIDAddress","","",4,null],[4,"Network","","Network defines the preconfigured networks to use with …",null,null],[13,"Mainnet","","",5,null],[13,"Testnet","","",5,null],[3,"BLSPublicKey","","Public key struct used as BLS Address data. This type is …",null,null],[12,"0","","",6,null],[4,"Payload","","Payload is the data of the Address. Variants are the …",null,null],[13,"ID","","ID protocol address.",7,null],[13,"Secp256k1","","SECP256K1 key address, 20 byte hash of PublicKey",7,null],[13,"Actor","","Actor protocol address, 20 byte hash of actor data",7,null],[13,"BLS","","BLS key address, full 48 byte public key",7,null],[4,"Protocol","","Protocol defines the addressing protocol used to derive …",null,null],[13,"ID","","ID protocol addressing",8,null],[13,"Secp256k1","","SECP256K1 key addressing",8,null],[13,"Actor","","Actor protocol addressing",8,null],[13,"BLS","","BLS key addressing",8,null],[17,"PAYLOAD_HASH_LEN","","Hash length of payload for Secp and Actor addresses.",null,null],[17,"SECP_PUB_LEN","","Uncompressed secp public key used for validation of Secp …",null,null],[17,"BLS_PUB_LEN","","BLS public key length used for validation of BLS …",null,null],[17,"CHECKSUM_HASH_LEN","","Length of the checksum hash for string encodings.",null,null],[7,"NETWORK_DEFAULT","","",null,null],[3,"Address","","Address is the struct that defines the protocol and data …",null,null],[11,"from_bytes","","Creates address from encoded bytes",9,[[],[["result",4],["error",4]]]],[11,"new_id","","Generates new address using ID protocol",9,[[["u64",15]]]],[11,"new_secp256k1","","Generates new address using Secp256k1 pubkey",9,[[],[["result",4],["error",4]]]],[11,"new_actor","","Generates new address using the Actor protocol",9,[[]]],[11,"new_bls","","Generates new address using BLS pubkey",9,[[],[["result",4],["error",4]]]],[11,"protocol","","Returns protocol for Address",9,[[],["protocol",4]]],[11,"payload","","Returns the <code>Payload</code> object from the address, where the …",9,[[],["payload",4]]],[11,"into_payload","","Converts Address into <code>Payload</code> object, where the …",9,[[],["payload",4]]],[11,"payload_bytes","","Returns the raw bytes data payload of the Address",9,[[],[["vec",3],["u8",15]]]],[11,"network","","Returns network configuration of Address",9,[[],["network",4]]],[11,"set_network","","Sets the network for the address and returns a mutable …",9,[[["network",4]]]],[11,"to_bytes","","Returns encoded bytes of Address",9,[[],[["vec",3],["u8",15]]]],[11,"id","","Get ID of the address. ID protocol only.",9,[[],[["error",4],["result",4],["u64",15]]]],[5,"checksum","","Checksum calculates the 4 byte checksum hash",null,[[],[["vec",3],["u8",15]]]],[5,"validate_checksum","","Validates the checksum against the ingest data",null,[[["vec",3],["u8",15]],["bool",15]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_string","","",4,[[],["string",3]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"to_string","","",8,[[],["string",3]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","forest_address::json::vec","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","forest_address::json","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","forest_address","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"to_string","","",9,[[],["string",3]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",4,[[["decodeerror",3]]]],[11,"from","","",4,[[["parseinterror",3]],["error",4]]],[11,"from","","",4,[[["error",3]],["error",4]]],[11,"from","","",4,[[["leb128error",4]],["error",4]]],[11,"from","","",6,[[]]],[11,"from","","",8,[[["payload",4]]]],[11,"from","","",8,[[["payload",4]]]],[11,"from","forest_address::json","",2,[[["address",3]]]],[11,"from","forest_address","",9,[[["addressjson",3]]]],[11,"clone","","",5,[[],["network",4]]],[11,"clone","","",6,[[],["blspublickey",3]]],[11,"clone","","",7,[[],["payload",4]]],[11,"clone","","",8,[[],["protocol",4]]],[11,"clone","","",9,[[],["address",3]]],[11,"default","","",5,[[]]],[11,"eq","","",4,[[["error",4]],["bool",15]]],[11,"ne","","",4,[[["error",4]],["bool",15]]],[11,"eq","","",5,[[["network",4]],["bool",15]]],[11,"eq","","",6,[[],["bool",15]]],[11,"eq","","",7,[[["payload",4]],["bool",15]]],[11,"ne","","",7,[[["payload",4]],["bool",15]]],[11,"eq","","",8,[[["protocol",4]],["bool",15]]],[11,"eq","","",9,[[["address",3]],["bool",15]]],[11,"ne","","",9,[[["address",3]],["bool",15]]],[11,"deref","","",6,[[]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"hash","","",5,[[]]],[11,"hash","","",6,[[]]],[11,"hash","","",7,[[]]],[11,"hash","","",8,[[]]],[11,"hash","","",9,[[]]],[11,"from_str","","",9,[[["str",15]],[["result",4],["error",4]]]],[11,"source","","",4,[[],[["error",8],["option",4]]]],[11,"from_i64","","",8,[[["i64",15]],["option",4]]],[11,"from_u64","","",8,[[["u64",15]],["option",4]]],[11,"serialize","","",9,[[],["result",4]]],[11,"serialize","forest_address::json","",2,[[],["result",4]]],[11,"serialize","","",3,[[],["result",4]]],[11,"serialize","forest_address::json::vec","",0,[[],["result",4]]],[11,"serialize","","",1,[[],["result",4]]],[11,"deserialize","forest_address","",9,[[],["result",4]]],[11,"deserialize","forest_address::json","",2,[[],["result",4]]],[11,"deserialize","forest_address::json::vec","",0,[[],["result",4]]],[11,"to_raw_bytes","forest_address","Returns encoded bytes of Address without the protocol …",7,[[],[["vec",3],["u8",15]]]],[11,"new","","Generates payload from raw bytes and protocol.",7,[[["protocol",4]],[["result",4],["error",4]]]]],"p":[[3,"AddressJsonVec"],[3,"AddressJsonSlice"],[3,"AddressJson"],[3,"AddressJsonRef"],[4,"Error"],[4,"Network"],[3,"BLSPublicKey"],[4,"Payload"],[4,"Protocol"],[3,"Address"]]},\
"forest_bigint":{"doc":"","i":[[0,"bigint_ser","forest_bigint","",null,null],[0,"json","forest_bigint::bigint_ser","",null,null],[0,"opt","forest_bigint::bigint_ser::json","",null,null],[5,"serialize","forest_bigint::bigint_ser::json::opt","",null,[[["option",4]],["result",4]]],[5,"deserialize","","",null,[[],[["option",4],["result",4]]]],[5,"serialize","forest_bigint::bigint_ser::json","Serializes BigInt as String",null,[[["bigint",3]],["result",4]]],[5,"deserialize","","Deserializes String into BigInt.",null,[[],[["result",4],["bigint",3]]]],[3,"BigIntSer","forest_bigint::bigint_ser","Wrapper for serializing big ints to match filecoin spec. …",null,null],[12,"0","","",0,null],[3,"BigIntDe","","Wrapper for deserializing as BigInt from bytes.",null,null],[12,"0","","",1,null],[5,"serialize","","Serializes big int as bytes following Filecoin spec.",null,[[["bigint",3]],["result",4]]],[5,"deserialize","","Deserializes bytes into big int.",null,[[],[["result",4],["bigint",3]]]],[0,"biguint_ser","forest_bigint","",null,null],[3,"BigUintSer","forest_bigint::biguint_ser","Wrapper for serializing big ints to match filecoin spec. …",null,null],[12,"0","","",2,null],[3,"BigUintDe","","Wrapper for deserializing as BigUint from bytes.",null,null],[12,"0","","",3,null],[5,"serialize","","",null,[[["biguint",3]],["result",4]]],[5,"deserialize","","",null,[[],[["biguint",3],["result",4]]]],[3,"ParseBigIntError","forest_bigint","",null,null],[3,"TryFromBigIntError","","The error type returned when a checked conversion …",null,null],[3,"BigUint","","A big unsigned integer type.",null,null],[8,"ToBigUint","","A generic trait for converting a value to a <code>BigUint</code>.",null,null],[10,"to_biguint","","Converts the value of <code>self</code> to a <code>BigUint</code>.",4,[[],[["option",4],["biguint",3]]]],[3,"BigInt","","A big signed integer type.",null,null],[4,"Sign","","A Sign is a <code>BigInt</code>\'s composing element.",null,null],[13,"Minus","","",5,null],[13,"NoSign","","",5,null],[13,"Plus","","",5,null],[8,"ToBigInt","","A generic trait for converting a value to a <code>BigInt</code>. This …",null,null],[10,"to_bigint","","Converts the value of <code>self</code> to a <code>BigInt</code>.",6,[[],[["option",4],["bigint",3]]]],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",7,[[]]],[10,"mod_floor","","Floored integer modulo, satisfying:",7,[[]]],[11,"div_ceil","","Ceiled integer division.",7,[[]]],[10,"gcd","","Greatest Common Divisor (GCD).",7,[[]]],[10,"lcm","","Lowest Common Multiple (LCM).",7,[[]]],[11,"gcd_lcm","","Greatest Common Divisor (GCD) and Lowest Common Multiple …",7,[[]]],[11,"extended_gcd","","Greatest common divisor and Bézout coefficients.",7,[[],["extendedgcd",3]]],[11,"extended_gcd_lcm","","Greatest common divisor, least common multiple, and …",7,[[]]],[10,"divides","","Deprecated, use <code>is_multiple_of</code> instead.",7,[[],["bool",15]]],[10,"is_multiple_of","","Returns <code>true</code> if <code>self</code> is a multiple of <code>other</code>.",7,[[],["bool",15]]],[10,"is_even","","Returns <code>true</code> if the number is even.",7,[[],["bool",15]]],[10,"is_odd","","Returns <code>true</code> if the number is odd.",7,[[],["bool",15]]],[10,"div_rem","","Simultaneous truncated integer division and modulus. …",7,[[]]],[11,"div_mod_floor","","Simultaneous floored integer division and modulus. …",7,[[]]],[11,"next_multiple_of","","Rounds up to nearest multiple of argument.",7,[[]]],[11,"prev_multiple_of","","Rounds down to nearest multiple of argument.",7,[[]]],[11,"from","forest_bigint::bigint_ser","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","forest_bigint::biguint_ser","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","forest_bigint","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"to_string","","",8,[[],["string",3]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"to_string","","",9,[[],["string",3]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"to_string","","",10,[[],["string",3]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"average_floor","","Returns the floor value of the average of <code>self</code> and <code>other</code>.",10,[[]]],[11,"average_ceil","","Returns the ceil value of the average of <code>self</code> and <code>other</code>.",10,[[]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"to_string","","",11,[[],["string",3]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"average_floor","","Returns the floor value of the average of <code>self</code> and <code>other</code>.",11,[[]]],[11,"average_ceil","","Returns the ceil value of the average of <code>self</code> and <code>other</code>.",11,[[]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"add_assign","","",11,[[["usize",15]]]],[11,"add_assign","","",10,[[["biguint",3]]]],[11,"add_assign","","",11,[[["u32",15]]]],[11,"add_assign","","",11,[[["i16",15]]]],[11,"add_assign","","",11,[[["i8",15]]]],[11,"add_assign","","",11,[[["isize",15]]]],[11,"add_assign","","",11,[[["i32",15]]]],[11,"add_assign","","",10,[[["u128",15]]]],[11,"add_assign","","",11,[[["bigint",3]]]],[11,"add_assign","","",11,[[["u64",15]]]],[11,"add_assign","","",11,[[["i64",15]]]],[11,"add_assign","","",10,[[["u16",15]]]],[11,"add_assign","","",10,[[["u32",15]]]],[11,"add_assign","","",11,[[["i128",15]]]],[11,"add_assign","","",11,[[["u16",15]]]],[11,"add_assign","","",10,[[["u64",15]]]],[11,"add_assign","","",11,[[["u128",15]]]],[11,"add_assign","","",11,[[["bigint",3]]]],[11,"add_assign","","",10,[[["biguint",3]]]],[11,"add_assign","","",11,[[["u8",15]]]],[11,"add_assign","","",10,[[["u8",15]]]],[11,"add_assign","","",10,[[["usize",15]]]],[11,"bitand_assign","","",10,[[["biguint",3]]]],[11,"bitand_assign","","",10,[[["biguint",3]]]],[11,"bitand_assign","","",11,[[["bigint",3]]]],[11,"bitand_assign","","",11,[[["bigint",3]]]],[11,"one","","",10,[[],["biguint",3]]],[11,"set_one","","",10,[[]]],[11,"is_one","","",10,[[],["bool",15]]],[11,"one","","",11,[[],["bigint",3]]],[11,"set_one","","",11,[[]]],[11,"is_one","","",11,[[],["bool",15]]],[11,"bitor_assign","","",11,[[["bigint",3]]]],[11,"bitor_assign","","",10,[[["biguint",3]]]],[11,"bitor_assign","","",10,[[["biguint",3]]]],[11,"bitor_assign","","",11,[[["bigint",3]]]],[11,"eq","","",9,[[["tryfrombiginterror",3]],["bool",15]]],[11,"ne","","",9,[[["tryfrombiginterror",3]],["bool",15]]],[11,"eq","","",11,[[["bigint",3]],["bool",15]]],[11,"eq","","",8,[[["parsebiginterror",3]],["bool",15]]],[11,"ne","","",8,[[["parsebiginterror",3]],["bool",15]]],[11,"eq","","",5,[[["sign",4]],["bool",15]]],[11,"eq","","",10,[[["biguint",3]],["bool",15]]],[11,"rem","","",10,[[["usize",15]],["biguint",3]]],[11,"rem","","",11,[[["usize",15]],["bigint",3]]],[11,"rem","","",11,[[["u128",15]],["bigint",3]]],[11,"rem","","",10,[[["u128",15]],["biguint",3]]],[11,"rem","","",11,[[["u8",15]],["bigint",3]]],[11,"rem","","",10,[[["u8",15]],["biguint",3]]],[11,"rem","","",10,[[["u128",15]],["biguint",3]]],[11,"rem","","",11,[[["u32",15]],["bigint",3]]],[11,"rem","","",11,[[["u8",15]],["bigint",3]]],[11,"rem","","",10,[[["biguint",3]],["biguint",3]]],[11,"rem","","",10,[[["u64",15]],["biguint",3]]],[11,"rem","","",10,[[["u64",15]],["biguint",3]]],[11,"rem","","",11,[[["u128",15]],["bigint",3]]],[11,"rem","","",11,[[["i8",15]],["bigint",3]]],[11,"rem","","",11,[[["i16",15]],["bigint",3]]],[11,"rem","","",11,[[["i64",15]],["bigint",3]]],[11,"rem","","",11,[[["usize",15]],["bigint",3]]],[11,"rem","","",11,[[["i128",15]],["bigint",3]]],[11,"rem","","",11,[[["i128",15]],["bigint",3]]],[11,"rem","","",11,[[["isize",15]],["bigint",3]]],[11,"rem","","",11,[[["u16",15]],["bigint",3]]],[11,"rem","","",11,[[["u32",15]],["bigint",3]]],[11,"rem","","",11,[[["i16",15]],["bigint",3]]],[11,"rem","","",11,[[["bigint",3]],["bigint",3]]],[11,"rem","","",10,[[["u32",15]],["biguint",3]]],[11,"rem","","",10,[[["u32",15]],["biguint",3]]],[11,"rem","","",11,[[["i32",15]],["bigint",3]]],[11,"rem","","",11,[[["bigint",3]],["bigint",3]]],[11,"rem","","",11,[[["i64",15]],["bigint",3]]],[11,"rem","","",11,[[["u64",15]],["bigint",3]]],[11,"rem","","",11,[[["u64",15]],["bigint",3]]],[11,"rem","","",10,[[["usize",15]],["biguint",3]]],[11,"rem","","",10,[[["u16",15]],["biguint",3]]],[11,"rem","","",10,[[["biguint",3]],["biguint",3]]],[11,"rem","","",11,[[["u16",15]],["bigint",3]]],[11,"rem","","",11,[[["i32",15]],["bigint",3]]],[11,"rem","","",10,[[["u16",15]],["biguint",3]]],[11,"rem","","",11,[[["isize",15]],["bigint",3]]],[11,"rem","","",11,[[["i8",15]],["bigint",3]]],[11,"rem","","",10,[[["u8",15]],["biguint",3]]],[11,"fmt","","",11,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",10,[[["formatter",3]],[["error",3],["result",4]]]],[11,"neg","","Negate Sign value.",5,[[],["sign",4]]],[11,"neg","","",11,[[],["bigint",3]]],[11,"checked_div","","",11,[[["bigint",3]],[["option",4],["bigint",3]]]],[11,"checked_div","","",10,[[["biguint",3]],[["option",4],["biguint",3]]]],[11,"bitxor","","",11,[[["bigint",3]],["bigint",3]]],[11,"bitxor","","",11,[[["bigint",3]],["bigint",3]]],[11,"bitxor","","",10,[[["biguint",3]],["biguint",3]]],[11,"bitxor","","",10,[[["biguint",3]],["biguint",3]]],[11,"nth_root","","",11,[[["u32",15]],["bigint",3]]],[11,"sqrt","","",11,[[],["bigint",3]]],[11,"cbrt","","",11,[[],["bigint",3]]],[11,"nth_root","","",10,[[["u32",15]],["biguint",3]]],[11,"sqrt","","",10,[[],["biguint",3]]],[11,"cbrt","","",10,[[],["biguint",3]]],[11,"default","","",10,[[],["biguint",3]]],[11,"default","","",11,[[],["bigint",3]]],[11,"div_assign","","",10,[[["u64",15]]]],[11,"div_assign","","",10,[[["u8",15]]]],[11,"div_assign","","",11,[[["usize",15]]]],[11,"div_assign","","",11,[[["i16",15]]]],[11,"div_assign","","",11,[[["bigint",3]]]],[11,"div_assign","","",11,[[["isize",15]]]],[11,"div_assign","","",11,[[["u8",15]]]],[11,"div_assign","","",10,[[["u16",15]]]],[11,"div_assign","","",10,[[["u128",15]]]],[11,"div_assign","","",10,[[["biguint",3]]]],[11,"div_assign","","",11,[[["i8",15]]]],[11,"div_assign","","",10,[[["u32",15]]]],[11,"div_assign","","",11,[[["bigint",3]]]],[11,"div_assign","","",11,[[["i64",15]]]],[11,"div_assign","","",11,[[["u32",15]]]],[11,"div_assign","","",11,[[["u64",15]]]],[11,"div_assign","","",11,[[["u16",15]]]],[11,"div_assign","","",11,[[["i32",15]]]],[11,"div_assign","","",11,[[["i128",15]]]],[11,"div_assign","","",10,[[["usize",15]]]],[11,"div_assign","","",11,[[["u128",15]]]],[11,"div_assign","","",10,[[["biguint",3]]]],[11,"product","","",11,[[],["bigint",3]]],[11,"product","","",10,[[],["biguint",3]]],[11,"partial_cmp","","",10,[[["biguint",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",5,[[["sign",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",11,[[["bigint",3]],[["option",4],["ordering",4]]]],[11,"description","","",8,[[],["str",15]]],[11,"description","","",9,[[],["str",15]]],[11,"div_rem","","",10,[[["biguint",3]]]],[11,"div_floor","","",10,[[["biguint",3]],["biguint",3]]],[11,"mod_floor","","",10,[[["biguint",3]],["biguint",3]]],[11,"div_mod_floor","","",10,[[["biguint",3]]]],[11,"div_ceil","","",10,[[["biguint",3]],["biguint",3]]],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the …",10,[[["biguint",3]],["biguint",3]]],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number …",10,[[["biguint",3]],["biguint",3]]],[11,"gcd_lcm","","Calculates the Greatest Common Divisor (GCD) and Lowest …",10,[[["biguint",3]]]],[11,"divides","","Deprecated, use <code>is_multiple_of</code> instead.",10,[[["biguint",3]],["bool",15]]],[11,"is_multiple_of","","Returns <code>true</code> if the number is a multiple of <code>other</code>.",10,[[["biguint",3]],["bool",15]]],[11,"is_even","","Returns <code>true</code> if the number is divisible by <code>2</code>.",10,[[],["bool",15]]],[11,"is_odd","","Returns <code>true</code> if the number is not divisible by <code>2</code>.",10,[[],["bool",15]]],[11,"next_multiple_of","","Rounds up to nearest multiple of argument.",10,[[["biguint",3]],["biguint",3]]],[11,"prev_multiple_of","","Rounds down to nearest multiple of argument.",10,[[["biguint",3]],["biguint",3]]],[11,"div_rem","","",11,[[["bigint",3]]]],[11,"div_floor","","",11,[[["bigint",3]],["bigint",3]]],[11,"mod_floor","","",11,[[["bigint",3]],["bigint",3]]],[11,"div_mod_floor","","",11,[[["bigint",3]]]],[11,"div_ceil","","",11,[[["bigint",3]],["bigint",3]]],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the …",11,[[["bigint",3]],["bigint",3]]],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number …",11,[[["bigint",3]],["bigint",3]]],[11,"gcd_lcm","","Calculates the Greatest Common Divisor (GCD) and Lowest …",11,[[["bigint",3]]]],[11,"extended_gcd_lcm","","Greatest common divisor, least common multiple, and …",11,[[["bigint",3]]]],[11,"divides","","Deprecated, use <code>is_multiple_of</code> instead.",11,[[["bigint",3]],["bool",15]]],[11,"is_multiple_of","","Returns <code>true</code> if the number is a multiple of <code>other</code>.",11,[[["bigint",3]],["bool",15]]],[11,"is_even","","Returns <code>true</code> if the number is divisible by <code>2</code>.",11,[[],["bool",15]]],[11,"is_odd","","Returns <code>true</code> if the number is not divisible by <code>2</code>.",11,[[],["bool",15]]],[11,"next_multiple_of","","Rounds up to nearest multiple of argument.",11,[[["bigint",3]],["bigint",3]]],[11,"prev_multiple_of","","Rounds down to nearest multiple of argument.",11,[[["bigint",3]],["bigint",3]]],[11,"checked_add","","",10,[[["biguint",3]],[["option",4],["biguint",3]]]],[11,"checked_add","","",11,[[["bigint",3]],[["option",4],["bigint",3]]]],[11,"zero","","",10,[[],["biguint",3]]],[11,"set_zero","","",10,[[]]],[11,"is_zero","","",10,[[],["bool",15]]],[11,"zero","","",11,[[],["bigint",3]]],[11,"set_zero","","",11,[[]]],[11,"is_zero","","",11,[[],["bool",15]]],[11,"to_bigint","","",11,[[],[["option",4],["bigint",3]]]],[11,"to_bigint","","",10,[[],[["option",4],["bigint",3]]]],[11,"mul","","",10,[[["usize",15]],["biguint",3]]],[11,"mul","","",11,[[["u16",15]],["bigint",3]]],[11,"mul","","",10,[[["u16",15]],["biguint",3]]],[11,"mul","","",10,[[["u32",15]],["biguint",3]]],[11,"mul","","",11,[[["isize",15]],["bigint",3]]],[11,"mul","","",11,[[["u32",15]],["bigint",3]]],[11,"mul","","",10,[[["u64",15]],["biguint",3]]],[11,"mul","","",11,[[["u64",15]],["bigint",3]]],[11,"mul","","",10,[[["u128",15]],["biguint",3]]],[11,"mul","","",11,[[["i64",15]],["bigint",3]]],[11,"mul","","",11,[[["bigint",3]],["bigint",3]]],[11,"mul","","",10,[[["u8",15]],["biguint",3]]],[11,"mul","","",10,[[["u64",15]],["biguint",3]]],[11,"mul","","",11,[[["usize",15]],["bigint",3]]],[11,"mul","","",11,[[["i32",15]],["bigint",3]]],[11,"mul","","",11,[[["u128",15]],["bigint",3]]],[11,"mul","","",10,[[["biguint",3]],["biguint",3]]],[11,"mul","","",11,[[["u128",15]],["bigint",3]]],[11,"mul","","",11,[[["i16",15]],["bigint",3]]],[11,"mul","","",5,[[["sign",4]],["sign",4]]],[11,"mul","","",11,[[["usize",15]],["bigint",3]]],[11,"mul","","",10,[[["u16",15]],["biguint",3]]],[11,"mul","","",10,[[["usize",15]],["biguint",3]]],[11,"mul","","",11,[[["u8",15]],["bigint",3]]],[11,"mul","","",11,[[["i16",15]],["bigint",3]]],[11,"mul","","",10,[[["u32",15]],["biguint",3]]],[11,"mul","","",10,[[["u8",15]],["biguint",3]]],[11,"mul","","",11,[[["u32",15]],["bigint",3]]],[11,"mul","","",11,[[["u64",15]],["bigint",3]]],[11,"mul","","",11,[[["u8",15]],["bigint",3]]],[11,"mul","","",11,[[["i64",15]],["bigint",3]]],[11,"mul","","",11,[[["i128",15]],["bigint",3]]],[11,"mul","","",11,[[["i8",15]],["bigint",3]]],[11,"mul","","",10,[[["biguint",3]],["biguint",3]]],[11,"mul","","",11,[[["isize",15]],["bigint",3]]],[11,"mul","","",11,[[["i32",15]],["bigint",3]]],[11,"mul","","",11,[[["u16",15]],["bigint",3]]],[11,"mul","","",11,[[["i128",15]],["bigint",3]]],[11,"mul","","",11,[[["bigint",3]],["bigint",3]]],[11,"mul","","",10,[[["u128",15]],["biguint",3]]],[11,"mul","","",11,[[["i8",15]],["bigint",3]]],[11,"fmt","","",5,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",8,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",11,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",10,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",9,[[["formatter",3]],[["error",3],["result",4]]]],[11,"shl","","",11,[[["usize",15]],["bigint",3]]],[11,"shl","","",11,[[["u16",15]],["bigint",3]]],[11,"shl","","",10,[[["usize",15]],["biguint",3]]],[11,"shl","","",11,[[["u64",15]],["bigint",3]]],[11,"shl","","",10,[[["u16",15]],["biguint",3]]],[11,"shl","","",10,[[["u32",15]],["biguint",3]]],[11,"shl","","",11,[[["i8",15]],["bigint",3]]],[11,"shl","","",11,[[["u64",15]],["bigint",3]]],[11,"shl","","",10,[[["u64",15]],["biguint",3]]],[11,"shl","","",11,[[["i64",15]],["bigint",3]]],[11,"shl","","",11,[[["isize",15]],["bigint",3]]],[11,"shl","","",11,[[["u128",15]],["bigint",3]]],[11,"shl","","",11,[[["u8",15]],["bigint",3]]],[11,"shl","","",10,[[["i16",15]],["biguint",3]]],[11,"shl","","",10,[[["usize",15]],["biguint",3]]],[11,"shl","","",10,[[["i8",15]],["biguint",3]]],[11,"shl","","",10,[[["i16",15]],["biguint",3]]],[11,"shl","","",11,[[["i64",15]],["bigint",3]]],[11,"shl","","",10,[[["i128",15]],["biguint",3]]],[11,"shl","","",10,[[["u8",15]],["biguint",3]]],[11,"shl","","",10,[[["u64",15]],["biguint",3]]],[11,"shl","","",10,[[["i128",15]],["biguint",3]]],[11,"shl","","",10,[[["u16",15]],["biguint",3]]],[11,"shl","","",10,[[["i64",15]],["biguint",3]]],[11,"shl","","",10,[[["i8",15]],["biguint",3]]],[11,"shl","","",11,[[["u128",15]],["bigint",3]]],[11,"shl","","",11,[[["isize",15]],["bigint",3]]],[11,"shl","","",11,[[["u8",15]],["bigint",3]]],[11,"shl","","",10,[[["i32",15]],["biguint",3]]],[11,"shl","","",11,[[["i16",15]],["bigint",3]]],[11,"shl","","",10,[[["isize",15]],["biguint",3]]],[11,"shl","","",10,[[["u128",15]],["biguint",3]]],[11,"shl","","",10,[[["u32",15]],["biguint",3]]],[11,"shl","","",10,[[["i64",15]],["biguint",3]]],[11,"shl","","",11,[[["i8",15]],["bigint",3]]],[11,"shl","","",11,[[["u16",15]],["bigint",3]]],[11,"shl","","",11,[[["u32",15]],["bigint",3]]],[11,"shl","","",11,[[["usize",15]],["bigint",3]]],[11,"shl","","",11,[[["i32",15]],["bigint",3]]],[11,"shl","","",10,[[["i32",15]],["biguint",3]]],[11,"shl","","",11,[[["i128",15]],["bigint",3]]],[11,"shl","","",10,[[["u8",15]],["biguint",3]]],[11,"shl","","",10,[[["u128",15]],["biguint",3]]],[11,"shl","","",11,[[["i16",15]],["bigint",3]]],[11,"shl","","",11,[[["i32",15]],["bigint",3]]],[11,"shl","","",11,[[["u32",15]],["bigint",3]]],[11,"shl","","",11,[[["i128",15]],["bigint",3]]],[11,"shl","","",10,[[["isize",15]],["biguint",3]]],[11,"clone","","",8,[[],["parsebiginterror",3]]],[11,"clone","","",5,[[],["sign",4]]],[11,"clone","","",11,[[],["bigint",3]]],[11,"clone_from","","",11,[[["bigint",3]]]],[11,"clone","","",9,[[],["tryfrombiginterror",3]]],[11,"clone","","",10,[[],["biguint",3]]],[11,"clone_from","","",10,[[["biguint",3]]]],[11,"from_i64","","",11,[[["i64",15]],[["option",4],["bigint",3]]]],[11,"from_i128","","",11,[[["i128",15]],[["option",4],["bigint",3]]]],[11,"from_u64","","",11,[[["u64",15]],[["option",4],["bigint",3]]]],[11,"from_u128","","",11,[[["u128",15]],[["option",4],["bigint",3]]]],[11,"from_f64","","",11,[[["f64",15]],[["option",4],["bigint",3]]]],[11,"from_i64","","",10,[[["i64",15]],[["option",4],["biguint",3]]]],[11,"from_i128","","",10,[[["i128",15]],[["option",4],["biguint",3]]]],[11,"from_u64","","",10,[[["u64",15]],[["option",4],["biguint",3]]]],[11,"from_u128","","",10,[[["u128",15]],[["option",4],["biguint",3]]]],[11,"from_f64","","",10,[[["f64",15]],[["option",4],["biguint",3]]]],[11,"shl_assign","","",10,[[["u64",15]]]],[11,"shl_assign","","",11,[[["i16",15]]]],[11,"shl_assign","","",11,[[["u128",15]]]],[11,"shl_assign","","",11,[[["isize",15]]]],[11,"shl_assign","","",11,[[["i16",15]]]],[11,"shl_assign","","",11,[[["u128",15]]]],[11,"shl_assign","","",11,[[["i8",15]]]],[11,"shl_assign","","",11,[[["u32",15]]]],[11,"shl_assign","","",10,[[["isize",15]]]],[11,"shl_assign","","",11,[[["isize",15]]]],[11,"shl_assign","","",11,[[["u8",15]]]],[11,"shl_assign","","",10,[[["i16",15]]]],[11,"shl_assign","","",11,[[["i32",15]]]],[11,"shl_assign","","",10,[[["u128",15]]]],[11,"shl_assign","","",10,[[["u16",15]]]],[11,"shl_assign","","",10,[[["i8",15]]]],[11,"shl_assign","","",10,[[["u8",15]]]],[11,"shl_assign","","",10,[[["i16",15]]]],[11,"shl_assign","","",10,[[["u32",15]]]],[11,"shl_assign","","",11,[[["u64",15]]]],[11,"shl_assign","","",10,[[["i128",15]]]],[11,"shl_assign","","",11,[[["usize",15]]]],[11,"shl_assign","","",11,[[["u16",15]]]],[11,"shl_assign","","",11,[[["u8",15]]]],[11,"shl_assign","","",11,[[["i64",15]]]],[11,"shl_assign","","",11,[[["u32",15]]]],[11,"shl_assign","","",10,[[["usize",15]]]],[11,"shl_assign","","",11,[[["u64",15]]]],[11,"shl_assign","","",11,[[["u16",15]]]],[11,"shl_assign","","",11,[[["i8",15]]]],[11,"shl_assign","","",10,[[["i32",15]]]],[11,"shl_assign","","",10,[[["i32",15]]]],[11,"shl_assign","","",11,[[["usize",15]]]],[11,"shl_assign","","",10,[[["isize",15]]]],[11,"shl_assign","","",11,[[["i64",15]]]],[11,"shl_assign","","",10,[[["i64",15]]]],[11,"shl_assign","","",10,[[["u8",15]]]],[11,"shl_assign","","",10,[[["usize",15]]]],[11,"shl_assign","","",10,[[["i8",15]]]],[11,"shl_assign","","",11,[[["i128",15]]]],[11,"shl_assign","","",10,[[["i64",15]]]],[11,"shl_assign","","",10,[[["u128",15]]]],[11,"shl_assign","","",10,[[["i128",15]]]],[11,"shl_assign","","",10,[[["u16",15]]]],[11,"shl_assign","","",11,[[["i128",15]]]],[11,"shl_assign","","",11,[[["i32",15]]]],[11,"shl_assign","","",10,[[["u64",15]]]],[11,"shl_assign","","",10,[[["u32",15]]]],[11,"to_biguint","","",11,[[],[["option",4],["biguint",3]]]],[11,"to_biguint","","",10,[[],[["option",4],["biguint",3]]]],[11,"pow","","",10,[[["u8",15]],["biguint",3]]],[11,"pow","","",11,[[["u16",15]],["bigint",3]]],[11,"pow","","",10,[[["u32",15]],["biguint",3]]],[11,"pow","","",10,[[["biguint",3]],["biguint",3]]],[11,"pow","","",11,[[["u8",15]],["bigint",3]]],[11,"pow","","",10,[[["biguint",3]],["biguint",3]]],[11,"pow","","",10,[[["usize",15]],["biguint",3]]],[11,"pow","","",11,[[["biguint",3]],["bigint",3]]],[11,"pow","","",10,[[["u16",15]],["biguint",3]]],[11,"pow","","",11,[[["u128",15]],["bigint",3]]],[11,"pow","","",10,[[["u64",15]],["biguint",3]]],[11,"pow","","",11,[[["usize",15]],["bigint",3]]],[11,"pow","","",11,[[["u8",15]],["bigint",3]]],[11,"pow","","",11,[[["u32",15]],["bigint",3]]],[11,"pow","","",10,[[["u128",15]],["biguint",3]]],[11,"pow","","",11,[[["u32",15]],["bigint",3]]],[11,"pow","","",11,[[["biguint",3]],["bigint",3]]],[11,"pow","","",11,[[["u64",15]],["bigint",3]]],[11,"pow","","",11,[[["usize",15]],["bigint",3]]],[11,"pow","","",10,[[["u32",15]],["biguint",3]]],[11,"pow","","",10,[[["usize",15]],["biguint",3]]],[11,"pow","","",11,[[["u128",15]],["bigint",3]]],[11,"pow","","",10,[[["u64",15]],["biguint",3]]],[11,"pow","","",10,[[["u128",15]],["biguint",3]]],[11,"pow","","",11,[[["u64",15]],["bigint",3]]],[11,"pow","","",11,[[["u16",15]],["bigint",3]]],[11,"pow","","",10,[[["u16",15]],["biguint",3]]],[11,"pow","","",10,[[["u8",15]],["biguint",3]]],[11,"fmt","","",11,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",10,[[["formatter",3]],[["error",3],["result",4]]]],[11,"checked_sub","","",11,[[["bigint",3]],[["option",4],["bigint",3]]]],[11,"checked_sub","","",10,[[["biguint",3]],[["option",4],["biguint",3]]]],[11,"sub","","",10,[[["u64",15]],["biguint",3]]],[11,"sub","","",11,[[["u32",15]],["bigint",3]]],[11,"sub","","",10,[[["u16",15]],["biguint",3]]],[11,"sub","","",11,[[["i128",15]],["bigint",3]]],[11,"sub","","",11,[[["u16",15]],["bigint",3]]],[11,"sub","","",11,[[["i16",15]],["bigint",3]]],[11,"sub","","",11,[[["u128",15]],["bigint",3]]],[11,"sub","","",10,[[["u16",15]],["biguint",3]]],[11,"sub","","",11,[[["u8",15]],["bigint",3]]],[11,"sub","","",11,[[["u16",15]],["bigint",3]]],[11,"sub","","",11,[[["isize",15]],["bigint",3]]],[11,"sub","","",11,[[["i32",15]],["bigint",3]]],[11,"sub","","",11,[[["u128",15]],["bigint",3]]],[11,"sub","","",10,[[["biguint",3]],["biguint",3]]],[11,"sub","","",10,[[["u64",15]],["biguint",3]]],[11,"sub","","",11,[[["i64",15]],["bigint",3]]],[11,"sub","","",11,[[["usize",15]],["bigint",3]]],[11,"sub","","",11,[[["u8",15]],["bigint",3]]],[11,"sub","","",10,[[["u32",15]],["biguint",3]]],[11,"sub","","",11,[[["i16",15]],["bigint",3]]],[11,"sub","","",10,[[["u8",15]],["biguint",3]]],[11,"sub","","",10,[[["u128",15]],["biguint",3]]],[11,"sub","","",11,[[["i8",15]],["bigint",3]]],[11,"sub","","",10,[[["usize",15]],["biguint",3]]],[11,"sub","","",11,[[["u64",15]],["bigint",3]]],[11,"sub","","",11,[[["isize",15]],["bigint",3]]],[11,"sub","","",10,[[["u8",15]],["biguint",3]]],[11,"sub","","",10,[[["biguint",3]],["biguint",3]]],[11,"sub","","",10,[[["usize",15]],["biguint",3]]],[11,"sub","","",11,[[["i64",15]],["bigint",3]]],[11,"sub","","",11,[[["i32",15]],["bigint",3]]],[11,"sub","","",11,[[["i8",15]],["bigint",3]]],[11,"sub","","",11,[[["bigint",3]],["bigint",3]]],[11,"sub","","",11,[[["usize",15]],["bigint",3]]],[11,"sub","","",11,[[["u32",15]],["bigint",3]]],[11,"sub","","",10,[[["u128",15]],["biguint",3]]],[11,"sub","","",11,[[["i128",15]],["bigint",3]]],[11,"sub","","",10,[[["u32",15]],["biguint",3]]],[11,"sub","","",11,[[["u64",15]],["bigint",3]]],[11,"sub","","",11,[[["bigint",3]],["bigint",3]]],[11,"fmt","","",11,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",9,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",8,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",10,[[["formatter",3]],[["error",3],["result",4]]]],[11,"try_from","","",10,[[["i128",15]],[["tryfrombiginterror",3],["result",4],["biguint",3]]]],[11,"try_from","","",10,[[["i32",15]],[["tryfrombiginterror",3],["result",4],["biguint",3]]]],[11,"try_from","","",10,[[["i16",15]],[["tryfrombiginterror",3],["result",4],["biguint",3]]]],[11,"try_from","","",10,[[["isize",15]],[["tryfrombiginterror",3],["result",4],["biguint",3]]]],[11,"try_from","","",10,[[["bigint",3]],[["result",4],["tryfrombiginterror",3],["biguint",3]]]],[11,"try_from","","",10,[[["bigint",3]],[["tryfrombiginterror",3],["result",4],["biguint",3]]]],[11,"try_from","","",10,[[["i8",15]],[["tryfrombiginterror",3],["result",4],["biguint",3]]]],[11,"try_from","","",10,[[["i64",15]],[["tryfrombiginterror",3],["result",4],["biguint",3]]]],[11,"rem_assign","","",10,[[["u32",15]]]],[11,"rem_assign","","",10,[[["biguint",3]]]],[11,"rem_assign","","",11,[[["u128",15]]]],[11,"rem_assign","","",11,[[["i16",15]]]],[11,"rem_assign","","",11,[[["bigint",3]]]],[11,"rem_assign","","",10,[[["u16",15]]]],[11,"rem_assign","","",11,[[["usize",15]]]],[11,"rem_assign","","",11,[[["i8",15]]]],[11,"rem_assign","","",11,[[["u64",15]]]],[11,"rem_assign","","",11,[[["i32",15]]]],[11,"rem_assign","","",10,[[["biguint",3]]]],[11,"rem_assign","","",11,[[["i64",15]]]],[11,"rem_assign","","",11,[[["u32",15]]]],[11,"rem_assign","","",11,[[["bigint",3]]]],[11,"rem_assign","","",10,[[["u64",15]]]],[11,"rem_assign","","",11,[[["isize",15]]]],[11,"rem_assign","","",10,[[["u128",15]]]],[11,"rem_assign","","",10,[[["u8",15]]]],[11,"rem_assign","","",11,[[["i128",15]]]],[11,"rem_assign","","",11,[[["u8",15]]]],[11,"rem_assign","","",11,[[["u16",15]]]],[11,"rem_assign","","",10,[[["usize",15]]]],[11,"bitor","","",11,[[["bigint",3]],["bigint",3]]],[11,"bitor","","",11,[[["bigint",3]],["bigint",3]]],[11,"bitor","","",10,[[["biguint",3]],["biguint",3]]],[11,"bitor","","",10,[[["biguint",3]],["biguint",3]]],[11,"abs","","",11,[[],["bigint",3]]],[11,"abs_sub","","",11,[[["bigint",3]],["bigint",3]]],[11,"signum","","",11,[[],["bigint",3]]],[11,"is_positive","","",11,[[],["bool",15]]],[11,"is_negative","","",11,[[],["bool",15]]],[11,"shr_assign","","",11,[[["i16",15]]]],[11,"shr_assign","","",10,[[["u64",15]]]],[11,"shr_assign","","",11,[[["u16",15]]]],[11,"shr_assign","","",10,[[["u16",15]]]],[11,"shr_assign","","",11,[[["i8",15]]]],[11,"shr_assign","","",10,[[["i64",15]]]],[11,"shr_assign","","",10,[[["u8",15]]]],[11,"shr_assign","","",10,[[["isize",15]]]],[11,"shr_assign","","",10,[[["i8",15]]]],[11,"shr_assign","","",10,[[["u64",15]]]],[11,"shr_assign","","",11,[[["u8",15]]]],[11,"shr_assign","","",11,[[["u16",15]]]],[11,"shr_assign","","",10,[[["u128",15]]]],[11,"shr_assign","","",11,[[["u64",15]]]],[11,"shr_assign","","",10,[[["isize",15]]]],[11,"shr_assign","","",10,[[["i128",15]]]],[11,"shr_assign","","",10,[[["i16",15]]]],[11,"shr_assign","","",11,[[["i64",15]]]],[11,"shr_assign","","",10,[[["u128",15]]]],[11,"shr_assign","","",11,[[["u64",15]]]],[11,"shr_assign","","",10,[[["i32",15]]]],[11,"shr_assign","","",11,[[["i128",15]]]],[11,"shr_assign","","",11,[[["i64",15]]]],[11,"shr_assign","","",10,[[["i8",15]]]],[11,"shr_assign","","",10,[[["usize",15]]]],[11,"shr_assign","","",11,[[["isize",15]]]],[11,"shr_assign","","",11,[[["i32",15]]]],[11,"shr_assign","","",11,[[["u128",15]]]],[11,"shr_assign","","",10,[[["u32",15]]]],[11,"shr_assign","","",10,[[["i128",15]]]],[11,"shr_assign","","",11,[[["usize",15]]]],[11,"shr_assign","","",11,[[["isize",15]]]],[11,"shr_assign","","",10,[[["i16",15]]]],[11,"shr_assign","","",10,[[["u32",15]]]],[11,"shr_assign","","",11,[[["u32",15]]]],[11,"shr_assign","","",10,[[["i32",15]]]],[11,"shr_assign","","",11,[[["i128",15]]]],[11,"shr_assign","","",10,[[["u16",15]]]],[11,"shr_assign","","",10,[[["usize",15]]]],[11,"shr_assign","","",10,[[["i64",15]]]],[11,"shr_assign","","",11,[[["i32",15]]]],[11,"shr_assign","","",11,[[["usize",15]]]],[11,"shr_assign","","",11,[[["u128",15]]]],[11,"shr_assign","","",10,[[["u8",15]]]],[11,"shr_assign","","",11,[[["u8",15]]]],[11,"shr_assign","","",11,[[["u32",15]]]],[11,"shr_assign","","",11,[[["i16",15]]]],[11,"shr_assign","","",11,[[["i8",15]]]],[11,"sub_assign","","",11,[[["i8",15]]]],[11,"sub_assign","","",10,[[["biguint",3]]]],[11,"sub_assign","","",11,[[["usize",15]]]],[11,"sub_assign","","",10,[[["u64",15]]]],[11,"sub_assign","","",11,[[["u16",15]]]],[11,"sub_assign","","",10,[[["u16",15]]]],[11,"sub_assign","","",11,[[["u64",15]]]],[11,"sub_assign","","",11,[[["u32",15]]]],[11,"sub_assign","","",11,[[["bigint",3]]]],[11,"sub_assign","","",11,[[["bigint",3]]]],[11,"sub_assign","","",11,[[["i16",15]]]],[11,"sub_assign","","",11,[[["isize",15]]]],[11,"sub_assign","","",10,[[["u8",15]]]],[11,"sub_assign","","",11,[[["i32",15]]]],[11,"sub_assign","","",11,[[["i64",15]]]],[11,"sub_assign","","",10,[[["biguint",3]]]],[11,"sub_assign","","",11,[[["i128",15]]]],[11,"sub_assign","","",11,[[["u8",15]]]],[11,"sub_assign","","",11,[[["u128",15]]]],[11,"sub_assign","","",10,[[["u32",15]]]],[11,"sub_assign","","",10,[[["u128",15]]]],[11,"sub_assign","","",10,[[["usize",15]]]],[11,"mul_assign","","",11,[[["u128",15]]]],[11,"mul_assign","","",11,[[["u32",15]]]],[11,"mul_assign","","",11,[[["u16",15]]]],[11,"mul_assign","","",11,[[["u8",15]]]],[11,"mul_assign","","",10,[[["biguint",3]]]],[11,"mul_assign","","",11,[[["bigint",3]]]],[11,"mul_assign","","",11,[[["i8",15]]]],[11,"mul_assign","","",11,[[["isize",15]]]],[11,"mul_assign","","",10,[[["biguint",3]]]],[11,"mul_assign","","",11,[[["i32",15]]]],[11,"mul_assign","","",11,[[["u64",15]]]],[11,"mul_assign","","",10,[[["u32",15]]]],[11,"mul_assign","","",11,[[["usize",15]]]],[11,"mul_assign","","",10,[[["u64",15]]]],[11,"mul_assign","","",11,[[["i128",15]]]],[11,"mul_assign","","",10,[[["u8",15]]]],[11,"mul_assign","","",10,[[["u16",15]]]],[11,"mul_assign","","",11,[[["bigint",3]]]],[11,"mul_assign","","",10,[[["u128",15]]]],[11,"mul_assign","","",10,[[["usize",15]]]],[11,"mul_assign","","",11,[[["i64",15]]]],[11,"mul_assign","","",11,[[["i16",15]]]],[11,"to_i64","","",11,[[],[["option",4],["i64",15]]]],[11,"to_i128","","",11,[[],[["option",4],["i128",15]]]],[11,"to_u64","","",11,[[],[["option",4],["u64",15]]]],[11,"to_u128","","",11,[[],[["option",4],["u128",15]]]],[11,"to_f32","","",11,[[],[["option",4],["f32",15]]]],[11,"to_f64","","",11,[[],[["f64",15],["option",4]]]],[11,"to_i64","","",10,[[],[["option",4],["i64",15]]]],[11,"to_i128","","",10,[[],[["option",4],["i128",15]]]],[11,"to_u64","","",10,[[],[["option",4],["u64",15]]]],[11,"to_u128","","",10,[[],[["option",4],["u128",15]]]],[11,"to_f32","","",10,[[],[["option",4],["f32",15]]]],[11,"to_f64","","",10,[[],[["f64",15],["option",4]]]],[11,"sum","","",11,[[],["bigint",3]]],[11,"sum","","",10,[[],["biguint",3]]],[11,"from_str","","",10,[[["str",15]],[["biguint",3],["parsebiginterror",3],["result",4]]]],[11,"from_str","","",11,[[["str",15]],[["bigint",3],["result",4],["parsebiginterror",3]]]],[11,"bitxor_assign","","",10,[[["biguint",3]]]],[11,"bitxor_assign","","",11,[[["bigint",3]]]],[11,"bitxor_assign","","",10,[[["biguint",3]]]],[11,"bitxor_assign","","",11,[[["bigint",3]]]],[11,"add","","",11,[[["i16",15]],["bigint",3]]],[11,"add","","",11,[[["u128",15]],["bigint",3]]],[11,"add","","",11,[[["bigint",3]],["bigint",3]]],[11,"add","","",10,[[["u8",15]],["biguint",3]]],[11,"add","","",11,[[["isize",15]],["bigint",3]]],[11,"add","","",11,[[["isize",15]],["bigint",3]]],[11,"add","","",11,[[["u8",15]],["bigint",3]]],[11,"add","","",11,[[["i32",15]],["bigint",3]]],[11,"add","","",11,[[["i128",15]],["bigint",3]]],[11,"add","","",11,[[["u64",15]],["bigint",3]]],[11,"add","","",10,[[["u16",15]],["biguint",3]]],[11,"add","","",11,[[["i64",15]],["bigint",3]]],[11,"add","","",11,[[["usize",15]],["bigint",3]]],[11,"add","","",11,[[["u64",15]],["bigint",3]]],[11,"add","","",11,[[["bigint",3]],["bigint",3]]],[11,"add","","",11,[[["u128",15]],["bigint",3]]],[11,"add","","",10,[[["biguint",3]],["biguint",3]]],[11,"add","","",10,[[["u64",15]],["biguint",3]]],[11,"add","","",10,[[["u32",15]],["biguint",3]]],[11,"add","","",10,[[["u16",15]],["biguint",3]]],[11,"add","","",11,[[["i8",15]],["bigint",3]]],[11,"add","","",11,[[["i64",15]],["bigint",3]]],[11,"add","","",10,[[["u32",15]],["biguint",3]]],[11,"add","","",11,[[["i128",15]],["bigint",3]]],[11,"add","","",11,[[["i16",15]],["bigint",3]]],[11,"add","","",10,[[["u128",15]],["biguint",3]]],[11,"add","","",10,[[["biguint",3]],["biguint",3]]],[11,"add","","",11,[[["u16",15]],["bigint",3]]],[11,"add","","",11,[[["u8",15]],["bigint",3]]],[11,"add","","",11,[[["u16",15]],["bigint",3]]],[11,"add","","",11,[[["i8",15]],["bigint",3]]],[11,"add","","",10,[[["usize",15]],["biguint",3]]],[11,"add","","",10,[[["usize",15]],["biguint",3]]],[11,"add","","",11,[[["i32",15]],["bigint",3]]],[11,"add","","",11,[[["u32",15]],["bigint",3]]],[11,"add","","",11,[[["u32",15]],["bigint",3]]],[11,"add","","",10,[[["u8",15]],["biguint",3]]],[11,"add","","",11,[[["usize",15]],["bigint",3]]],[11,"add","","",10,[[["u128",15]],["biguint",3]]],[11,"add","","",10,[[["u64",15]],["biguint",3]]],[11,"shr","","",10,[[["u16",15]],["biguint",3]]],[11,"shr","","",10,[[["i8",15]],["biguint",3]]],[11,"shr","","",11,[[["i8",15]],["bigint",3]]],[11,"shr","","",11,[[["i32",15]],["bigint",3]]],[11,"shr","","",10,[[["i64",15]],["biguint",3]]],[11,"shr","","",11,[[["u64",15]],["bigint",3]]],[11,"shr","","",10,[[["isize",15]],["biguint",3]]],[11,"shr","","",10,[[["u128",15]],["biguint",3]]],[11,"shr","","",10,[[["i32",15]],["biguint",3]]],[11,"shr","","",10,[[["u128",15]],["biguint",3]]],[11,"shr","","",11,[[["i16",15]],["bigint",3]]],[11,"shr","","",10,[[["u64",15]],["biguint",3]]],[11,"shr","","",11,[[["u32",15]],["bigint",3]]],[11,"shr","","",10,[[["usize",15]],["biguint",3]]],[11,"shr","","",11,[[["u8",15]],["bigint",3]]],[11,"shr","","",11,[[["i32",15]],["bigint",3]]],[11,"shr","","",11,[[["i64",15]],["bigint",3]]],[11,"shr","","",10,[[["isize",15]],["biguint",3]]],[11,"shr","","",11,[[["u64",15]],["bigint",3]]],[11,"shr","","",10,[[["u32",15]],["biguint",3]]],[11,"shr","","",10,[[["i128",15]],["biguint",3]]],[11,"shr","","",11,[[["i8",15]],["bigint",3]]],[11,"shr","","",11,[[["i128",15]],["bigint",3]]],[11,"shr","","",10,[[["u8",15]],["biguint",3]]],[11,"shr","","",10,[[["u64",15]],["biguint",3]]],[11,"shr","","",11,[[["isize",15]],["bigint",3]]],[11,"shr","","",11,[[["u16",15]],["bigint",3]]],[11,"shr","","",10,[[["i64",15]],["biguint",3]]],[11,"shr","","",10,[[["i16",15]],["biguint",3]]],[11,"shr","","",11,[[["isize",15]],["bigint",3]]],[11,"shr","","",11,[[["usize",15]],["bigint",3]]],[11,"shr","","",11,[[["i64",15]],["bigint",3]]],[11,"shr","","",10,[[["u16",15]],["biguint",3]]],[11,"shr","","",11,[[["usize",15]],["bigint",3]]],[11,"shr","","",10,[[["usize",15]],["biguint",3]]],[11,"shr","","",10,[[["u32",15]],["biguint",3]]],[11,"shr","","",10,[[["i16",15]],["biguint",3]]],[11,"shr","","",10,[[["u8",15]],["biguint",3]]],[11,"shr","","",10,[[["i8",15]],["biguint",3]]],[11,"shr","","",11,[[["u32",15]],["bigint",3]]],[11,"shr","","",11,[[["i16",15]],["bigint",3]]],[11,"shr","","",11,[[["u128",15]],["bigint",3]]],[11,"shr","","",11,[[["u8",15]],["bigint",3]]],[11,"shr","","",11,[[["i128",15]],["bigint",3]]],[11,"shr","","",11,[[["u128",15]],["bigint",3]]],[11,"shr","","",10,[[["i32",15]],["biguint",3]]],[11,"shr","","",10,[[["i128",15]],["biguint",3]]],[11,"shr","","",11,[[["u16",15]],["bigint",3]]],[11,"not","","",11,[[],["bigint",3]]],[11,"bitand","","",10,[[["biguint",3]],["biguint",3]]],[11,"bitand","","",11,[[["bigint",3]],["bigint",3]]],[11,"bitand","","",10,[[["biguint",3]],["biguint",3]]],[11,"bitand","","",11,[[["bigint",3]],["bigint",3]]],[11,"from","","",10,[[["u32",15]],["biguint",3]]],[11,"from","","",11,[[["i16",15]],["bigint",3]]],[11,"from","","",11,[[["i128",15]],["bigint",3]]],[11,"from","","",11,[[["u64",15]],["bigint",3]]],[11,"from","","",10,[[["u16",15]],["biguint",3]]],[11,"from","","",11,[[["i32",15]],["bigint",3]]],[11,"from","","",10,[[["u64",15]],["biguint",3]]],[11,"from","","",11,[[["u8",15]],["bigint",3]]],[11,"from","","",11,[[["isize",15]],["bigint",3]]],[11,"from","","",11,[[["u16",15]],["bigint",3]]],[11,"from","","",11,[[["i8",15]],["bigint",3]]],[11,"from","","",11,[[["biguint",3]],["bigint",3]]],[11,"from","","",10,[[["u8",15]],["biguint",3]]],[11,"from","","",11,[[["u128",15]],["bigint",3]]],[11,"from","","",11,[[["i64",15]],["bigint",3]]],[11,"from","","",11,[[["usize",15]],["bigint",3]]],[11,"from","","",10,[[["usize",15]],["biguint",3]]],[11,"from","","",10,[[["u128",15]],["biguint",3]]],[11,"from","","",11,[[["u32",15]],["bigint",3]]],[11,"fmt","","",11,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",10,[[["formatter",3]],[["error",3],["result",4]]]],[11,"div","","",11,[[["u16",15]],["bigint",3]]],[11,"div","","",10,[[["u32",15]],["biguint",3]]],[11,"div","","",11,[[["usize",15]],["bigint",3]]],[11,"div","","",10,[[["biguint",3]],["biguint",3]]],[11,"div","","",10,[[["u8",15]],["biguint",3]]],[11,"div","","",10,[[["u64",15]],["biguint",3]]],[11,"div","","",11,[[["i16",15]],["bigint",3]]],[11,"div","","",10,[[["usize",15]],["biguint",3]]],[11,"div","","",11,[[["u8",15]],["bigint",3]]],[11,"div","","",11,[[["i128",15]],["bigint",3]]],[11,"div","","",11,[[["u64",15]],["bigint",3]]],[11,"div","","",11,[[["isize",15]],["bigint",3]]],[11,"div","","",11,[[["u16",15]],["bigint",3]]],[11,"div","","",10,[[["u128",15]],["biguint",3]]],[11,"div","","",11,[[["u32",15]],["bigint",3]]],[11,"div","","",11,[[["u128",15]],["bigint",3]]],[11,"div","","",11,[[["i32",15]],["bigint",3]]],[11,"div","","",10,[[["usize",15]],["biguint",3]]],[11,"div","","",11,[[["bigint",3]],["bigint",3]]],[11,"div","","",11,[[["i64",15]],["bigint",3]]],[11,"div","","",10,[[["u64",15]],["biguint",3]]],[11,"div","","",11,[[["u128",15]],["bigint",3]]],[11,"div","","",10,[[["u128",15]],["biguint",3]]],[11,"div","","",11,[[["u32",15]],["bigint",3]]],[11,"div","","",10,[[["u32",15]],["biguint",3]]],[11,"div","","",11,[[["usize",15]],["bigint",3]]],[11,"div","","",11,[[["bigint",3]],["bigint",3]]],[11,"div","","",10,[[["biguint",3]],["biguint",3]]],[11,"div","","",11,[[["u64",15]],["bigint",3]]],[11,"div","","",11,[[["isize",15]],["bigint",3]]],[11,"div","","",11,[[["i16",15]],["bigint",3]]],[11,"div","","",11,[[["i8",15]],["bigint",3]]],[11,"div","","",11,[[["i8",15]],["bigint",3]]],[11,"div","","",11,[[["i64",15]],["bigint",3]]],[11,"div","","",10,[[["u8",15]],["biguint",3]]],[11,"div","","",11,[[["i32",15]],["bigint",3]]],[11,"div","","",11,[[["i128",15]],["bigint",3]]],[11,"div","","",11,[[["u8",15]],["bigint",3]]],[11,"div","","",10,[[["u16",15]],["biguint",3]]],[11,"div","","",10,[[["u16",15]],["biguint",3]]],[11,"fmt","","",11,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",10,[[["formatter",3]],[["error",3],["result",4]]]],[11,"checked_mul","","",10,[[["biguint",3]],[["option",4],["biguint",3]]]],[11,"checked_mul","","",11,[[["bigint",3]],[["option",4],["bigint",3]]]],[11,"hash","","",11,[[]]],[11,"hash","","",5,[[]]],[11,"hash","","",10,[[]]],[11,"cmp","","",10,[[["biguint",3]],["ordering",4]]],[11,"cmp","","",5,[[["sign",4]],["ordering",4]]],[11,"cmp","","",11,[[["bigint",3]],["ordering",4]]],[11,"from_str_radix","","Creates and initializes a <code>BigUint</code>.",10,[[["u32",15],["str",15]],[["biguint",3],["parsebiginterror",3],["result",4]]]],[11,"from_str_radix","","Creates and initializes a BigInt.",11,[[["u32",15],["str",15]],[["bigint",3],["result",4],["parsebiginterror",3]]]],[11,"clone","forest_bigint::bigint_ser","",1,[[],["bigintde",3]]],[11,"clone","forest_bigint::biguint_ser","",3,[[],["biguintde",3]]],[11,"default","forest_bigint::bigint_ser","",1,[[],["bigintde",3]]],[11,"eq","","",1,[[["bigintde",3]],["bool",15]]],[11,"ne","","",1,[[["bigintde",3]],["bool",15]]],[11,"serialize","","",0,[[],["result",4]]],[11,"serialize","","",1,[[],["result",4]]],[11,"serialize","forest_bigint::biguint_ser","",2,[[],["result",4]]],[11,"serialize","","",3,[[],["result",4]]],[11,"deserialize","forest_bigint::bigint_ser","",1,[[],["result",4]]],[11,"deserialize","forest_bigint::biguint_ser","",3,[[],["result",4]]],[11,"into_original","forest_bigint","Extract the original value, if available. The value will …",9,[[]]],[11,"new","","Creates and initializes a <code>BigUint</code>.",10,[[["vec",3],["u32",15],["global",3]],["biguint",3]]],[11,"from_slice","","Creates and initializes a <code>BigUint</code>.",10,[[],["biguint",3]]],[11,"assign_from_slice","","Assign a value to a <code>BigUint</code>.",10,[[]]],[11,"from_bytes_be","","Creates and initializes a <code>BigUint</code>.",10,[[],["biguint",3]]],[11,"from_bytes_le","","Creates and initializes a <code>BigUint</code>.",10,[[],["biguint",3]]],[11,"parse_bytes","","Creates and initializes a <code>BigUint</code>. The input slice must …",10,[[["u32",15]],[["option",4],["biguint",3]]]],[11,"from_radix_be","","Creates and initializes a <code>BigUint</code>. Each u8 of the input …",10,[[["u32",15]],[["option",4],["biguint",3]]]],[11,"from_radix_le","","Creates and initializes a <code>BigUint</code>. Each u8 of the input …",10,[[["u32",15]],[["option",4],["biguint",3]]]],[11,"to_bytes_be","","Returns the byte representation of the <code>BigUint</code> in …",10,[[],[["vec",3],["global",3],["u8",15]]]],[11,"to_bytes_le","","Returns the byte representation of the <code>BigUint</code> in …",10,[[],[["vec",3],["global",3],["u8",15]]]],[11,"to_u32_digits","","Returns the <code>u32</code> digits representation of the <code>BigUint</code> …",10,[[],[["vec",3],["u32",15],["global",3]]]],[11,"to_str_radix","","Returns the integer formatted as a string in the given …",10,[[["u32",15]],["string",3]]],[11,"to_radix_be","","Returns the integer in the requested base in big-endian …",10,[[["u32",15]],[["vec",3],["global",3],["u8",15]]]],[11,"to_radix_le","","Returns the integer in the requested base in …",10,[[["u32",15]],[["vec",3],["global",3],["u8",15]]]],[11,"bits","","Determines the fewest bits necessary to express the …",10,[[],["u64",15]]],[11,"pow","","Returns <code>self ^ exponent</code>.",10,[[["u32",15]],["biguint",3]]],[11,"modpow","","Returns <code>(self ^ exponent) % modulus</code>.",10,[[["biguint",3]],["biguint",3]]],[11,"sqrt","","Returns the truncated principal square root of <code>self</code> -- …",10,[[],["biguint",3]]],[11,"cbrt","","Returns the truncated principal cube root of <code>self</code> -- see …",10,[[],["biguint",3]]],[11,"nth_root","","Returns the truncated principal <code>n</code>th root of <code>self</code> -- see …",10,[[["u32",15]],["biguint",3]]],[11,"trailing_zeros","","Returns the number of least-significant bits that are …",10,[[],[["option",4],["u64",15]]]],[11,"new","","Creates and initializes a BigInt.",11,[[["u32",15],["sign",4],["global",3],["vec",3]],["bigint",3]]],[11,"from_biguint","","Creates and initializes a <code>BigInt</code>.",11,[[["sign",4],["biguint",3]],["bigint",3]]],[11,"from_slice","","Creates and initializes a <code>BigInt</code>.",11,[[["sign",4]],["bigint",3]]],[11,"assign_from_slice","","Reinitializes a <code>BigInt</code>.",11,[[["sign",4]]]],[11,"from_bytes_be","","Creates and initializes a <code>BigInt</code>.",11,[[["sign",4]],["bigint",3]]],[11,"from_bytes_le","","Creates and initializes a <code>BigInt</code>.",11,[[["sign",4]],["bigint",3]]],[11,"from_signed_bytes_be","","Creates and initializes a <code>BigInt</code> from an array of bytes in…",11,[[],["bigint",3]]],[11,"from_signed_bytes_le","","Creates and initializes a <code>BigInt</code> from an array of bytes …",11,[[],["bigint",3]]],[11,"parse_bytes","","Creates and initializes a <code>BigInt</code>.",11,[[["u32",15]],[["option",4],["bigint",3]]]],[11,"from_radix_be","","Creates and initializes a <code>BigInt</code>. Each u8 of the input …",11,[[["u32",15],["sign",4]],[["option",4],["bigint",3]]]],[11,"from_radix_le","","Creates and initializes a <code>BigInt</code>. Each u8 of the input …",11,[[["u32",15],["sign",4]],[["option",4],["bigint",3]]]],[11,"to_bytes_be","","Returns the sign and the byte representation of the <code>BigInt</code>…",11,[[]]],[11,"to_bytes_le","","Returns the sign and the byte representation of the <code>BigInt</code>…",11,[[]]],[11,"to_u32_digits","","Returns the sign and the <code>u32</code> digits representation of the …",11,[[]]],[11,"to_signed_bytes_be","","Returns the two\'s-complement byte representation of the …",11,[[],[["vec",3],["global",3],["u8",15]]]],[11,"to_signed_bytes_le","","Returns the two\'s-complement byte representation of the …",11,[[],[["vec",3],["global",3],["u8",15]]]],[11,"to_str_radix","","Returns the integer formatted as a string in the given …",11,[[["u32",15]],["string",3]]],[11,"to_radix_be","","Returns the integer in the requested base in big-endian …",11,[[["u32",15]]]],[11,"to_radix_le","","Returns the integer in the requested base in …",11,[[["u32",15]]]],[11,"sign","","Returns the sign of the <code>BigInt</code> as a <code>Sign</code>.",11,[[],["sign",4]]],[11,"magnitude","","Returns the magnitude of the <code>BigInt</code> as a <code>BigUint</code>.",11,[[],["biguint",3]]],[11,"into_parts","","Convert this <code>BigInt</code> into its <code>Sign</code> and <code>BigUint</code> magnitude, …",11,[[]]],[11,"bits","","Determines the fewest bits necessary to express the <code>BigInt</code>…",11,[[],["u64",15]]],[11,"to_biguint","","Converts this <code>BigInt</code> into a <code>BigUint</code>, if it\'s not negative.",11,[[],[["option",4],["biguint",3]]]],[11,"checked_add","","",11,[[["bigint",3]],[["option",4],["bigint",3]]]],[11,"checked_sub","","",11,[[["bigint",3]],[["option",4],["bigint",3]]]],[11,"checked_mul","","",11,[[["bigint",3]],[["option",4],["bigint",3]]]],[11,"checked_div","","",11,[[["bigint",3]],[["option",4],["bigint",3]]]],[11,"pow","","Returns <code>self ^ exponent</code>.",11,[[["u32",15]],["bigint",3]]],[11,"modpow","","Returns <code>(self ^ exponent) mod modulus</code>",11,[[["bigint",3]],["bigint",3]]],[11,"sqrt","","Returns the truncated principal square root of <code>self</code> -- …",11,[[],["bigint",3]]],[11,"cbrt","","Returns the truncated principal cube root of <code>self</code> -- see …",11,[[],["bigint",3]]],[11,"nth_root","","Returns the truncated principal <code>n</code>th root of <code>self</code> -- See …",11,[[["u32",15]],["bigint",3]]],[11,"trailing_zeros","","Returns the number of least-significant bits that are …",11,[[],[["option",4],["u64",15]]]]],"p":[[3,"BigIntSer"],[3,"BigIntDe"],[3,"BigUintSer"],[3,"BigUintDe"],[8,"ToBigUint"],[4,"Sign"],[8,"ToBigInt"],[8,"Integer"],[3,"ParseBigIntError"],[3,"TryFromBigIntError"],[3,"BigUint"],[3,"BigInt"]]},\
"forest_bitfield":{"doc":"","i":[[0,"iter","forest_bitfield","",null,null],[8,"RangeIterator","forest_bitfield::iter","A trait for iterators over <code>Range<usize></code>.",null,null],[11,"union","","Returns a new <code>RangeIterator</code> over the bits that are in <code>self</code>…",0,[[["rangeiterator",8]],[["rangeiterator",8],["union",3],["combine",3]]]],[11,"intersection","","Returns a new <code>RangeIterator</code> over the bits that are in …",0,[[["rangeiterator",8]],[["combine",3],["intersection",3],["rangeiterator",8]]]],[11,"difference","","Returns a new <code>RangeIterator</code> over the bits that are in <code>self</code>…",0,[[["rangeiterator",8]],[["difference",3],["combine",3],["rangeiterator",8]]]],[11,"symmetric_difference","","Returns a new <code>RangeIterator</code> over the bits that are in <code>self</code>…",0,[[["rangeiterator",8]],[["rangeiterator",8],["symmetricdifference",3],["combine",3]]]],[11,"cut","","Returns a new <code>RangeIterator</code> over the bits in <code>self</code> that …",0,[[["rangeiterator",8]],[["cut",3],["combine",3],["rangeiterator",8]]]],[11,"skip_bits","","Returns a new <code>RangeIterator</code> over the bits in <code>self</code> after …",0,[[["usize",15]],["skip",3]]],[11,"take_bits","","Returns a new <code>RangeIterator</code> over the first <code>n</code> bits in <code>self</code>.",0,[[["usize",15]],["take",3]]],[3,"Skip","","A <code>RangeIterator</code> that skips over <code>n</code> bits of antoher …",null,null],[3,"Take","","A <code>RangeIterator</code> that iterates over the first <code>n</code> bits of …",null,null],[3,"Ranges","","A <code>RangeIterator</code> that wraps a regular iterator over …",null,null],[11,"new","","Creates a new <code>Ranges</code> instance.",1,[[]]],[5,"ranges_from_bits","","Returns a <code>RangeIterator</code> which ranges contain the values …",null,[[]]],[0,"json","forest_bitfield","",null,null],[3,"BitFieldJson","forest_bitfield::json","",null,null],[12,"0","","",2,null],[3,"BitFieldJsonRef","","Wrapper for serializing a UnsignedMessage reference to …",null,null],[12,"0","","",3,null],[4,"UnvalidatedBitField","forest_bitfield","A bit field that may not yet have been validated for …",null,null],[13,"Validated","","",4,null],[13,"Unvalidated","","",4,null],[8,"Validate","","A trait for types that can produce a <code>&BitField</code> (or fail …",null,null],[10,"validate","","",5,[[],[["str",15],["bitfield",3],["result",4]]]],[3,"BitField","","A bit field with buffered insertion/removal that …",null,null],[11,"new","","Creates an empty bit field.",6,[[]]],[11,"from_ranges","","Creates a new bit field from a <code>RangeIterator</code>.",6,[[]]],[11,"set","","Adds the bit at a given index to the bit field.",6,[[["usize",15]]]],[11,"unset","","Removes the bit at a given index from the bit field.",6,[[["usize",15]]]],[11,"get","","Returns <code>true</code> if the bit field contains the bit at a given …",6,[[["usize",15]],["bool",15]]],[11,"first","","Returns the index of the lowest bit present in the bit …",6,[[],[["usize",15],["option",4]]]],[11,"iter","","Returns an iterator over the indices of the bit field\'s …",6,[[]]],[11,"bounded_iter","","Returns an iterator over the indices of the bit field\'s …",6,[[["usize",15]],[["result",4],["str",15]]]],[11,"ranges","","Returns an iterator over the ranges of set bits that make …",6,[[]]],[11,"is_empty","","Returns <code>true</code> if the bit field is empty.",6,[[],["bool",15]]],[11,"slice","","Returns a slice of the bit field with the start index of …",6,[[["usize",15]],[["result",4],["str",15]]]],[11,"len","","Returns the number of set bits in the bit field.",6,[[],["usize",15]]],[11,"cut","","Returns a new bit field containing the bits in <code>self</code> that …",6,[[]]],[11,"union","","Returns the union of the given bit fields as a new bit …",6,[[]]],[11,"contains_any","","Returns true if <code>self</code> overlaps with <code>other</code>.",6,[[["bitfield",3]],["bool",15]]],[11,"contains_all","","Returns true if the <code>self</code> is a superset of <code>other</code>.",6,[[["bitfield",3]],["bool",15]]],[14,"bitfield","","Constructs a <code>BitField</code> from a given list of 1s and 0s.",null,null],[11,"from","forest_bitfield::iter","",7,[[]]],[11,"into","","",7,[[]]],[11,"into_iter","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"into_iter","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"into_iter","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","forest_bitfield","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","forest_bitfield::json","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","forest_bitfield","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",4,[[["bitfield",3]]]],[11,"from","","",6,[[["bitfieldjson",3]]]],[11,"from","forest_bitfield::json","",2,[[["bitfield",3]]]],[11,"next","forest_bitfield::iter","",7,[[],["option",4]]],[11,"next","","",8,[[],["option",4]]],[11,"next","","",1,[[],["option",4]]],[11,"clone","forest_bitfield","",6,[[],["bitfield",3]]],[11,"default","","",6,[[],["bitfield",3]]],[11,"eq","","",6,[[],["bool",15]]],[11,"eq","forest_bitfield::json","",2,[[["bitfieldjson",3]],["bool",15]]],[11,"ne","","",2,[[["bitfieldjson",3]],["bool",15]]],[11,"fmt","forest_bitfield","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","forest_bitfield::json","",2,[[["formatter",3]],["result",6]]],[11,"sub_assign","forest_bitfield","",6,[[["bitfield",3]]]],[11,"bitand_assign","","",6,[[["bitfield",3]]]],[11,"bitor_assign","","",6,[[["bitfield",3]]]],[11,"bitxor_assign","","",6,[[["bitfield",3]]]],[11,"from_iter","","",6,[[["intoiterator",8]]]],[11,"from_iter","","",6,[[["intoiterator",8]]]],[11,"serialize","","",6,[[],["result",4]]],[11,"serialize","","",4,[[],["result",4]]],[11,"serialize","forest_bitfield::json","",2,[[],["result",4]]],[11,"serialize","","",3,[[],["result",4]]],[11,"deserialize","forest_bitfield","",6,[[],["result",4]]],[11,"deserialize","","",4,[[],["result",4]]],[11,"deserialize","forest_bitfield::json","",2,[[],["result",4]]],[11,"from_bytes","forest_bitfield","Decodes RLE+ encoded bytes into a bit field.",6,[[],[["result",4],["str",15]]]],[11,"to_bytes","","Turns a bit field into its RLE+ encoded form.",6,[[],[["vec",3],["u8",15]]]],[11,"validate_mut","","Validates the RLE+ encoding of the bit field, returning a …",4,[[],[["bitfield",3],["str",15],["result",4]]]]],"p":[[8,"RangeIterator"],[3,"Ranges"],[3,"BitFieldJson"],[3,"BitFieldJsonRef"],[4,"UnvalidatedBitField"],[8,"Validate"],[3,"BitField"],[3,"Skip"],[3,"Take"]]},\
"forest_blocks":{"doc":"","i":[[0,"election_proof","forest_blocks","",null,null],[0,"json","forest_blocks::election_proof","",null,null],[0,"opt","forest_blocks::election_proof::json","",null,null],[5,"serialize","forest_blocks::election_proof::json::opt","",null,[[["option",4]],["result",4]]],[5,"deserialize","","",null,[[],[["result",4],["option",4]]]],[3,"ElectionProofJson","forest_blocks::election_proof::json","Wrapper for serializing and deserializing a ElectionProof …",null,null],[12,"0","","",0,null],[3,"ElectionProofJsonRef","","Wrapper for serializing a ElectionProof reference to JSON.",null,null],[12,"0","","",1,null],[5,"serialize","","",null,[[["electionproof",3]],["result",4]]],[5,"deserialize","","",null,[[],[["electionproof",3],["result",4]]]],[3,"ElectionProof","forest_blocks::election_proof","Proofs generated by a miner which determines the reward …",null,null],[12,"win_count","","",2,null],[12,"vrfproof","","",2,null],[11,"compute_win_count","","Uses VRFProof to compute number of wins. The algorithm is …",2,[[["bigint",3]],["i64",15]]],[0,"gossip_block","forest_blocks","",null,null],[0,"json","forest_blocks::gossip_block","",null,null],[3,"GossipBlockJson","forest_blocks::gossip_block::json","Wrapper for serializing and deserializing a GossipBlock …",null,null],[12,"0","","",3,null],[3,"GossipBlockJsonRef","","Wrapper for serializing a GossipBlock reference to JSON.",null,null],[12,"0","","",4,null],[5,"serialize","","",null,[[["gossipblock",3]],["result",4]]],[5,"deserialize","","",null,[[],[["gossipblock",3],["result",4]]]],[3,"GossipBlock","forest_blocks::gossip_block","Block message used as serialized gossipsub messages for …",null,null],[12,"header","","",5,null],[12,"bls_messages","","",5,null],[12,"secpk_messages","","",5,null],[0,"header","forest_blocks","",null,null],[0,"json","forest_blocks::header","",null,null],[0,"vec","forest_blocks::header::json","",null,null],[5,"serialize","forest_blocks::header::json::vec","",null,[[],["result",4]]],[5,"deserialize","","",null,[[],[["result",4],["vec",3]]]],[3,"BlockHeaderJson","forest_blocks::header::json","",null,null],[12,"0","","",6,null],[3,"BlockHeaderJsonRef","","Wrapper for serializing a BlockHeader reference to JSON.",null,null],[12,"0","","",7,null],[5,"serialize","","",null,[[["blockheader",3]],["result",4]]],[5,"deserialize","","",null,[[],[["result",4],["blockheader",3]]]],[3,"BlockHeader","forest_blocks::header","Header of a block",null,null],[12,"signature","","",8,null],[3,"BlockHeaderBuilder","","Builder for <code>BlockHeader</code>.",null,null],[11,"parents","","Parents is the set of parents this block was based on. …",9,[[["tipsetkeys",3]]]],[11,"weight","","weight is the aggregate chain weight of the parent set",9,[[["bigint",3]]]],[11,"epoch","","epoch is the period in which a new block is generated. …",9,[[["chainepoch",6]]]],[11,"beacon_entries","","BeaconEntries contain the verifiable oracle randomness …",9,[[["vec",3],["beaconentry",3]]]],[11,"winning_post_proof","","PoStProofs are the winning post proofs",9,[[["vec",3],["postproof",3]]]],[11,"miner_address","","miner_address is the address of the miner actor that …",9,[[["address",3]]]],[11,"messages","","messages contains the Cid to the merkle links for …",9,[[["cid",3]]]],[11,"message_receipts","","message_receipts is the Cid of the root of an array of …",9,[[["cid",3]]]],[11,"state_root","","state_root is a cid pointer to the parent state root …",9,[[["cid",3]]]],[11,"fork_signal","","",9,[[["u64",15]]]],[11,"signature","","",9,[[["option",4],["signature",3]]]],[11,"election_proof","","",9,[[["option",4],["electionproof",3]]]],[11,"timestamp","","timestamp, in seconds since the Unix epoch, at which this …",9,[[["u64",15]]]],[11,"ticket","","the ticket submitted with this block",9,[[["ticket",3],["option",4]]]],[11,"bls_aggregate","","aggregate signature of miner in block",9,[[["option",4],["signature",3]]]],[11,"parent_base_fee","","the base fee of the parent block",9,[[["tokenamount",6]]]],[11,"build","","Builds a new <code>BlockHeader</code>.",9,[[],[["result",4],["blockheader",3],["string",3]]]],[11,"builder","","Generates a BlockHeader builder as a constructor",8,[[],["blockheaderbuilder",3]]],[11,"parents","","Getter for BlockHeader parents",8,[[],["tipsetkeys",3]]],[11,"weight","","Getter for BlockHeader weight",8,[[],["bigint",3]]],[11,"epoch","","Getter for BlockHeader epoch",8,[[],["chainepoch",6]]],[11,"beacon_entries","","Getter for Drand BeaconEntry",8,[[]]],[11,"winning_post_proof","","Getter for winning PoSt proof",8,[[]]],[11,"miner_address","","Getter for BlockHeader miner_address",8,[[],["address",3]]],[11,"messages","","Getter for BlockHeader messages",8,[[],["cid",3]]],[11,"message_receipts","","Getter for BlockHeader message_receipts",8,[[],["cid",3]]],[11,"state_root","","Getter for BlockHeader state_root",8,[[],["cid",3]]],[11,"timestamp","","Getter for BlockHeader timestamp",8,[[],["u64",15]]],[11,"ticket","","Getter for BlockHeader ticket",8,[[],["option",4]]],[11,"bls_aggregate","","Getter for BlockHeader bls_aggregate",8,[[],["option",4]]],[11,"cid","","Getter for BlockHeader cid",8,[[],["cid",3]]],[11,"parent_base_fee","","Getter for BlockHeader parent_base_fee",8,[[],["bigint",3]]],[11,"fork_signal","","Getter for BlockHeader fork_signal",8,[[],["u64",15]]],[11,"election_proof","","Getter for BlockHeader epost_verify",8,[[],["option",4]]],[11,"signature","","Getter for BlockHeader signature",8,[[],["option",4]]],[11,"to_sort_key","","Key used for sorting headers and blocks.",8,[[],["option",4]]],[11,"check_block_signature","","Check to ensure block signature is valid",8,[[["address",3]],[["error",4],["result",4]]]],[11,"is_ticket_winner","","Returns true if (h(vrfout) * totalPower) < (e * …",8,[[["ticket",3],["bigint",3]],["bool",15]]],[11,"validate_block_drand","","Validates if the current header\'s Beacon entries are …",8,[[["beaconentry",3],["beaconschedule",3],["chainepoch",6]]]],[11,"to_signing_bytes","","Serializes the header to bytes for signing purposes i.e. …",8,[[],[["vec",3],["u8",15]]]],[0,"ticket","forest_blocks","",null,null],[0,"json","forest_blocks::ticket","",null,null],[0,"opt","forest_blocks::ticket::json","",null,null],[5,"serialize","forest_blocks::ticket::json::opt","",null,[[["option",4]],["result",4]]],[5,"deserialize","","",null,[[],[["option",4],["result",4]]]],[3,"TicketJson","forest_blocks::ticket::json","",null,null],[12,"0","","",10,null],[3,"TicketJsonRef","","",null,null],[12,"0","","",11,null],[5,"serialize","","",null,[[["ticket",3]],["result",4]]],[5,"deserialize","","",null,[[],[["result",4],["ticket",3]]]],[3,"Ticket","forest_blocks::ticket","A Ticket is a marker of a tick of the blockchain\'s clock. …",null,null],[12,"vrfproof","","A proof output by running a VRF on the VDFResult of the …",12,null],[11,"new","","Ticket constructor",12,[[["vrfproof",3]]]],[0,"tipset","forest_blocks","",null,null],[0,"tipset_keys_json","forest_blocks::tipset","",null,null],[3,"TipsetKeysJson","forest_blocks::tipset::tipset_keys_json","",null,null],[12,"0","","",13,null],[5,"serialize","","",null,[[["tipsetkeys",3]],["result",4]]],[5,"deserialize","","",null,[[],[["result",4],["tipsetkeys",3]]]],[0,"tipset_json","forest_blocks::tipset","",null,null],[3,"TipsetJson","forest_blocks::tipset::tipset_json","Wrapper for serializing and deserializing a SignedMessage …",null,null],[12,"0","","",14,null],[3,"TipsetJsonRef","","Wrapper for serializing a SignedMessage reference to JSON.",null,null],[12,"0","","",15,null],[5,"serialize","","",null,[[["tipset",3]],["result",4]]],[5,"deserialize","","",null,[[],[["arc",3],["result",4]]]],[3,"TipsetKeys","forest_blocks::tipset","A set of CIDs forming a unique key for a Tipset. Equal …",null,null],[12,"cids","","",16,null],[11,"new","","",16,[[["vec",3],["cid",3]]]],[11,"cids","","Returns tipset header cids",16,[[]]],[3,"Tipset","","An immutable set of blocks at the same height with the …",null,null],[11,"new","","Builds a new Tipset from a collection of blocks. A valid …",17,[[["vec",3],["blockheader",3]],[["result",4],["error",4]]]],[11,"epoch","","Returns epoch of the tipset.",17,[[],["chainepoch",6]]],[11,"blocks","","Returns all blocks in tipset.",17,[[]]],[11,"into_blocks","","Consumes Tipset to convert into a vector of [BlockHeader].",17,[[],[["vec",3],["blockheader",3]]]],[11,"min_ticket","","Returns the smallest ticket of all blocks in the tipset",17,[[],[["option",4],["ticket",3]]]],[11,"min_ticket_block","","Returns the block with the smallest ticket of all blocks …",17,[[],["blockheader",3]]],[11,"min_timestamp","","Returns the smallest timestamp of all blocks in the tipset",17,[[],["u64",15]]],[11,"len","","Returns the number of blocks in the tipset.",17,[[],["usize",15]]],[11,"key","","Returns a key for the tipset.",17,[[],["tipsetkeys",3]]],[11,"cids","","Returns slice of Cids for the current tipset",17,[[]]],[11,"parents","","Returns the CIDs of the parents of the blocks in the …",17,[[],["tipsetkeys",3]]],[11,"parent_state","","Returns the state root for the tipset parent.",17,[[],["cid",3]]],[11,"weight","","Returns the tipset\'s calculated weight",17,[[],["bigint",3]]],[3,"FullTipset","","FullTipset is an expanded version of the Tipset that …",null,null],[11,"new","","",18,[[["vec",3],["block",3]],[["result",4],["error",4]]]],[11,"blocks","","Returns reference to all blocks in a full tipset.",18,[[]]],[11,"into_blocks","","Returns all blocks in a full tipset.",18,[[],[["vec",3],["block",3]]]],[11,"into_tipset","","Converts the full tipset into a [Tipset] which removes …",18,[[],["tipset",3]]],[11,"key","","Returns a key for the tipset.",18,[[],["tipsetkeys",3]]],[11,"parent_state","","Returns the state root for the tipset parent.",18,[[],["cid",3]]],[11,"epoch","","Returns epoch of the tipset.",18,[[],["chainepoch",6]]],[11,"weight","","Returns the tipset\'s calculated weight.",18,[[],["bigint",3]]],[17,"BLOCK_MESSAGE_LIMIT","forest_blocks","Limit of bls and secp messages combined in a block.",null,null],[3,"Block","","A complete Filecoin block. This contains the block header …",null,null],[12,"header","","",19,null],[12,"bls_messages","","",19,null],[12,"secp_messages","","",19,null],[3,"TxMeta","","Tracks the merkleroots of both secp and bls messages …",null,null],[12,"bls_message_root","","",20,null],[12,"secp_message_root","","",20,null],[4,"Error","","Blockchain blocks error",null,null],[13,"InvalidTipset","","Tipset contains invalid data, as described by the string …",21,null],[13,"NoBlocks","","The given tipset has no blocks",21,null],[13,"InvalidSignature","","Invalid signature",21,null],[13,"Validation","","Error in validating arbitrary data",21,null],[11,"from","","",19,[[]]],[11,"into","","",19,[[]]],[11,"to_owned","","",19,[[]]],[11,"clone_into","","",19,[[]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"vzip","","",19,[[]]],[11,"init","","",19,[[],["usize",15]]],[11,"deref","","",19,[[["usize",15]]]],[11,"deref_mut","","",19,[[["usize",15]]]],[11,"drop","","",19,[[["usize",15]]]],[11,"from","","",20,[[]]],[11,"into","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"vzip","","",20,[[]]],[11,"init","","",20,[[],["usize",15]]],[11,"deref","","",20,[[["usize",15]]]],[11,"deref_mut","","",20,[[["usize",15]]]],[11,"drop","","",20,[[["usize",15]]]],[11,"from","forest_blocks::election_proof::json","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"init","","",0,[[],["usize",15]]],[11,"deref","","",0,[[["usize",15]]]],[11,"deref_mut","","",0,[[["usize",15]]]],[11,"drop","","",0,[[["usize",15]]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"init","","",1,[[],["usize",15]]],[11,"deref","","",1,[[["usize",15]]]],[11,"deref_mut","","",1,[[["usize",15]]]],[11,"drop","","",1,[[["usize",15]]]],[11,"from","forest_blocks::election_proof","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"init","","",2,[[],["usize",15]]],[11,"deref","","",2,[[["usize",15]]]],[11,"deref_mut","","",2,[[["usize",15]]]],[11,"drop","","",2,[[["usize",15]]]],[11,"from","forest_blocks","",21,[[]]],[11,"into","","",21,[[]]],[11,"to_string","","",21,[[],["string",3]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"vzip","","",21,[[]]],[11,"init","","",21,[[],["usize",15]]],[11,"deref","","",21,[[["usize",15]]]],[11,"deref_mut","","",21,[[["usize",15]]]],[11,"drop","","",21,[[["usize",15]]]],[11,"from","forest_blocks::gossip_block::json","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"init","","",3,[[],["usize",15]]],[11,"deref","","",3,[[["usize",15]]]],[11,"deref_mut","","",3,[[["usize",15]]]],[11,"drop","","",3,[[["usize",15]]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"init","","",4,[[],["usize",15]]],[11,"deref","","",4,[[["usize",15]]]],[11,"deref_mut","","",4,[[["usize",15]]]],[11,"drop","","",4,[[["usize",15]]]],[11,"from","forest_blocks::gossip_block","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"vzip","","",5,[[]]],[11,"init","","",5,[[],["usize",15]]],[11,"deref","","",5,[[["usize",15]]]],[11,"deref_mut","","",5,[[["usize",15]]]],[11,"drop","","",5,[[["usize",15]]]],[11,"from","forest_blocks::header::json","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"vzip","","",6,[[]]],[11,"init","","",6,[[],["usize",15]]],[11,"deref","","",6,[[["usize",15]]]],[11,"deref_mut","","",6,[[["usize",15]]]],[11,"drop","","",6,[[["usize",15]]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"vzip","","",7,[[]]],[11,"init","","",7,[[],["usize",15]]],[11,"deref","","",7,[[["usize",15]]]],[11,"deref_mut","","",7,[[["usize",15]]]],[11,"drop","","",7,[[["usize",15]]]],[11,"from","forest_blocks::header","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"to_string","","",8,[[],["string",3]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"vzip","","",8,[[]]],[11,"init","","",8,[[],["usize",15]]],[11,"deref","","",8,[[["usize",15]]]],[11,"deref_mut","","",8,[[["usize",15]]]],[11,"drop","","",8,[[["usize",15]]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"vzip","","",9,[[]]],[11,"init","","",9,[[],["usize",15]]],[11,"deref","","",9,[[["usize",15]]]],[11,"deref_mut","","",9,[[["usize",15]]]],[11,"drop","","",9,[[["usize",15]]]],[11,"from","forest_blocks::ticket::json","",10,[[]]],[11,"into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"vzip","","",10,[[]]],[11,"init","","",10,[[],["usize",15]]],[11,"deref","","",10,[[["usize",15]]]],[11,"deref_mut","","",10,[[["usize",15]]]],[11,"drop","","",10,[[["usize",15]]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"vzip","","",11,[[]]],[11,"init","","",11,[[],["usize",15]]],[11,"deref","","",11,[[["usize",15]]]],[11,"deref_mut","","",11,[[["usize",15]]]],[11,"drop","","",11,[[["usize",15]]]],[11,"from","forest_blocks::ticket","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"vzip","","",12,[[]]],[11,"init","","",12,[[],["usize",15]]],[11,"deref","","",12,[[["usize",15]]]],[11,"deref_mut","","",12,[[["usize",15]]]],[11,"drop","","",12,[[["usize",15]]]],[11,"from","forest_blocks::tipset::tipset_keys_json","",13,[[]]],[11,"into","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"vzip","","",13,[[]]],[11,"init","","",13,[[],["usize",15]]],[11,"deref","","",13,[[["usize",15]]]],[11,"deref_mut","","",13,[[["usize",15]]]],[11,"drop","","",13,[[["usize",15]]]],[11,"from","forest_blocks::tipset::tipset_json","",14,[[]]],[11,"into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"vzip","","",14,[[]]],[11,"init","","",14,[[],["usize",15]]],[11,"deref","","",14,[[["usize",15]]]],[11,"deref_mut","","",14,[[["usize",15]]]],[11,"drop","","",14,[[["usize",15]]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"vzip","","",15,[[]]],[11,"init","","",15,[[],["usize",15]]],[11,"deref","","",15,[[["usize",15]]]],[11,"deref_mut","","",15,[[["usize",15]]]],[11,"drop","","",15,[[["usize",15]]]],[11,"from","forest_blocks::tipset","",16,[[]]],[11,"into","","",16,[[]]],[11,"to_owned","","",16,[[]]],[11,"clone_into","","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"vzip","","",16,[[]]],[11,"init","","",16,[[],["usize",15]]],[11,"deref","","",16,[[["usize",15]]]],[11,"deref_mut","","",16,[[["usize",15]]]],[11,"drop","","",16,[[["usize",15]]]],[11,"get_hash","","",16,[[],["u64",15]]],[11,"from","","",17,[[]]],[11,"into","","",17,[[]]],[11,"to_owned","","",17,[[]]],[11,"clone_into","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"vzip","","",17,[[]]],[11,"init","","",17,[[],["usize",15]]],[11,"deref","","",17,[[["usize",15]]]],[11,"deref_mut","","",17,[[["usize",15]]]],[11,"drop","","",17,[[["usize",15]]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"to_owned","","",18,[[]]],[11,"clone_into","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"vzip","","",18,[[]]],[11,"init","","",18,[[],["usize",15]]],[11,"deref","","",18,[[["usize",15]]]],[11,"deref_mut","","",18,[[["usize",15]]]],[11,"drop","","",18,[[["usize",15]]]],[11,"from","forest_blocks","",21,[[["timeerr",3]],["error",4]]],[11,"from","forest_blocks::header","",8,[[["blockheaderjson",3]]]],[11,"from","forest_blocks::tipset","",17,[[["fulltipset",3]]]],[11,"from","","",16,[[["tipsetkeysjson",3]]]],[11,"from","forest_blocks::tipset::tipset_keys_json","",13,[[["tipsetkeys",3]]]],[11,"from","forest_blocks::tipset::tipset_json","",14,[[["tipset",3],["arc",3]]]],[11,"from","","",15,[[["tipset",3]]]],[11,"clone","forest_blocks","",19,[[],["block",3]]],[11,"clone","forest_blocks::election_proof","",2,[[],["electionproof",3]]],[11,"clone","forest_blocks::gossip_block","",5,[[],["gossipblock",3]]],[11,"clone","forest_blocks::header","",8,[[],["blockheader",3]]],[11,"clone","","",9,[[],["blockheaderbuilder",3]]],[11,"clone","forest_blocks::ticket","",12,[[],["ticket",3]]],[11,"clone","forest_blocks::tipset","",16,[[],["tipsetkeys",3]]],[11,"clone","","",17,[[],["tipset",3]]],[11,"clone","","",18,[[],["fulltipset",3]]],[11,"default","forest_blocks::election_proof","",2,[[],["electionproof",3]]],[11,"default","forest_blocks::header","",9,[[],["blockheaderbuilder",3]]],[11,"default","forest_blocks::ticket","",12,[[],["ticket",3]]],[11,"default","forest_blocks::tipset","",16,[[],["tipsetkeys",3]]],[11,"cmp","forest_blocks::election_proof","",2,[[["electionproof",3]],["ordering",4]]],[11,"eq","forest_blocks","",19,[[["block",3]],["bool",15]]],[11,"ne","","",19,[[["block",3]],["bool",15]]],[11,"eq","forest_blocks::election_proof","",2,[[["electionproof",3]],["bool",15]]],[11,"ne","","",2,[[["electionproof",3]],["bool",15]]],[11,"eq","forest_blocks","",21,[[["error",4]],["bool",15]]],[11,"ne","","",21,[[["error",4]],["bool",15]]],[11,"eq","forest_blocks::header","",8,[[],["bool",15]]],[11,"eq","forest_blocks::ticket","",12,[[["ticket",3]],["bool",15]]],[11,"ne","","",12,[[["ticket",3]],["bool",15]]],[11,"eq","forest_blocks::tipset","",16,[[["tipsetkeys",3]],["bool",15]]],[11,"ne","","",16,[[["tipsetkeys",3]],["bool",15]]],[11,"eq","","",17,[[],["bool",15]]],[11,"eq","","",18,[[],["bool",15]]],[11,"partial_cmp","forest_blocks::election_proof","",2,[[["electionproof",3]],[["option",4],["ordering",4]]]],[11,"lt","","",2,[[["electionproof",3]],["bool",15]]],[11,"le","","",2,[[["electionproof",3]],["bool",15]]],[11,"gt","","",2,[[["electionproof",3]],["bool",15]]],[11,"ge","","",2,[[["electionproof",3]],["bool",15]]],[11,"fmt","forest_blocks","",19,[[["formatter",3]],["result",6]]],[11,"fmt","forest_blocks::election_proof","",2,[[["formatter",3]],["result",6]]],[11,"fmt","forest_blocks","",21,[[["formatter",3]],["result",6]]],[11,"fmt","forest_blocks::gossip_block","",5,[[["formatter",3]],["result",6]]],[11,"fmt","forest_blocks::header","",8,[[["formatter",3]],["result",6]]],[11,"fmt","forest_blocks::ticket","",12,[[["formatter",3]],["result",6]]],[11,"fmt","forest_blocks::tipset","",16,[[["formatter",3]],["result",6]]],[11,"fmt","","",17,[[["formatter",3]],["result",6]]],[11,"fmt","","",18,[[["formatter",3]],["result",6]]],[11,"fmt","forest_blocks::tipset::tipset_json","",14,[[["formatter",3]],["result",6]]],[11,"fmt","forest_blocks","",21,[[["formatter",3]],["result",6]]],[11,"fmt","forest_blocks::header","",8,[[["formatter",3]],["result",6]]],[11,"hash","forest_blocks::tipset","",16,[[]]],[11,"serialize","forest_blocks","",20,[[],["result",4]]],[11,"serialize","forest_blocks::election_proof","",2,[[],["result",4]]],[11,"serialize","forest_blocks::election_proof::json","",0,[[],["result",4]]],[11,"serialize","","",1,[[],["result",4]]],[11,"serialize","forest_blocks::gossip_block","",5,[[],["result",4]]],[11,"serialize","forest_blocks::gossip_block::json","",3,[[],["result",4]]],[11,"serialize","","",4,[[],["result",4]]],[11,"serialize","forest_blocks::header::json","",6,[[],["result",4]]],[11,"serialize","","",7,[[],["result",4]]],[11,"serialize","forest_blocks::header","",8,[[],["result",4]]],[11,"serialize","forest_blocks::ticket","",12,[[],["result",4]]],[11,"serialize","forest_blocks::ticket::json","",10,[[],["result",4]]],[11,"serialize","","",11,[[],["result",4]]],[11,"serialize","forest_blocks::tipset","",16,[[],["result",4]]],[11,"serialize","forest_blocks::tipset::tipset_keys_json","",13,[[],["result",4]]],[11,"serialize","forest_blocks::tipset::tipset_json","",14,[[],["result",4]]],[11,"serialize","","",15,[[],["result",4]]],[11,"deserialize","forest_blocks","",20,[[],["result",4]]],[11,"deserialize","forest_blocks::election_proof","",2,[[],["result",4]]],[11,"deserialize","forest_blocks::election_proof::json","",0,[[],["result",4]]],[11,"deserialize","forest_blocks::gossip_block","",5,[[],["result",4]]],[11,"deserialize","forest_blocks::gossip_block::json","",3,[[],["result",4]]],[11,"deserialize","forest_blocks::header::json","",6,[[],["result",4]]],[11,"deserialize","forest_blocks::header","",8,[[],["result",4]]],[11,"deserialize","forest_blocks::ticket","",12,[[],["result",4]]],[11,"deserialize","forest_blocks::ticket::json","",10,[[],["result",4]]],[11,"deserialize","forest_blocks::tipset","",16,[[],["result",4]]],[11,"deserialize","forest_blocks::tipset::tipset_keys_json","",13,[[],["result",4]]],[11,"deserialize","forest_blocks::tipset::tipset_json","",14,[[],["result",4]]],[11,"marshal_cbor","forest_blocks::header","",8,[[],[["encodingerror",3],["result",4],["vec",3]]]],[11,"cid","","",8,[[],[["encodingerror",3],["cid",3],["result",4]]]],[11,"header","forest_blocks","Returns reference to the [BlockHeader].",19,[[],["blockheader",3]]],[11,"bls_msgs","","Returns reference to the block\'s BLS [UnsignedMessage]s.",19,[[]]],[11,"secp_msgs","","Returns reference to the block\'s Secp256k1 [SignedMessage]…",19,[[]]],[11,"cid","","Returns block\'s cid. This cid is the same as the […",19,[[],["cid",3]]]],"p":[[3,"ElectionProofJson"],[3,"ElectionProofJsonRef"],[3,"ElectionProof"],[3,"GossipBlockJson"],[3,"GossipBlockJsonRef"],[3,"GossipBlock"],[3,"BlockHeaderJson"],[3,"BlockHeaderJsonRef"],[3,"BlockHeader"],[3,"BlockHeaderBuilder"],[3,"TicketJson"],[3,"TicketJsonRef"],[3,"Ticket"],[3,"TipsetKeysJson"],[3,"TipsetJson"],[3,"TipsetJsonRef"],[3,"TipsetKeys"],[3,"Tipset"],[3,"FullTipset"],[3,"Block"],[3,"TxMeta"],[4,"Error"]]},\
"forest_car":{"doc":"","i":[[4,"Error","forest_car","Car utility error",null,null],[13,"ParsingError","","",0,null],[13,"InvalidFile","","",0,null],[13,"Io","","",0,null],[13,"Cbor","","",0,null],[13,"Other","","",0,null],[3,"CarHeader","","CAR file header",null,null],[12,"roots","","",1,null],[12,"version","","",1,null],[11,"new","","Creates a new CAR file header",1,[[["u64",15],["vec",3],["cid",3]]]],[11,"write_stream_async","","Writes header and stream of data to writer in Car format.",1,[[]]],[3,"CarReader","","Reads CAR files that are in a BufReader",null,null],[12,"reader","","",2,null],[12,"header","","",2,null],[11,"new","","Creates a new CarReader and parses the CarHeader",2,[[]]],[11,"next_block","","Returns the next IPLD Block in the buffer",2,[[]]],[3,"Block","","IPLD Block",null,null],[5,"load_car","","Loads a CAR buffer into a BlockStore",null,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",0,[[["error",3]]]],[11,"from","","",0,[[["error",3]]]],[11,"from","","",0,[[["error",4]],["error",4]]],[11,"from","","",0,[[["error",4]],["error",4]]],[11,"from","","",1,[[["vec",3],["cid",3]]]],[11,"clone","","",3,[[],["block",3]]],[11,"default","","",1,[[],["carheader",3]]],[11,"eq","","",1,[[["carheader",3]],["bool",15]]],[11,"ne","","",1,[[["carheader",3]],["bool",15]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"source","","",0,[[],[["option",4],["error",8]]]],[11,"serialize","","",1,[[],["result",4]]],[11,"deserialize","","",1,[[],["result",4]]]],"p":[[4,"Error"],[3,"CarHeader"],[3,"CarReader"],[3,"Block"]]},\
"forest_cid":{"doc":"","i":[[0,"json","forest_cid","",null,null],[0,"vec","forest_cid::json","",null,null],[3,"CidJsonVec","forest_cid::json::vec","Wrapper for serializing and deserializing a Cid vector …",null,null],[12,"0","","",0,null],[3,"CidJsonSlice","","Wrapper for serializing a cid slice to JSON.",null,null],[12,"0","","",1,null],[5,"serialize","","",null,[[],["result",4]]],[5,"deserialize","","",null,[[],[["result",4],["vec",3]]]],[0,"opt","forest_cid::json","",null,null],[5,"serialize","forest_cid::json::opt","",null,[[["option",4]],["result",4]]],[5,"deserialize","","",null,[[],[["option",4],["result",4]]]],[3,"CidJson","forest_cid::json","Wrapper for serializing and deserializing a Cid from JSON.",null,null],[12,"0","","",2,null],[3,"CidJsonRef","","Wrapper for serializing a cid reference to JSON.",null,null],[12,"0","","",3,null],[5,"serialize","","",null,[[["cid",3]],["result",4]]],[5,"deserialize","","",null,[[],[["cid",3],["result",4]]]],[4,"Code","forest_cid","Multihash generation codes for the Filecoin protocol. …",null,null],[13,"Blake2b256","","BLAKE2b-256 (32-byte hash size)",4,null],[13,"Identity","","Identity multihash (max 32 bytes)",4,null],[6,"Multihash","","A Multihash with the same allocated size as the …",null,null],[17,"POSEIDON_BLS12_381_A1_FC1","","Multihash code for Poseidon BLS replica commitments.",null,null],[17,"SHA2_256_TRUNC254_PADDED","","Multihash code for Sha2 256 trunc254 padded used in data …",null,null],[3,"Prefix","","Prefix represents all metadata of a CID, without the …",null,null],[12,"version","","",5,null],[12,"codec","","",5,null],[12,"mh_type","","",5,null],[12,"mh_len","","",5,null],[4,"Error","","Error types",null,null],[13,"UnknownCodec","","Unknown CID codec.",6,null],[13,"InputTooShort","","Input data is too short.",6,null],[13,"ParsingError","","Multibase or multihash codec failure",6,null],[13,"InvalidCidVersion","","Invalid CID version.",6,null],[13,"InvalidCidV0Codec","","Invalid CIDv0 codec.",6,null],[13,"InvalidCidV0Multihash","","Invalid CIDv0 multihash.",6,null],[13,"InvalidCidV0Base","","Invalid CIDv0 base encoding.",6,null],[13,"VarIntDecodeError","","Varint decode failure.",6,null],[13,"Io","","Io error.",6,null],[4,"Version","","The version of the CID.",null,null],[13,"V0","","CID version 0.",7,null],[13,"V1","","CID version 1.",7,null],[17,"DAG_CBOR","","Cbor [Cid] codec.",null,null],[17,"FIL_COMMITMENT_SEALED","","Sealed commitment [Cid] codec.",null,null],[17,"FIL_COMMITMENT_UNSEALED","","Unsealed commitment [Cid] codec.",null,null],[17,"RAW","","Raw [Cid] codec. This represents data that is not encoded …",null,null],[5,"new_from_cbor","","Constructs a cid with bytes using default version and …",null,[[["code",4]],["cid",3]]],[5,"new_from_prefix","","Create a new CID from a prefix and some data.",null,[[["prefix",3]],[["result",4],["cid",3],["error",4]]]],[3,"Cid","","Content identifier for any Ipld data. This Cid consists …",null,null],[11,"new","","Create a new CID.",8,[[["u64",15],["multihash",6],["version",4]],[["result",4],["error",4]]]],[11,"new_v1","","Create a new CIDv1.",8,[[["multihash",6],["u64",15]]]],[11,"version","","Returns the cid version.",8,[[],["version",4]]],[11,"codec","","Returns the cid codec.",8,[[],["u64",15]]],[11,"hash","","Returns the cid multihash.",8,[[],["multihash",6]]],[11,"read_bytes","","Reads the bytes from a byte stream.",8,[[["read",8]],[["result",4],["error",4]]]],[11,"to_bytes","","Returns the encoded bytes of the <code>Cid</code>.",8,[[],[["vec",3],["u8",15]]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","forest_cid::json::vec","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","forest_cid::json","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","forest_cid","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_string","","",6,[[],["string",3]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"to_string","","",8,[[],["string",3]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"try_from","","",7,[[["u64",15]],[["error",4],["result",4],["version",4]]]],[11,"fmt","","",6,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",7,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",6,[[["formatter",3]],[["error",3],["result",4]]]],[11,"hash","","",7,[[]]],[11,"partial_cmp","","",7,[[["version",4]],[["option",4],["ordering",4]]]],[11,"from","","",6,[[["error",3]],["error",4]]],[11,"from","","",6,[[["error",4]],["error",4]]],[11,"from","","",6,[[["error",4]],["error",4]]],[11,"from","","",6,[[["readerror",4]],["error",4]]],[11,"from","","",6,[[["error",4]],["error",4]]],[11,"clone","","",7,[[],["version",4]]],[11,"cmp","","",7,[[["version",4]],["ordering",4]]],[11,"eq","","",7,[[["version",4]],["bool",15]]],[11,"from","","",4,[[["blake2bdigest",3]]]],[11,"from","","",4,[[["identitydigest",3]]]],[11,"from","","",5,[[["cid",3]]]],[11,"from","","",8,[[["cidjson",3]]]],[11,"clone","","",4,[[],["code",4]]],[11,"clone","","",5,[[],["prefix",3]]],[11,"clone","forest_cid::json","",2,[[],["cidjson",3]]],[11,"clone","forest_cid","",8,[[],["cid",3]]],[11,"default","","",8,[[],["cid",3]]],[11,"cmp","","",8,[[["cid",3]],["ordering",4]]],[11,"eq","","",4,[[["code",4]],["bool",15]]],[11,"eq","","",5,[[["prefix",3]],["bool",15]]],[11,"ne","","",5,[[["prefix",3]],["bool",15]]],[11,"eq","","",8,[[["cid",3]],["bool",15]]],[11,"ne","","",8,[[["cid",3]],["bool",15]]],[11,"partial_cmp","","",8,[[["cid",3]],[["option",4],["ordering",4]]]],[11,"lt","","",8,[[["cid",3]],["bool",15]]],[11,"le","","",8,[[["cid",3]],["bool",15]]],[11,"gt","","",8,[[["cid",3]],["bool",15]]],[11,"ge","","",8,[[["cid",3]],["bool",15]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","forest_cid::json","",2,[[["formatter",3]],["result",6]]],[11,"fmt","forest_cid","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"hash","","",8,[[]]],[11,"try_from","","",4,[[["u64",15]],["result",4]]],[11,"try_from","","",8,[[["string",3]],["result",4]]],[11,"try_from","","",8,[[["str",15]],["result",4]]],[11,"try_from","","",8,[[["vec",3],["u8",15]],["result",4]]],[11,"try_from","","",8,[[],["result",4]]],[11,"from_str","","",8,[[["str",15]],[["result",4],["error",4]]]],[11,"digest","","",4,[[],["multihash",6]]],[11,"multihash_from_digest","","",4,[[],["multihash",6]]],[11,"serialize","forest_cid::json","",2,[[],["result",4]]],[11,"serialize","","",3,[[],["result",4]]],[11,"serialize","forest_cid::json::vec","",0,[[],["result",4]]],[11,"serialize","","",1,[[],["result",4]]],[11,"serialize","forest_cid","",8,[[],["result",4]]],[11,"deserialize","forest_cid::json","",2,[[],["result",4]]],[11,"deserialize","forest_cid::json::vec","",0,[[],["result",4]]],[11,"deserialize","forest_cid","",8,[[],["result",4]]],[11,"new_from_bytes","","Generate new prefix from encoded bytes",5,[[],[["prefix",3],["error",4],["result",4]]]],[11,"to_bytes","","Encodes prefix to bytes",5,[[],[["vec",3],["u8",15]]]],[11,"is_v0_str","","Check if the version of <code>data</code> string is CIDv0.",7,[[["str",15]],["bool",15]]],[11,"is_v0_binary","","Check if the version of <code>data</code> bytes is CIDv0.",7,[[],["bool",15]]]],"p":[[3,"CidJsonVec"],[3,"CidJsonSlice"],[3,"CidJson"],[3,"CidJsonRef"],[4,"Code"],[3,"Prefix"],[4,"Error"],[4,"Version"],[3,"Cid"]]},\
"forest_crypto":{"doc":"","i":[[0,"signature","forest_crypto","",null,null],[0,"json","forest_crypto::signature","",null,null],[0,"opt","forest_crypto::signature::json","",null,null],[5,"serialize","forest_crypto::signature::json::opt","",null,[[["option",4]],["result",4]]],[5,"deserialize","","",null,[[],[["result",4],["option",4]]]],[0,"signature_type","forest_crypto::signature::json","",null,null],[3,"SignatureTypeJson","forest_crypto::signature::json::signature_type","",null,null],[12,"0","","",0,null],[5,"serialize","","",null,[[["signaturetype",4]],["result",4]]],[5,"deserialize","","",null,[[],[["result",4],["signaturetype",4]]]],[3,"SignatureJson","forest_crypto::signature::json","",null,null],[12,"0","","",1,null],[3,"SignatureJsonRef","","Wrapper for serializing a Signature reference to JSON.",null,null],[12,"0","","",2,null],[5,"serialize","","",null,[[["signature",3]],["result",4]]],[5,"deserialize","","",null,[[],[["signature",3],["result",4]]]],[17,"BLS_SIG_LEN","forest_crypto::signature","BLS signature length in bytes.",null,null],[17,"BLS_PUB_LEN","","BLS Public key length in bytes.",null,null],[17,"SECP_SIG_LEN","","Secp256k1 signature length in bytes.",null,null],[17,"SECP_PUB_LEN","","Secp256k1 Public key length in bytes.",null,null],[4,"SignatureType","","Signature variants for Filecoin signatures.",null,null],[13,"Secp256k1","","",3,null],[13,"BLS","","",3,null],[3,"Signature","","A cryptographic signature, represented in bytes, of any …",null,null],[11,"new_secp256k1","","Creates a SECP Signature given the raw bytes.",4,[[["vec",3],["u8",15]]]],[11,"new_bls","","Creates a BLS Signature given the raw bytes.",4,[[["vec",3],["u8",15]]]],[11,"bytes","","Returns reference to signature bytes.",4,[[]]],[11,"signature_type","","Returns [SignatureType] for the signature.",4,[[],["signaturetype",4]]],[11,"verify","","Checks if a signature is valid given data and address.",4,[[["address",3]],[["result",4],["string",3]]]],[5,"verify_bls_aggregate","","Aggregates and verifies bls signatures collectively.",null,[[["signature",3]],["bool",15]]],[5,"ecrecover","","Return Address for a message given it\'s signing bytes …",null,[[],[["result",4],["address",3],["error",4]]]],[0,"vrf","forest_crypto","",null,null],[0,"json","forest_crypto::vrf","",null,null],[5,"serialize","forest_crypto::vrf::json","",null,[[["vrfproof",3]],["result",4]]],[5,"deserialize","","",null,[[],[["vrfproof",3],["result",4]]]],[3,"VRFProof","forest_crypto::vrf","The output from running a VRF proof.",null,null],[12,"0","","",5,null],[11,"new","","Creates a VRFProof from a raw vector.",5,[[["vec",3],["u8",15]]]],[11,"as_bytes","","Returns reference to underlying proof bytes.",5,[[]]],[11,"digest","","Compute the blake2b256 digest of the proof.",5,[[]]],[5,"verify_vrf","","Verifies raw VRF proof. This VRF proof is a BLS signature.",null,[[["address",3]],[["result",4],["string",3]]]],[4,"Error","forest_crypto","Crypto error",null,null],[13,"SigningError","","Failed to produce a signature",6,null],[13,"InvalidRecovery","","Unable to perform ecrecover with the given params",6,null],[13,"InvalidPubKey","","Provided public key is not understood",6,null],[4,"DomainSeparationTag","","Specifies a domain for randomness generation.",null,null],[13,"TicketProduction","","",7,null],[13,"ElectionProofProduction","","",7,null],[13,"WinningPoStChallengeSeed","","",7,null],[13,"WindowedPoStChallengeSeed","","",7,null],[13,"SealRandomness","","",7,null],[13,"InteractiveSealChallengeSeed","","",7,null],[13,"WindowPoStDeadlineAssignment","","",7,null],[13,"MarketDealCronSeed","","",7,null],[13,"PoStChainCommit","","",7,null],[8,"Signer","","Signer is a trait which allows a key implementation to …",null,null],[10,"sign_bytes","","Function signs any arbitrary data given the [Address].",8,[[["address",3]],[["result",4],["signature",3],["box",3]]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_string","","",6,[[],["string",3]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"vzip","","",6,[[]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"vzip","","",7,[[]]],[11,"from","forest_crypto::signature::json::signature_type","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","forest_crypto::signature::json","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","forest_crypto::signature","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"from","forest_crypto::vrf","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"vzip","","",5,[[]]],[11,"from","forest_crypto","",6,[[["addresserror",4]]]],[11,"from","","",6,[[["error",8],["box",3]],["error",4]]],[11,"from","","",6,[[["secperror",4]],["error",4]]],[11,"from","","",6,[[["encodingerror",3]],["error",4]]],[11,"clone","","",7,[[],["domainseparationtag",4]]],[11,"clone","forest_crypto::signature","",3,[[],["signaturetype",4]]],[11,"clone","","",4,[[],["signature",3]]],[11,"clone","forest_crypto::vrf","",5,[[],["vrfproof",3]]],[11,"default","","",5,[[],["vrfproof",3]]],[11,"cmp","","",5,[[["vrfproof",3]],["ordering",4]]],[11,"eq","forest_crypto","",6,[[["error",4]],["bool",15]]],[11,"ne","","",6,[[["error",4]],["bool",15]]],[11,"eq","","",7,[[["domainseparationtag",4]],["bool",15]]],[11,"eq","forest_crypto::signature","",3,[[["signaturetype",4]],["bool",15]]],[11,"eq","","",4,[[["signature",3]],["bool",15]]],[11,"ne","","",4,[[["signature",3]],["bool",15]]],[11,"eq","forest_crypto::vrf","",5,[[["vrfproof",3]],["bool",15]]],[11,"ne","","",5,[[["vrfproof",3]],["bool",15]]],[11,"partial_cmp","","",5,[[["vrfproof",3]],[["option",4],["ordering",4]]]],[11,"lt","","",5,[[["vrfproof",3]],["bool",15]]],[11,"le","","",5,[[["vrfproof",3]],["bool",15]]],[11,"gt","","",5,[[["vrfproof",3]],["bool",15]]],[11,"ge","","",5,[[["vrfproof",3]],["bool",15]]],[11,"fmt","forest_crypto","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","forest_crypto::signature","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","forest_crypto::vrf","",5,[[["formatter",3]],["result",6]]],[11,"fmt","forest_crypto","",6,[[["formatter",3]],["result",6]]],[11,"hash","","",7,[[]]],[11,"hash","forest_crypto::signature","",3,[[]]],[11,"hash","","",4,[[]]],[11,"source","forest_crypto","",6,[[],[["error",8],["option",4]]]],[11,"from_i64","","",7,[[["i64",15]],["option",4]]],[11,"from_u64","","",7,[[["u64",15]],["option",4]]],[11,"from_i64","forest_crypto::signature","",3,[[["i64",15]],["option",4]]],[11,"from_u64","","",3,[[["u64",15]],["option",4]]],[11,"deserialize","forest_crypto","",7,[[],["result",4]]],[11,"deserialize","forest_crypto::signature","",3,[[],["result",4]]],[11,"deserialize","","",4,[[],["result",4]]],[11,"deserialize","forest_crypto::signature::json","",1,[[],["result",4]]],[11,"deserialize","forest_crypto::signature::json::signature_type","",0,[[],["result",4]]],[11,"deserialize","forest_crypto::vrf","",5,[[],["result",4]]],[11,"serialize","forest_crypto::signature","",3,[[],["result",4]]],[11,"serialize","","",4,[[],["result",4]]],[11,"serialize","forest_crypto::signature::json","",1,[[],["result",4]]],[11,"serialize","","",2,[[],["result",4]]],[11,"serialize","forest_crypto::signature::json::signature_type","",0,[[],["result",4]]],[11,"serialize","forest_crypto::vrf","",5,[[],["result",4]]]],"p":[[3,"SignatureTypeJson"],[3,"SignatureJson"],[3,"SignatureJsonRef"],[4,"SignatureType"],[3,"Signature"],[3,"VRFProof"],[4,"Error"],[4,"DomainSeparationTag"],[8,"Signer"]]},\
"forest_db":{"doc":"","i":[[0,"rocks","forest_db","",null,null],[3,"Options","forest_db::rocks","Database-wide options around performance and behavior.",null,null],[3,"WriteBatch","","An atomic batch of write operations.",null,null],[3,"DB","","A RocksDB database.",null,null],[3,"RocksDb","","RocksDB instance this satisfies the [Store] interface.",null,null],[12,"db","","",0,null],[11,"open","","",0,[[],[["error",4],["result",4]]]],[4,"Error","forest_db","Database error",null,null],[13,"InvalidBulkLen","","",1,null],[13,"Unopened","","",1,null],[13,"Database","","",1,null],[13,"Encoding","","",1,null],[13,"Other","","",1,null],[3,"MemoryDB","","A thread-safe <code>HashMap</code> wrapper.",null,null],[8,"Store","","Store interface used as a KV store implementation",null,null],[10,"read","","Read single value from data store and return <code>None</code> if key …",2,[[],[["error",4],["result",4],["option",4]]]],[10,"write","","Write a single value to the data store.",2,[[],[["result",4],["error",4]]]],[10,"delete","","Delete value at key.",2,[[],[["result",4],["error",4]]]],[10,"exists","","Returns <code>Ok(true)</code> if key exists in store",2,[[],[["bool",15],["error",4],["result",4]]]],[11,"bulk_read","","Read slice of keys and return a vector of optional values.",2,[[],[["result",4],["error",4],["vec",3]]]],[11,"bulk_write","","Write slice of KV pairs.",2,[[],[["result",4],["error",4]]]],[11,"bulk_delete","","Bulk delete keys from the data store.",2,[[],[["result",4],["error",4]]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_string","","",1,[[],["string",3]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","forest_db::rocks","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"fmt","","",6,[[["formatter",3]],[["error",3],["result",4]]]],[11,"default","","",5,[[],["writebatch",3]]],[11,"default","","",4,[[],["options",3]]],[11,"clone","","",4,[[],["options",3]]],[11,"drop","","",4,[[]]],[11,"drop","","",5,[[]]],[11,"drop","","",6,[[]]],[11,"write","forest_db","",3,[[],[["result",4],["error",4]]]],[11,"delete","","",3,[[],[["result",4],["error",4]]]],[11,"read","","",3,[[],[["error",4],["result",4],["option",4]]]],[11,"exists","","",3,[[],[["bool",15],["error",4],["result",4]]]],[11,"write","forest_db::rocks","",0,[[],[["result",4],["error",4]]]],[11,"delete","","",0,[[],[["result",4],["error",4]]]],[11,"bulk_write","","",0,[[],[["result",4],["error",4]]]],[11,"read","","",0,[[],[["error",4],["result",4],["option",4]]]],[11,"exists","","",0,[[],[["bool",15],["error",4],["result",4]]]],[11,"from","forest_db","",1,[[["error",3]]]],[11,"from","","",1,[[["cborerror",3]]]],[11,"clone","","",3,[[]]],[11,"default","","",3,[[],["memorydb",3]]],[11,"eq","","",1,[[],["bool",15]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","forest_db::rocks","",0,[[["formatter",3]],["result",6]]],[11,"fmt","forest_db","",1,[[["formatter",3]],["result",6]]],[11,"source","","",1,[[],[["error",8],["option",4]]]],[11,"increase_parallelism","forest_db::rocks","By default, RocksDB uses only one background thread for …",4,[[["i32",15]]]],[11,"optimize_level_style_compaction","","Optimize level style compaction.",4,[[["usize",15]]]],[11,"optimize_universal_style_compaction","","Optimize universal style compaction.",4,[[["usize",15]]]],[11,"create_if_missing","","If true, the database will be created if it is missing.",4,[[["bool",15]]]],[11,"create_missing_column_families","","If true, any column families that didn\'t exist when …",4,[[["bool",15]]]],[11,"set_error_if_exists","","Specifies whether an error should be raised if the …",4,[[["bool",15]]]],[11,"set_paranoid_checks","","Enable/disable paranoid checks.",4,[[["bool",15]]]],[11,"set_db_paths","","A list of paths where SST files can be put into, with its …",4,[[]]],[11,"set_env","","Use the specified object to interact with the environment,…",4,[[["env",3]]]],[11,"set_compression_type","","Sets the compression algorithm that will be used for …",4,[[["dbcompressiontype",4]]]],[11,"set_compression_per_level","","Different levels can have different compression policies. …",4,[[]]],[11,"set_compression_options","","Maximum size of dictionaries used to prime the …",4,[[["i32",15]]]],[11,"set_compaction_readahead_size","","If non-zero, we perform bigger reads when doing …",4,[[["usize",15]]]],[11,"set_level_compaction_dynamic_level_bytes","","Allow RocksDB to pick dynamic base of bytes for levels. …",4,[[["bool",15]]]],[11,"set_merge_operator","","",4,[[["option",4],["str",15]]]],[11,"add_merge_operator","","",4,[[["str",15]]]],[11,"set_compaction_filter","","Sets a compaction filter used to determine if entries …",4,[[["str",15]]]],[11,"set_compaction_filter_factory","","This is a factory that provides compaction filter objects …",4,[[]]],[11,"set_comparator","","Sets the comparator used to define the order of keys in …",4,[[["str",15]]]],[11,"set_prefix_extractor","","",4,[[["slicetransform",3]]]],[11,"add_comparator","","",4,[[["str",15]]]],[11,"optimize_for_point_lookup","","",4,[[["u64",15]]]],[11,"set_optimize_filters_for_hits","","Sets the optimize_filters_for_hits flag",4,[[["bool",15]]]],[11,"set_delete_obsolete_files_period_micros","","Sets the periodicity when obsolete files get deleted.",4,[[["u64",15]]]],[11,"prepare_for_bulk_load","","Prepare the DB for bulk loading.",4,[[]]],[11,"set_max_open_files","","Sets the number of open files that can be used by the DB. …",4,[[["i32",15]]]],[11,"set_max_file_opening_threads","","If max_open_files is -1, DB will open all files on …",4,[[["i32",15]]]],[11,"set_use_fsync","","If true, then every store to stable storage will issue a …",4,[[["bool",15]]]],[11,"set_db_log_dir","","Specifies the absolute info LOG dir.",4,[[]]],[11,"set_bytes_per_sync","","Allows OS to incrementally sync files to disk while they …",4,[[["u64",15]]]],[11,"set_wal_bytes_per_sync","","Same as bytes_per_sync, but applies to WAL files.",4,[[["u64",15]]]],[11,"set_writable_file_max_buffer_size","","Sets the maximum buffer size that is used by …",4,[[["u64",15]]]],[11,"set_allow_concurrent_memtable_write","","If true, allow multi-writers to update mem tables in …",4,[[["bool",15]]]],[11,"set_enable_write_thread_adaptive_yield","","If true, threads synchronizing with the write batch group …",4,[[["bool",15]]]],[11,"set_max_sequential_skip_in_iterations","","Specifies whether an iteration->Next() sequentially skips …",4,[[["u64",15]]]],[11,"set_use_direct_reads","","Enable direct I/O mode for reading they may or may not …",4,[[["bool",15]]]],[11,"set_use_direct_io_for_flush_and_compaction","","Enable direct I/O mode for flush and compaction",4,[[["bool",15]]]],[11,"set_is_fd_close_on_exec","","Enable/dsiable child process inherit open files.",4,[[["bool",15]]]],[11,"set_skip_log_error_on_recovery","","Enable/disable skipping of log corruption error on …",4,[[["bool",15]]]],[11,"set_allow_os_buffer","","Hints to the OS that it should not buffer disk I/O. …",4,[[["bool",15]]]],[11,"set_table_cache_num_shard_bits","","Sets the number of shards used for table cache.",4,[[["i32",15]]]],[11,"set_target_file_size_multiplier","","By default target_file_size_multiplier is 1, which means …",4,[[["i32",15]]]],[11,"set_min_write_buffer_number","","Sets the minimum number of write buffers that will be …",4,[[["i32",15]]]],[11,"set_max_write_buffer_number","","Sets the maximum number of write buffers that are built …",4,[[["i32",15]]]],[11,"set_write_buffer_size","","Sets the amount of data to build up in memory (backed by …",4,[[["usize",15]]]],[11,"set_db_write_buffer_size","","Amount of data to build up in memtables across all column …",4,[[["usize",15]]]],[11,"set_max_bytes_for_level_base","","Control maximum total data size for a level. …",4,[[["u64",15]]]],[11,"set_max_bytes_for_level_multiplier","","Default: <code>10</code>",4,[[["f64",15]]]],[11,"set_max_manifest_file_size","","The manifest file is rolled over on reaching this limit. …",4,[[["usize",15]]]],[11,"set_target_file_size_base","","Sets the target file size for compaction. …",4,[[["u64",15]]]],[11,"set_min_write_buffer_number_to_merge","","Sets the minimum number of write buffers that will be …",4,[[["i32",15]]]],[11,"set_level_zero_file_num_compaction_trigger","","Sets the number of files to trigger level-0 compaction. A …",4,[[["i32",15]]]],[11,"set_level_zero_slowdown_writes_trigger","","Sets the soft limit on number of level-0 files. We start …",4,[[["i32",15]]]],[11,"set_level_zero_stop_writes_trigger","","Sets the maximum number of level-0 files.  We stop writes …",4,[[["i32",15]]]],[11,"set_compaction_style","","Sets the compaction style.",4,[[["dbcompactionstyle",4]]]],[11,"set_universal_compaction_options","","Sets the options needed to support Universal Style …",4,[[["universalcompactoptions",3]]]],[11,"set_fifo_compaction_options","","Sets the options for FIFO compaction style.",4,[[["fifocompactoptions",3]]]],[11,"set_unordered_write","","Sets unordered_write to true trades higher write …",4,[[["bool",15]]]],[11,"set_max_subcompactions","","Sets maximum number of threads that will concurrently …",4,[[["u32",15]]]],[11,"set_max_background_jobs","","Sets maximum number of concurrent background jobs …",4,[[["i32",15]]]],[11,"set_max_background_compactions","","Sets the maximum number of concurrent background …",4,[[["i32",15]]]],[11,"set_max_background_flushes","","Sets the maximum number of concurrent background memtable …",4,[[["i32",15]]]],[11,"set_disable_auto_compactions","","Disables automatic compactions. Manual compactions can …",4,[[["bool",15]]]],[11,"set_memtable_huge_page_size","","SetMemtableHugePageSize sets the page size for huge page …",4,[[["usize",15]]]],[11,"set_max_successive_merges","","Sets the maximum number of successive merge operations on …",4,[[["usize",15]]]],[11,"set_bloom_locality","","Control locality of bloom filter probes to improve cache …",4,[[["u32",15]]]],[11,"set_inplace_update_support","","Enable/disable thread-safe inplace updates.",4,[[["bool",15]]]],[11,"set_inplace_update_locks","","Sets the number of locks used for inplace update.",4,[[["usize",15]]]],[11,"set_max_bytes_for_level_multiplier_additional","","Different max-size multipliers for different levels. …",4,[[]]],[11,"set_skip_checking_sst_file_sizes_on_db_open","","If true, then DB::Open() will not fetch and check sizes …",4,[[["bool",15]]]],[11,"set_max_write_buffer_size_to_maintain","","The total maximum size(bytes) of write buffers to …",4,[[["i64",15]]]],[11,"set_enable_pipelined_write","","By default, a single write thread queue is maintained. …",4,[[["bool",15]]]],[11,"set_memtable_factory","","Defines the underlying memtable implementation. See …",4,[[["memtablefactory",4]]]],[11,"set_block_based_table_factory","","",4,[[["blockbasedoptions",3]]]],[11,"set_plain_table_factory","","Sets the factory as plain table. See official wiki for …",4,[[["plaintablefactoryoptions",3]]]],[11,"set_min_level_to_compress","","Sets the start level to use compression.",4,[[["i32",15]]]],[11,"set_report_bg_io_stats","","Measure IO stats in compactions and flushes, if <code>true</code>.",4,[[["bool",15]]]],[11,"set_max_total_wal_size","","Once write-ahead logs exceed this size, we will start …",4,[[["u64",15]]]],[11,"set_wal_recovery_mode","","Recovery mode to control the consistency while replaying …",4,[[["dbrecoverymode",4]]]],[11,"enable_statistics","","",4,[[]]],[11,"get_statistics","","",4,[[],[["option",4],["string",3]]]],[11,"set_stats_dump_period_sec","","If not zero, dump <code>rocksdb.stats</code> to LOG every …",4,[[["u32",15]]]],[11,"set_advise_random_on_open","","When set to true, reading SST files will opt out of the …",4,[[["bool",15]]]],[11,"set_access_hint_on_compaction_start","","Specifies the file access pattern once a compaction is …",4,[[["accesshint",4]]]],[11,"set_use_adaptive_mutex","","Enable/disable adaptive mutex, which spins in the user …",4,[[["bool",15]]]],[11,"set_num_levels","","Sets the number of levels for this database.",4,[[["i32",15]]]],[11,"set_memtable_prefix_bloom_ratio","","When a <code>prefix_extractor</code> is defined through …",4,[[["f64",15]]]],[11,"set_max_compaction_bytes","","Sets the maximum number of bytes in all compacted files. …",4,[[["u64",15]]]],[11,"set_wal_dir","","Specifies the absolute path of the directory the …",4,[[]]],[11,"set_wal_ttl_seconds","","Sets the WAL ttl in seconds.",4,[[["u64",15]]]],[11,"set_wal_size_limit_mb","","Sets the WAL size limit in MB.",4,[[["u64",15]]]],[11,"set_manifest_preallocation_size","","Sets the number of bytes to preallocate (via fallocate) …",4,[[["usize",15]]]],[11,"set_purge_redundant_kvs_while_flush","","Enable/disable purging of duplicate/deleted keys when a …",4,[[["bool",15]]]],[11,"set_skip_stats_update_on_db_open","","If true, then DB::Open() will not update the statistics …",4,[[["bool",15]]]],[11,"set_keep_log_file_num","","Specify the maximal number of info log files to be kept.",4,[[["usize",15]]]],[11,"set_allow_mmap_writes","","Allow the OS to mmap file for writing.",4,[[["bool",15]]]],[11,"set_allow_mmap_reads","","Allow the OS to mmap file for reading sst tables.",4,[[["bool",15]]]],[11,"set_atomic_flush","","Guarantee that all column families are flushed together …",4,[[["bool",15]]]],[11,"set_row_cache","","Sets global cache for table-level rows. Cache must …",4,[[["cache",3]]]],[11,"set_ratelimiter","","Use to control write rate of flush and compaction. Flush …",4,[[["i64",15],["i32",15]]]],[11,"set_max_log_file_size","","Sets the maximal size of the info log file.",4,[[["usize",15]]]],[11,"set_log_file_time_to_roll","","Sets the time for the info log file to roll (in seconds).",4,[[["usize",15]]]],[11,"set_recycle_log_file_num","","Controls the recycling of log files.",4,[[["usize",15]]]],[11,"set_soft_rate_limit","","Sets the soft rate limit.",4,[[["f64",15]]]],[11,"set_hard_rate_limit","","Sets the hard rate limit.",4,[[["f64",15]]]],[11,"set_soft_pending_compaction_bytes_limit","","Sets the threshold at which all writes will be slowed …",4,[[["usize",15]]]],[11,"set_hard_pending_compaction_bytes_limit","","Sets the bytes threshold at which all writes are stopped …",4,[[["usize",15]]]],[11,"set_rate_limit_delay_max_milliseconds","","Sets the max time a put will be stalled when …",4,[[["u32",15]]]],[11,"set_arena_block_size","","Sets the size of one block in arena memory allocation.",4,[[["usize",15]]]],[11,"set_dump_malloc_stats","","If true, then print malloc stats together with …",4,[[["bool",15]]]],[11,"set_memtable_whole_key_filtering","","Enable whole key bloom filter in memtable. Note this will …",4,[[["bool",15]]]],[11,"len","","",5,[[],["usize",15]]],[11,"size_in_bytes","","Return WriteBatch serialized size (in bytes).",5,[[],["usize",15]]],[11,"is_empty","","",5,[[],["bool",15]]],[11,"iterate","","Iterate the put and delete operations within this write …",5,[[["writebatchiterator",8]]]],[11,"put","","Insert a value into the database under the given key.",5,[[]]],[11,"put_cf","","",5,[[["columnfamily",3]]]],[11,"merge","","",5,[[]]],[11,"merge_cf","","",5,[[["columnfamily",3]]]],[11,"delete","","Removes the database entry for key. Does nothing if the …",5,[[]]],[11,"delete_cf","","",5,[[["columnfamily",3]]]],[11,"delete_range","","Remove database entries from start key to end key.",5,[[]]],[11,"delete_range_cf","","Remove database entries in column family from start key …",5,[[["columnfamily",3]]]],[11,"clear","","Clear all updates buffered in this batch.",5,[[]]],[11,"open_default","","Opens a database with default options.",6,[[],[["db",3],["error",3],["result",4]]]],[11,"open","","Opens the database with the specified options.",6,[[["options",3]],[["db",3],["error",3],["result",4]]]],[11,"open_for_read_only","","Opens the database for read only with the specified …",6,[[["bool",15],["options",3]],[["db",3],["error",3],["result",4]]]],[11,"open_as_secondary","","Opens the database as a secondary.",6,[[["options",3]],[["db",3],["error",3],["result",4]]]],[11,"open_with_ttl","","Opens the database with a Time to Live compaction filter.",6,[[["options",3],["duration",3]],[["db",3],["error",3],["result",4]]]],[11,"open_cf","","Opens a database with the given database options and …",6,[[["options",3]],[["db",3],["error",3],["result",4]]]],[11,"open_cf_for_read_only","","Opens a database for read only with the given database …",6,[[["bool",15],["options",3]],[["db",3],["error",3],["result",4]]]],[11,"open_cf_as_secondary","","Opens the database as a secondary with the given database …",6,[[["options",3]],[["db",3],["error",3],["result",4]]]],[11,"open_cf_descriptors","","Opens a database with the given database options and …",6,[[["options",3]],[["db",3],["error",3],["result",4]]]],[11,"list_cf","","",6,[[["options",3]],[["vec",3],["error",3],["result",4]]]],[11,"destroy","","",6,[[["options",3]],[["error",3],["result",4]]]],[11,"repair","","",6,[[["options",3]],[["error",3],["result",4]]]],[11,"path","","",6,[[],["path",3]]],[11,"flush_opt","","Flushes database memtables to SST files on the disk.",6,[[["flushoptions",3]],[["error",3],["result",4]]]],[11,"flush","","Flushes database memtables to SST files on the disk using …",6,[[],[["error",3],["result",4]]]],[11,"flush_cf_opt","","Flushes database memtables to SST files on the disk for a …",6,[[["flushoptions",3],["columnfamily",3]],[["error",3],["result",4]]]],[11,"flush_cf","","Flushes database memtables to SST files on the disk for a …",6,[[["columnfamily",3]],[["error",3],["result",4]]]],[11,"write_opt","","",6,[[["writebatch",3],["writeoptions",3]],[["error",3],["result",4]]]],[11,"write","","",6,[[["writebatch",3]],[["error",3],["result",4]]]],[11,"write_without_wal","","",6,[[["writebatch",3]],[["error",3],["result",4]]]],[11,"get_opt","","Return the bytes associated with a key value with read …",6,[[["readoptions",3]],[["option",4],["result",4],["error",3]]]],[11,"get","","Return the bytes associated with a key value. If you only …",6,[[],[["option",4],["result",4],["error",3]]]],[11,"get_cf_opt","","Return the bytes associated with a key value and the …",6,[[["readoptions",3],["columnfamily",3]],[["option",4],["result",4],["error",3]]]],[11,"get_cf","","Return the bytes associated with a key value and the …",6,[[["columnfamily",3]],[["option",4],["result",4],["error",3]]]],[11,"get_pinned_opt","","Return the value associated with a key using RocksDB\'s …",6,[[["readoptions",3]],[["error",3],["result",4],["option",4]]]],[11,"get_pinned","","Return the value associated with a key using RocksDB\'s …",6,[[],[["error",3],["result",4],["option",4]]]],[11,"get_pinned_cf_opt","","Return the value associated with a key using RocksDB\'s …",6,[[["readoptions",3],["columnfamily",3]],[["error",3],["result",4],["option",4]]]],[11,"get_pinned_cf","","Return the value associated with a key using RocksDB\'s …",6,[[["columnfamily",3]],[["error",3],["result",4],["option",4]]]],[11,"create_cf","","",6,[[["options",3]],[["error",3],["result",4]]]],[11,"drop_cf","","",6,[[["str",15]],[["error",3],["result",4]]]],[11,"cf_handle","","Return the underlying column family handle.",6,[[["str",15]],[["option",4],["columnfamily",3]]]],[11,"iterator","","",6,[[["iteratormode",4]],["dbiterator",3]]],[11,"iterator_opt","","",6,[[["readoptions",3],["iteratormode",4]],["dbiterator",3]]],[11,"iterator_cf_opt","","Opens an iterator using the provided ReadOptions. This is …",6,[[["readoptions",3],["iteratormode",4],["columnfamily",3]],["dbiterator",3]]],[11,"full_iterator","","Opens an iterator with <code>set_total_order_seek</code> enabled. This …",6,[[["iteratormode",4]],["dbiterator",3]]],[11,"prefix_iterator","","",6,[[],["dbiterator",3]]],[11,"iterator_cf","","",6,[[["iteratormode",4],["columnfamily",3]],["dbiterator",3]]],[11,"full_iterator_cf","","",6,[[["iteratormode",4],["columnfamily",3]],["dbiterator",3]]],[11,"prefix_iterator_cf","","",6,[[["columnfamily",3]],["dbiterator",3]]],[11,"raw_iterator","","Opens a raw iterator over the database, using the default …",6,[[],["dbrawiterator",3]]],[11,"raw_iterator_cf","","Opens a raw iterator over the given column family, using …",6,[[["columnfamily",3]],["dbrawiterator",3]]],[11,"raw_iterator_opt","","Opens a raw iterator over the database, using the given …",6,[[["readoptions",3]],["dbrawiterator",3]]],[11,"raw_iterator_cf_opt","","Opens a raw iterator over the given column family, using …",6,[[["readoptions",3],["columnfamily",3]],["dbrawiterator",3]]],[11,"snapshot","","",6,[[],["snapshot",3]]],[11,"put_opt","","",6,[[["writeoptions",3]],[["error",3],["result",4]]]],[11,"put_cf_opt","","",6,[[["writeoptions",3],["columnfamily",3]],[["error",3],["result",4]]]],[11,"merge_opt","","",6,[[["writeoptions",3]],[["error",3],["result",4]]]],[11,"merge_cf_opt","","",6,[[["writeoptions",3],["columnfamily",3]],[["error",3],["result",4]]]],[11,"delete_opt","","",6,[[["writeoptions",3]],[["error",3],["result",4]]]],[11,"delete_cf_opt","","",6,[[["writeoptions",3],["columnfamily",3]],[["error",3],["result",4]]]],[11,"delete_range_cf_opt","","Removes the database entries in the range <code>[\\\"from\\\", \\\"to\\\")</code> …",6,[[["writeoptions",3],["columnfamily",3]],[["error",3],["result",4]]]],[11,"put","","",6,[[],[["error",3],["result",4]]]],[11,"put_cf","","",6,[[["columnfamily",3]],[["error",3],["result",4]]]],[11,"merge","","",6,[[],[["error",3],["result",4]]]],[11,"merge_cf","","",6,[[["columnfamily",3]],[["error",3],["result",4]]]],[11,"delete","","",6,[[],[["error",3],["result",4]]]],[11,"delete_cf","","",6,[[["columnfamily",3]],[["error",3],["result",4]]]],[11,"delete_range_cf","","Removes the database entries in the range <code>[\\\"from\\\", \\\"to\\\")</code> …",6,[[["columnfamily",3]],[["error",3],["result",4]]]],[11,"compact_range","","Runs a manual compaction on the Range of keys given. This …",6,[[["option",4],["option",4]]]],[11,"compact_range_opt","","Same as <code>compact_range</code> but with custom options.",6,[[["option",4],["option",4],["compactoptions",3]]]],[11,"compact_range_cf","","Runs a manual compaction on the Range of keys given on the…",6,[[["option",4],["option",4],["columnfamily",3]]]],[11,"compact_range_cf_opt","","Same as <code>compact_range_cf</code> but with custom options.",6,[[["option",4],["option",4],["compactoptions",3],["columnfamily",3]]]],[11,"set_options","","",6,[[],[["error",3],["result",4]]]],[11,"property_value","","Retrieves a RocksDB property by name.",6,[[["str",15]],[["result",4],["option",4],["error",3]]]],[11,"property_value_cf","","Retrieves a RocksDB property by name, for a specific …",6,[[["str",15],["columnfamily",3]],[["result",4],["option",4],["error",3]]]],[11,"property_int_value","","Retrieves a RocksDB property and casts it to an integer.",6,[[["str",15]],[["error",3],["option",4],["result",4]]]],[11,"property_int_value_cf","","Retrieves a RocksDB property for a specific column family …",6,[[["str",15],["columnfamily",3]],[["error",3],["option",4],["result",4]]]],[11,"latest_sequence_number","","The sequence number of the most recent transaction.",6,[[],["u64",15]]],[11,"get_updates_since","","Iterate over batches of write operations since a given …",6,[[["u64",15]],[["result",4],["dbwaliterator",3],["error",3]]]],[11,"try_catch_up_with_primary","","Tries to catch up with the primary by reading as much as …",6,[[],[["error",3],["result",4]]]],[11,"ingest_external_file","","Loads a list of external SST files created with …",6,[[["vec",3],["global",3]],[["error",3],["result",4]]]],[11,"ingest_external_file_opts","","Loads a list of external SST files created with …",6,[[["global",3],["ingestexternalfileoptions",3],["vec",3]],[["error",3],["result",4]]]],[11,"ingest_external_file_cf","","Loads a list of external SST files created with …",6,[[["global",3],["vec",3],["columnfamily",3]],[["error",3],["result",4]]]],[11,"ingest_external_file_cf_opts","","Loads a list of external SST files created with …",6,[[["columnfamily",3],["global",3],["vec",3],["ingestexternalfileoptions",3]],[["error",3],["result",4]]]],[11,"live_files","","Returns a list of all table files with their level, start …",6,[[],[["result",4],["error",3],["vec",3]]]],[11,"delete_file_in_range","","Delete sst files whose keys are entirely in the given …",6,[[],[["error",3],["result",4]]]],[11,"delete_file_in_range_cf","","Same as <code>delete_file_in_range</code> but only for specific column …",6,[[["columnfamily",3]],[["error",3],["result",4]]]]],"p":[[3,"RocksDb"],[4,"Error"],[8,"Store"],[3,"MemoryDB"],[3,"Options"],[3,"WriteBatch"],[3,"DB"]]},\
"forest_encoding":{"doc":"","i":[[0,"tuple","forest_encoding","",null,null],[24,"Deserialize_tuple","forest_encoding::tuple","",null,null],[24,"Serialize_tuple","","",null,null],[0,"repr","forest_encoding","",null,null],[24,"Deserialize_repr","forest_encoding::repr","",null,null],[24,"Serialize_repr","","",null,null],[0,"de","forest_encoding","Generic data structure deserialization framework.",null,null],[0,"value","forest_encoding::de","Building blocks for deserializing basic values using the …",null,null],[3,"Error","forest_encoding::de::value","A minimal representation of all possible errors that can …",null,null],[3,"UnitDeserializer","","A deserializer holding a <code>()</code>.",null,null],[3,"BoolDeserializer","","A deserializer holding a <code>bool</code>.",null,null],[3,"I8Deserializer","","A deserializer holding an <code>i8</code>.",null,null],[3,"I16Deserializer","","A deserializer holding an <code>i16</code>.",null,null],[3,"I32Deserializer","","A deserializer holding an <code>i32</code>.",null,null],[3,"I64Deserializer","","A deserializer holding an <code>i64</code>.",null,null],[3,"IsizeDeserializer","","A deserializer holding an <code>isize</code>.",null,null],[3,"U8Deserializer","","A deserializer holding a <code>u8</code>.",null,null],[3,"U16Deserializer","","A deserializer holding a <code>u16</code>.",null,null],[3,"U64Deserializer","","A deserializer holding a <code>u64</code>.",null,null],[3,"UsizeDeserializer","","A deserializer holding a <code>usize</code>.",null,null],[3,"F32Deserializer","","A deserializer holding an <code>f32</code>.",null,null],[3,"F64Deserializer","","A deserializer holding an <code>f64</code>.",null,null],[3,"CharDeserializer","","A deserializer holding a <code>char</code>.",null,null],[3,"I128Deserializer","","A deserializer holding an <code>i128</code>.",null,null],[3,"U128Deserializer","","A deserializer holding a <code>u128</code>.",null,null],[3,"U32Deserializer","","A deserializer holding a <code>u32</code>.",null,null],[3,"StrDeserializer","","A deserializer holding a <code>&str</code>.",null,null],[3,"BorrowedStrDeserializer","","A deserializer holding a <code>&str</code> with a lifetime tied to …",null,null],[3,"StringDeserializer","","A deserializer holding a <code>String</code>.",null,null],[3,"CowStrDeserializer","","A deserializer holding a <code>Cow<str></code>.",null,null],[3,"BorrowedBytesDeserializer","","A deserializer holding a <code>&[u8]</code> with a lifetime tied to …",null,null],[3,"SeqDeserializer","","A deserializer that iterates over a sequence.",null,null],[3,"SeqAccessDeserializer","","A deserializer holding a <code>SeqAccess</code>.",null,null],[3,"MapDeserializer","","A deserializer that iterates over a map.",null,null],[3,"MapAccessDeserializer","","A deserializer holding a <code>MapAccess</code>.",null,null],[8,"Error","forest_encoding::de","The <code>Error</code> trait allows <code>Deserialize</code> implementations to …",null,null],[10,"custom","","Raised when there is general error when deserializing a …",0,[[]]],[11,"invalid_type","","Raised when a <code>Deserialize</code> receives a type different from …",0,[[["expected",8],["unexpected",4]]]],[11,"invalid_value","","Raised when a <code>Deserialize</code> receives a value of the right …",0,[[["expected",8],["unexpected",4]]]],[11,"invalid_length","","Raised when deserializing a sequence or map and the input …",0,[[["usize",15],["expected",8]]]],[11,"unknown_variant","","Raised when a <code>Deserialize</code> enum type received a variant …",0,[[["str",15]]]],[11,"unknown_field","","Raised when a <code>Deserialize</code> struct type received a field …",0,[[["str",15]]]],[11,"missing_field","","Raised when a <code>Deserialize</code> struct type expected to receive …",0,[[["str",15]]]],[11,"duplicate_field","","Raised when a <code>Deserialize</code> struct type received more than …",0,[[["str",15]]]],[4,"Unexpected","","<code>Unexpected</code> represents an unexpected invocation of any one …",null,null],[13,"Bool","","The input contained a boolean value that was not expected.",1,null],[13,"Unsigned","","The input contained an unsigned integer <code>u8</code>, <code>u16</code>, <code>u32</code> or …",1,null],[13,"Signed","","The input contained a signed integer <code>i8</code>, <code>i16</code>, <code>i32</code> or <code>i64</code> …",1,null],[13,"Float","","The input contained a floating point <code>f32</code> or <code>f64</code> that was …",1,null],[13,"Char","","The input contained a <code>char</code> that was not expected.",1,null],[13,"Str","","The input contained a <code>&str</code> or <code>String</code> that was not …",1,null],[13,"Bytes","","The input contained a <code>&[u8]</code> or <code>Vec<u8></code> that was not …",1,null],[13,"Unit","","The input contained a unit <code>()</code> that was not expected.",1,null],[13,"Option","","The input contained an <code>Option<T></code> that was not expected.",1,null],[13,"NewtypeStruct","","The input contained a newtype struct that was not …",1,null],[13,"Seq","","The input contained a sequence that was not expected.",1,null],[13,"Map","","The input contained a map that was not expected.",1,null],[13,"Enum","","The input contained an enum that was not expected.",1,null],[13,"UnitVariant","","The input contained a unit variant that was not expected.",1,null],[13,"NewtypeVariant","","The input contained a newtype variant that was not …",1,null],[13,"TupleVariant","","The input contained a tuple variant that was not expected.",1,null],[13,"StructVariant","","The input contained a struct variant that was not …",1,null],[13,"Other","","A message stating what uncategorized thing the input …",1,null],[8,"Expected","","<code>Expected</code> represents an explanation of what data a <code>Visitor</code> …",null,null],[10,"fmt","","Format an explanation of what data was being expected. …",2,[[["formatter",3]],[["error",3],["result",4]]]],[8,"Deserialize","","A <strong>data structure</strong> that can be deserialized from any data …",null,null],[10,"deserialize","","Deserialize this value from the given Serde deserializer.",3,[[],["result",4]]],[8,"DeserializeOwned","","A data structure that can be deserialized without …",null,null],[8,"DeserializeSeed","","<code>DeserializeSeed</code> is the stateful form of the <code>Deserialize</code> …",null,null],[16,"Value","","The type produced by using this seed.",4,null],[10,"deserialize","","Equivalent to the more common <code>Deserialize::deserialize</code> …",4,[[],["result",4]]],[8,"Deserializer","","A <strong>data format</strong> that can deserialize any data structure …",null,null],[16,"Error","","The error type that can be returned if some error occurs …",5,null],[10,"deserialize_any","","Require the <code>Deserializer</code> to figure out how to drive the …",5,[[],["result",4]]],[10,"deserialize_bool","","Hint that the <code>Deserialize</code> type is expecting a <code>bool</code> value.",5,[[],["result",4]]],[10,"deserialize_i8","","Hint that the <code>Deserialize</code> type is expecting an <code>i8</code> value.",5,[[],["result",4]]],[10,"deserialize_i16","","Hint that the <code>Deserialize</code> type is expecting an <code>i16</code> value.",5,[[],["result",4]]],[10,"deserialize_i32","","Hint that the <code>Deserialize</code> type is expecting an <code>i32</code> value.",5,[[],["result",4]]],[10,"deserialize_i64","","Hint that the <code>Deserialize</code> type is expecting an <code>i64</code> value.",5,[[],["result",4]]],[11,"deserialize_i128","","Hint that the <code>Deserialize</code> type is expecting an <code>i128</code> value.",5,[[],["result",4]]],[10,"deserialize_u8","","Hint that the <code>Deserialize</code> type is expecting a <code>u8</code> value.",5,[[],["result",4]]],[10,"deserialize_u16","","Hint that the <code>Deserialize</code> type is expecting a <code>u16</code> value.",5,[[],["result",4]]],[10,"deserialize_u32","","Hint that the <code>Deserialize</code> type is expecting a <code>u32</code> value.",5,[[],["result",4]]],[10,"deserialize_u64","","Hint that the <code>Deserialize</code> type is expecting a <code>u64</code> value.",5,[[],["result",4]]],[11,"deserialize_u128","","Hint that the <code>Deserialize</code> type is expecting an <code>u128</code> value.",5,[[],["result",4]]],[10,"deserialize_f32","","Hint that the <code>Deserialize</code> type is expecting a <code>f32</code> value.",5,[[],["result",4]]],[10,"deserialize_f64","","Hint that the <code>Deserialize</code> type is expecting a <code>f64</code> value.",5,[[],["result",4]]],[10,"deserialize_char","","Hint that the <code>Deserialize</code> type is expecting a <code>char</code> value.",5,[[],["result",4]]],[10,"deserialize_str","","Hint that the <code>Deserialize</code> type is expecting a string …",5,[[],["result",4]]],[10,"deserialize_string","","Hint that the <code>Deserialize</code> type is expecting a string …",5,[[],["result",4]]],[10,"deserialize_bytes","","Hint that the <code>Deserialize</code> type is expecting a byte array …",5,[[],["result",4]]],[10,"deserialize_byte_buf","","Hint that the <code>Deserialize</code> type is expecting a byte array …",5,[[],["result",4]]],[10,"deserialize_option","","Hint that the <code>Deserialize</code> type is expecting an optional …",5,[[],["result",4]]],[10,"deserialize_unit","","Hint that the <code>Deserialize</code> type is expecting a unit value.",5,[[],["result",4]]],[10,"deserialize_unit_struct","","Hint that the <code>Deserialize</code> type is expecting a unit struct …",5,[[["str",15]],["result",4]]],[10,"deserialize_newtype_struct","","Hint that the <code>Deserialize</code> type is expecting a newtype …",5,[[["str",15]],["result",4]]],[10,"deserialize_seq","","Hint that the <code>Deserialize</code> type is expecting a sequence of …",5,[[],["result",4]]],[10,"deserialize_tuple","","Hint that the <code>Deserialize</code> type is expecting a sequence of …",5,[[["usize",15]],["result",4]]],[10,"deserialize_tuple_struct","","Hint that the <code>Deserialize</code> type is expecting a tuple …",5,[[["usize",15],["str",15]],["result",4]]],[10,"deserialize_map","","Hint that the <code>Deserialize</code> type is expecting a map of …",5,[[],["result",4]]],[10,"deserialize_struct","","Hint that the <code>Deserialize</code> type is expecting a struct with …",5,[[["str",15]],["result",4]]],[10,"deserialize_enum","","Hint that the <code>Deserialize</code> type is expecting an enum value …",5,[[["str",15]],["result",4]]],[10,"deserialize_identifier","","Hint that the <code>Deserialize</code> type is expecting the name of a …",5,[[],["result",4]]],[10,"deserialize_ignored_any","","Hint that the <code>Deserialize</code> type needs to deserialize a …",5,[[],["result",4]]],[11,"is_human_readable","","Determine whether <code>Deserialize</code> implementations should …",5,[[],["bool",15]]],[8,"Visitor","","This trait represents a visitor that walks through a …",null,null],[16,"Value","","The value produced by this visitor.",6,null],[10,"expecting","","Format a message stating what data this Visitor expects …",6,[[["formatter",3]],[["error",3],["result",4]]]],[11,"visit_bool","","The input contains a boolean.",6,[[["bool",15]],["result",4]]],[11,"visit_i8","","The input contains an <code>i8</code>.",6,[[["i8",15]],["result",4]]],[11,"visit_i16","","The input contains an <code>i16</code>.",6,[[["i16",15]],["result",4]]],[11,"visit_i32","","The input contains an <code>i32</code>.",6,[[["i32",15]],["result",4]]],[11,"visit_i64","","The input contains an <code>i64</code>.",6,[[["i64",15]],["result",4]]],[11,"visit_i128","","The input contains a <code>i128</code>.",6,[[["i128",15]],["result",4]]],[11,"visit_u8","","The input contains a <code>u8</code>.",6,[[["u8",15]],["result",4]]],[11,"visit_u16","","The input contains a <code>u16</code>.",6,[[["u16",15]],["result",4]]],[11,"visit_u32","","The input contains a <code>u32</code>.",6,[[["u32",15]],["result",4]]],[11,"visit_u64","","The input contains a <code>u64</code>.",6,[[["u64",15]],["result",4]]],[11,"visit_u128","","The input contains a <code>u128</code>.",6,[[["u128",15]],["result",4]]],[11,"visit_f32","","The input contains an <code>f32</code>.",6,[[["f32",15]],["result",4]]],[11,"visit_f64","","The input contains an <code>f64</code>.",6,[[["f64",15]],["result",4]]],[11,"visit_char","","The input contains a <code>char</code>.",6,[[["char",15]],["result",4]]],[11,"visit_str","","The input contains a string. The lifetime of the string …",6,[[["str",15]],["result",4]]],[11,"visit_borrowed_str","","The input contains a string that lives at least as long …",6,[[["str",15]],["result",4]]],[11,"visit_string","","The input contains a string and ownership of the string …",6,[[["string",3]],["result",4]]],[11,"visit_bytes","","The input contains a byte array. The lifetime of the byte …",6,[[],["result",4]]],[11,"visit_borrowed_bytes","","The input contains a byte array that lives at least as …",6,[[],["result",4]]],[11,"visit_byte_buf","","The input contains a byte array and ownership of the byte …",6,[[["vec",3],["global",3],["u8",15]],["result",4]]],[11,"visit_none","","The input contains an optional that is absent.",6,[[],["result",4]]],[11,"visit_some","","The input contains an optional that is present.",6,[[],["result",4]]],[11,"visit_unit","","The input contains a unit <code>()</code>.",6,[[],["result",4]]],[11,"visit_newtype_struct","","The input contains a newtype struct.",6,[[],["result",4]]],[11,"visit_seq","","The input contains a sequence of elements.",6,[[],["result",4]]],[11,"visit_map","","The input contains a key-value map.",6,[[],["result",4]]],[11,"visit_enum","","The input contains an enum.",6,[[],["result",4]]],[8,"SeqAccess","","Provides a <code>Visitor</code> access to each element of a sequence …",null,null],[16,"Error","","The error type that can be returned if some error occurs …",7,null],[10,"next_element_seed","","This returns <code>Ok(Some(value))</code> for the next value in the …",7,[[],[["option",4],["result",4]]]],[11,"next_element","","This returns <code>Ok(Some(value))</code> for the next value in the …",7,[[],[["option",4],["result",4]]]],[11,"size_hint","","Returns the number of elements remaining in the sequence, …",7,[[],[["usize",15],["option",4]]]],[8,"MapAccess","","Provides a <code>Visitor</code> access to each entry of a map in the …",null,null],[16,"Error","","The error type that can be returned if some error occurs …",8,null],[10,"next_key_seed","","This returns <code>Ok(Some(key))</code> for the next key in the map, …",8,[[],[["result",4],["option",4]]]],[10,"next_value_seed","","This returns a <code>Ok(value)</code> for the next value in the map.",8,[[],["result",4]]],[11,"next_entry_seed","","This returns <code>Ok(Some((key, value)))</code> for the next …",8,[[],[["result",4],["option",4]]]],[11,"next_key","","This returns <code>Ok(Some(key))</code> for the next key in the map, …",8,[[],[["result",4],["option",4]]]],[11,"next_value","","This returns a <code>Ok(value)</code> for the next value in the map.",8,[[],["result",4]]],[11,"next_entry","","This returns <code>Ok(Some((key, value)))</code> for the next …",8,[[],[["option",4],["result",4]]]],[11,"size_hint","","Returns the number of entries remaining in the map, if …",8,[[],[["usize",15],["option",4]]]],[8,"EnumAccess","","Provides a <code>Visitor</code> access to the data of an enum in the …",null,null],[16,"Error","","The error type that can be returned if some error occurs …",9,null],[16,"Variant","","The <code>Visitor</code> that will be used to deserialize the content …",9,null],[10,"variant_seed","","<code>variant</code> is called to identify which variant to …",9,[[],["result",4]]],[11,"variant","","<code>variant</code> is called to identify which variant to …",9,[[],["result",4]]],[8,"VariantAccess","","<code>VariantAccess</code> is a visitor that is created by the …",null,null],[16,"Error","","The error type that can be returned if some error occurs …",10,null],[10,"unit_variant","","Called when deserializing a variant with no values.",10,[[],["result",4]]],[10,"newtype_variant_seed","","Called when deserializing a variant with a single value.",10,[[],["result",4]]],[11,"newtype_variant","","Called when deserializing a variant with a single value.",10,[[],["result",4]]],[10,"tuple_variant","","Called when deserializing a tuple-like variant.",10,[[["usize",15]],["result",4]]],[10,"struct_variant","","Called when deserializing a struct-like variant.",10,[[],["result",4]]],[8,"IntoDeserializer","","Converts an existing value into a <code>Deserializer</code> from which …",null,null],[16,"Deserializer","","The type of the deserializer being converted into.",11,null],[10,"into_deserializer","","Convert this value into a deserializer.",11,[[]]],[3,"IgnoredAny","","An efficient way of discarding data from a deserializer.",null,null],[8,"StdError","","<code>Error</code> is a trait representing the basic expectations for …",null,null],[11,"source","","The lower-level source of this error, if any.",12,[[],[["option",4],["error",8]]]],[11,"backtrace","","Returns a stack backtrace, if available, of where this …",12,[[],[["backtrace",3],["option",4]]]],[11,"description","","",12,[[],["str",15]]],[11,"cause","","",12,[[],[["option",4],["error",8]]]],[0,"ser","forest_encoding","Generic data structure serialization framework.",null,null],[8,"Error","forest_encoding::ser","Trait used by <code>Serialize</code> implementations to generically …",null,null],[10,"custom","","Used when a <code>Serialize</code> implementation encounters any error …",13,[[]]],[8,"Serialize","","A <strong>data structure</strong> that can be serialized into any data …",null,null],[10,"serialize","","Serialize this value into the given Serde serializer.",14,[[],["result",4]]],[8,"Serializer","","A <strong>data format</strong> that can serialize any data structure …",null,null],[16,"Ok","","The output type produced by this <code>Serializer</code> during …",15,null],[16,"Error","","The error type when some error occurs during …",15,null],[16,"SerializeSeq","","Type returned from <code>serialize_seq</code> for serializing the …",15,null],[16,"SerializeTuple","","Type returned from <code>serialize_tuple</code> for serializing the …",15,null],[16,"SerializeTupleStruct","","Type returned from <code>serialize_tuple_struct</code> for serializing …",15,null],[16,"SerializeTupleVariant","","Type returned from <code>serialize_tuple_variant</code> for …",15,null],[16,"SerializeMap","","Type returned from <code>serialize_map</code> for serializing the …",15,null],[16,"SerializeStruct","","Type returned from <code>serialize_struct</code> for serializing the …",15,null],[16,"SerializeStructVariant","","Type returned from <code>serialize_struct_variant</code> for …",15,null],[10,"serialize_bool","","Serialize a <code>bool</code> value.",15,[[["bool",15]],["result",4]]],[10,"serialize_i8","","Serialize an <code>i8</code> value.",15,[[["i8",15]],["result",4]]],[10,"serialize_i16","","Serialize an <code>i16</code> value.",15,[[["i16",15]],["result",4]]],[10,"serialize_i32","","Serialize an <code>i32</code> value.",15,[[["i32",15]],["result",4]]],[10,"serialize_i64","","Serialize an <code>i64</code> value.",15,[[["i64",15]],["result",4]]],[11,"serialize_i128","","Serialize an <code>i128</code> value.",15,[[["i128",15]],["result",4]]],[10,"serialize_u8","","Serialize a <code>u8</code> value.",15,[[["u8",15]],["result",4]]],[10,"serialize_u16","","Serialize a <code>u16</code> value.",15,[[["u16",15]],["result",4]]],[10,"serialize_u32","","Serialize a <code>u32</code> value.",15,[[["u32",15]],["result",4]]],[10,"serialize_u64","","Serialize a <code>u64</code> value.",15,[[["u64",15]],["result",4]]],[11,"serialize_u128","","Serialize a <code>u128</code> value.",15,[[["u128",15]],["result",4]]],[10,"serialize_f32","","Serialize an <code>f32</code> value.",15,[[["f32",15]],["result",4]]],[10,"serialize_f64","","Serialize an <code>f64</code> value.",15,[[["f64",15]],["result",4]]],[10,"serialize_char","","Serialize a character.",15,[[["char",15]],["result",4]]],[10,"serialize_str","","Serialize a <code>&str</code>.",15,[[["str",15]],["result",4]]],[10,"serialize_bytes","","Serialize a chunk of raw byte data.",15,[[],["result",4]]],[10,"serialize_none","","Serialize a <code>None</code> value.",15,[[],["result",4]]],[10,"serialize_some","","Serialize a <code>Some(T)</code> value.",15,[[],["result",4]]],[10,"serialize_unit","","Serialize a <code>()</code> value.",15,[[],["result",4]]],[10,"serialize_unit_struct","","Serialize a unit struct like <code>struct Unit</code> or <code>PhantomData<T></code>…",15,[[["str",15]],["result",4]]],[10,"serialize_unit_variant","","Serialize a unit variant like <code>E::A</code> in <code>enum E { A, B }</code>.",15,[[["u32",15],["str",15]],["result",4]]],[10,"serialize_newtype_struct","","Serialize a newtype struct like <code>struct Millimeters(u8)</code>.",15,[[["str",15]],["result",4]]],[10,"serialize_newtype_variant","","Serialize a newtype variant like <code>E::N</code> in <code>enum E { N(u8) }</code>.",15,[[["u32",15],["str",15]],["result",4]]],[10,"serialize_seq","","Begin to serialize a variably sized sequence. This call …",15,[[["usize",15],["option",4]],["result",4]]],[10,"serialize_tuple","","Begin to serialize a statically sized sequence whose …",15,[[["usize",15]],["result",4]]],[10,"serialize_tuple_struct","","Begin to serialize a tuple struct like …",15,[[["usize",15],["str",15]],["result",4]]],[10,"serialize_tuple_variant","","Begin to serialize a tuple variant like <code>E::T</code> in …",15,[[["u32",15],["str",15],["usize",15]],["result",4]]],[10,"serialize_map","","Begin to serialize a map. This call must be followed by …",15,[[["usize",15],["option",4]],["result",4]]],[10,"serialize_struct","","Begin to serialize a struct like …",15,[[["usize",15],["str",15]],["result",4]]],[10,"serialize_struct_variant","","Begin to serialize a struct variant like <code>E::S</code> in …",15,[[["u32",15],["str",15],["usize",15]],["result",4]]],[11,"collect_seq","","Collect an iterator as a sequence.",15,[[],["result",4]]],[11,"collect_map","","Collect an iterator as a map.",15,[[],["result",4]]],[11,"collect_str","","Serialize a string produced by an implementation of …",15,[[],["result",4]]],[11,"is_human_readable","","Determine whether <code>Serialize</code> implementations should …",15,[[],["bool",15]]],[8,"SerializeSeq","","Returned from <code>Serializer::serialize_seq</code>.",null,null],[16,"Ok","","Must match the <code>Ok</code> type of our <code>Serializer</code>.",16,null],[16,"Error","","Must match the <code>Error</code> type of our <code>Serializer</code>.",16,null],[10,"serialize_element","","Serialize a sequence element.",16,[[],["result",4]]],[10,"end","","Finish serializing a sequence.",16,[[],["result",4]]],[8,"SerializeTuple","","Returned from <code>Serializer::serialize_tuple</code>.",null,null],[16,"Ok","","Must match the <code>Ok</code> type of our <code>Serializer</code>.",17,null],[16,"Error","","Must match the <code>Error</code> type of our <code>Serializer</code>.",17,null],[10,"serialize_element","","Serialize a tuple element.",17,[[],["result",4]]],[10,"end","","Finish serializing a tuple.",17,[[],["result",4]]],[8,"SerializeTupleStruct","","Returned from <code>Serializer::serialize_tuple_struct</code>.",null,null],[16,"Ok","","Must match the <code>Ok</code> type of our <code>Serializer</code>.",18,null],[16,"Error","","Must match the <code>Error</code> type of our <code>Serializer</code>.",18,null],[10,"serialize_field","","Serialize a tuple struct field.",18,[[],["result",4]]],[10,"end","","Finish serializing a tuple struct.",18,[[],["result",4]]],[8,"SerializeTupleVariant","","Returned from <code>Serializer::serialize_tuple_variant</code>.",null,null],[16,"Ok","","Must match the <code>Ok</code> type of our <code>Serializer</code>.",19,null],[16,"Error","","Must match the <code>Error</code> type of our <code>Serializer</code>.",19,null],[10,"serialize_field","","Serialize a tuple variant field.",19,[[],["result",4]]],[10,"end","","Finish serializing a tuple variant.",19,[[],["result",4]]],[8,"SerializeMap","","Returned from <code>Serializer::serialize_map</code>.",null,null],[16,"Ok","","Must match the <code>Ok</code> type of our <code>Serializer</code>.",20,null],[16,"Error","","Must match the <code>Error</code> type of our <code>Serializer</code>.",20,null],[10,"serialize_key","","Serialize a map key.",20,[[],["result",4]]],[10,"serialize_value","","Serialize a map value.",20,[[],["result",4]]],[11,"serialize_entry","","Serialize a map entry consisting of a key and a value.",20,[[],["result",4]]],[10,"end","","Finish serializing a map.",20,[[],["result",4]]],[8,"SerializeStruct","","Returned from <code>Serializer::serialize_struct</code>.",null,null],[16,"Ok","","Must match the <code>Ok</code> type of our <code>Serializer</code>.",21,null],[16,"Error","","Must match the <code>Error</code> type of our <code>Serializer</code>.",21,null],[10,"serialize_field","","Serialize a struct field.",21,[[["str",15]],["result",4]]],[11,"skip_field","","Indicate that a struct field has been skipped.",21,[[["str",15]],["result",4]]],[10,"end","","Finish serializing a struct.",21,[[],["result",4]]],[8,"SerializeStructVariant","","Returned from <code>Serializer::serialize_struct_variant</code>.",null,null],[16,"Ok","","Must match the <code>Ok</code> type of our <code>Serializer</code>.",22,null],[16,"Error","","Must match the <code>Error</code> type of our <code>Serializer</code>.",22,null],[10,"serialize_field","","Serialize a struct variant field.",22,[[["str",15]],["result",4]]],[11,"skip_field","","Indicate that a struct variant field has been skipped.",22,[[["str",15]],["result",4]]],[10,"end","","Finish serializing a struct variant.",22,[[],["result",4]]],[3,"Impossible","","Helper type for implementing a <code>Serializer</code> that does not …",null,null],[8,"StdError","","<code>Error</code> is a trait representing the basic expectations for …",null,null],[11,"source","","The lower-level source of this error, if any.",12,[[],[["option",4],["error",8]]]],[11,"backtrace","","Returns a stack backtrace, if available, of where this …",12,[[],[["backtrace",3],["option",4]]]],[11,"description","","",12,[[],["str",15]]],[11,"cause","","",12,[[],[["option",4],["error",8]]]],[0,"error","forest_encoding","When serializing or deserializing CBOR goes wrong.",null,null],[3,"Error","forest_encoding::error","This type represents all possible errors that can occur …",null,null],[6,"Result","","Alias for a <code>Result</code> with the error type <code>serde_cbor::Error</code>.",null,null],[4,"Category","","Categorizes the cause of a <code>serde_cbor::Error</code>.",null,null],[13,"Io","","The error was caused by a failure to read or write bytes …",23,null],[13,"Syntax","","The error was caused by input that was not syntactically …",23,null],[13,"Data","","The error was caused by input data that was semantically …",23,null],[13,"Eof","","The error was caused by prematurely reaching the end of …",23,null],[5,"from_reader","forest_encoding","Decodes a value from CBOR data in a reader.",null,[[],[["result",4],["error",3]]]],[5,"from_slice","","Decodes a value from CBOR data in a slice.",null,[[],[["result",4],["error",3]]]],[0,"tags","","Support for cbor tags",null,null],[3,"Tagged","forest_encoding::tags","A value that is optionally tagged with a cbor tag",null,null],[12,"tag","","cbor tag",24,null],[12,"value","","value",24,null],[5,"current_cbor_tag","","function to get the current cbor tag",null,[[],[["option",4],["u64",15]]]],[5,"to_vec","forest_encoding","Serializes a value to a vector.",null,[[],[["vec",3],["error",3],["result",4]]]],[5,"to_writer","","Serializes a value to a writer.",null,[[],[["error",3],["result",4]]]],[3,"BytesSer","","Wrapper for serializing slice of bytes.",null,null],[12,"0","","",25,null],[3,"BytesDe","","Wrapper for deserializing dynamic sized Bytes.",null,null],[12,"0","","",26,null],[3,"Byte32De","","Wrapper for deserializing array of 32 Bytes.",null,null],[12,"0","","",27,null],[8,"Cbor","","Cbor utility functions for serializable objects",null,null],[11,"marshal_cbor","","Marshalls cbor encodable object into cbor bytes",28,[[],[["error",3],["result",4],["vec",3]]]],[11,"unmarshal_cbor","","Unmarshals cbor encoded bytes to object",28,[[],[["result",4],["error",3]]]],[11,"cid","","Returns the content identifier of the raw block of data …",28,[[],[["cid",3],["error",3],["result",4]]]],[3,"Error","","Error type for encoding and decoding data through any …",null,null],[12,"description","","",29,null],[12,"protocol","","",29,null],[4,"CodecProtocol","","CodecProtocol defines the protocol in which the data is …",null,null],[13,"Cbor","","",30,null],[5,"blake2b_variable","","Generates blake2b hash with provided size.",null,[[["usize",15]],[["vec",3],["u8",15]]]],[5,"blake2b_256","","Generates blake2b hash of fixed 32 bytes size.",null,[[]]],[11,"from","","",25,[[]]],[11,"into","","",25,[[]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"from","","",26,[[]]],[11,"into","","",26,[[]]],[11,"to_owned","","",26,[[]]],[11,"clone_into","","",26,[[]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"from","","",27,[[]]],[11,"into","","",27,[[]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"from","","",29,[[]]],[11,"into","","",29,[[]]],[11,"to_string","","",29,[[],["string",3]]],[11,"borrow","","",29,[[]]],[11,"borrow_mut","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"try_into","","",29,[[],["result",4]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"from","","",30,[[]]],[11,"into","","",30,[[]]],[11,"to_string","","",30,[[],["string",3]]],[11,"borrow","","",30,[[]]],[11,"borrow_mut","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"try_into","","",30,[[],["result",4]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"from","forest_encoding::de::value","",31,[[]]],[11,"into","","",31,[[]]],[11,"to_owned","","",31,[[]]],[11,"clone_into","","",31,[[]]],[11,"to_string","","",31,[[],["string",3]]],[11,"borrow","","",31,[[]]],[11,"borrow_mut","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"try_into","","",31,[[],["result",4]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"from","","",32,[[]]],[11,"into","","",32,[[]]],[11,"to_owned","","",32,[[]]],[11,"clone_into","","",32,[[]]],[11,"borrow","","",32,[[]]],[11,"borrow_mut","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"try_into","","",32,[[],["result",4]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"from","","",33,[[]]],[11,"into","","",33,[[]]],[11,"to_owned","","",33,[[]]],[11,"clone_into","","",33,[[]]],[11,"borrow","","",33,[[]]],[11,"borrow_mut","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"try_into","","",33,[[],["result",4]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"from","","",34,[[]]],[11,"into","","",34,[[]]],[11,"to_owned","","",34,[[]]],[11,"clone_into","","",34,[[]]],[11,"borrow","","",34,[[]]],[11,"borrow_mut","","",34,[[]]],[11,"try_from","","",34,[[],["result",4]]],[11,"try_into","","",34,[[],["result",4]]],[11,"type_id","","",34,[[],["typeid",3]]],[11,"from","","",35,[[]]],[11,"into","","",35,[[]]],[11,"to_owned","","",35,[[]]],[11,"clone_into","","",35,[[]]],[11,"borrow","","",35,[[]]],[11,"borrow_mut","","",35,[[]]],[11,"try_from","","",35,[[],["result",4]]],[11,"try_into","","",35,[[],["result",4]]],[11,"type_id","","",35,[[],["typeid",3]]],[11,"from","","",36,[[]]],[11,"into","","",36,[[]]],[11,"to_owned","","",36,[[]]],[11,"clone_into","","",36,[[]]],[11,"borrow","","",36,[[]]],[11,"borrow_mut","","",36,[[]]],[11,"try_from","","",36,[[],["result",4]]],[11,"try_into","","",36,[[],["result",4]]],[11,"type_id","","",36,[[],["typeid",3]]],[11,"from","","",37,[[]]],[11,"into","","",37,[[]]],[11,"to_owned","","",37,[[]]],[11,"clone_into","","",37,[[]]],[11,"borrow","","",37,[[]]],[11,"borrow_mut","","",37,[[]]],[11,"try_from","","",37,[[],["result",4]]],[11,"try_into","","",37,[[],["result",4]]],[11,"type_id","","",37,[[],["typeid",3]]],[11,"from","","",38,[[]]],[11,"into","","",38,[[]]],[11,"to_owned","","",38,[[]]],[11,"clone_into","","",38,[[]]],[11,"borrow","","",38,[[]]],[11,"borrow_mut","","",38,[[]]],[11,"try_from","","",38,[[],["result",4]]],[11,"try_into","","",38,[[],["result",4]]],[11,"type_id","","",38,[[],["typeid",3]]],[11,"from","","",39,[[]]],[11,"into","","",39,[[]]],[11,"to_owned","","",39,[[]]],[11,"clone_into","","",39,[[]]],[11,"borrow","","",39,[[]]],[11,"borrow_mut","","",39,[[]]],[11,"try_from","","",39,[[],["result",4]]],[11,"try_into","","",39,[[],["result",4]]],[11,"type_id","","",39,[[],["typeid",3]]],[11,"from","","",40,[[]]],[11,"into","","",40,[[]]],[11,"to_owned","","",40,[[]]],[11,"clone_into","","",40,[[]]],[11,"borrow","","",40,[[]]],[11,"borrow_mut","","",40,[[]]],[11,"try_from","","",40,[[],["result",4]]],[11,"try_into","","",40,[[],["result",4]]],[11,"type_id","","",40,[[],["typeid",3]]],[11,"from","","",41,[[]]],[11,"into","","",41,[[]]],[11,"to_owned","","",41,[[]]],[11,"clone_into","","",41,[[]]],[11,"borrow","","",41,[[]]],[11,"borrow_mut","","",41,[[]]],[11,"try_from","","",41,[[],["result",4]]],[11,"try_into","","",41,[[],["result",4]]],[11,"type_id","","",41,[[],["typeid",3]]],[11,"from","","",42,[[]]],[11,"into","","",42,[[]]],[11,"to_owned","","",42,[[]]],[11,"clone_into","","",42,[[]]],[11,"borrow","","",42,[[]]],[11,"borrow_mut","","",42,[[]]],[11,"try_from","","",42,[[],["result",4]]],[11,"try_into","","",42,[[],["result",4]]],[11,"type_id","","",42,[[],["typeid",3]]],[11,"from","","",43,[[]]],[11,"into","","",43,[[]]],[11,"to_owned","","",43,[[]]],[11,"clone_into","","",43,[[]]],[11,"borrow","","",43,[[]]],[11,"borrow_mut","","",43,[[]]],[11,"try_from","","",43,[[],["result",4]]],[11,"try_into","","",43,[[],["result",4]]],[11,"type_id","","",43,[[],["typeid",3]]],[11,"from","","",44,[[]]],[11,"into","","",44,[[]]],[11,"to_owned","","",44,[[]]],[11,"clone_into","","",44,[[]]],[11,"borrow","","",44,[[]]],[11,"borrow_mut","","",44,[[]]],[11,"try_from","","",44,[[],["result",4]]],[11,"try_into","","",44,[[],["result",4]]],[11,"type_id","","",44,[[],["typeid",3]]],[11,"from","","",45,[[]]],[11,"into","","",45,[[]]],[11,"to_owned","","",45,[[]]],[11,"clone_into","","",45,[[]]],[11,"borrow","","",45,[[]]],[11,"borrow_mut","","",45,[[]]],[11,"try_from","","",45,[[],["result",4]]],[11,"try_into","","",45,[[],["result",4]]],[11,"type_id","","",45,[[],["typeid",3]]],[11,"from","","",46,[[]]],[11,"into","","",46,[[]]],[11,"to_owned","","",46,[[]]],[11,"clone_into","","",46,[[]]],[11,"borrow","","",46,[[]]],[11,"borrow_mut","","",46,[[]]],[11,"try_from","","",46,[[],["result",4]]],[11,"try_into","","",46,[[],["result",4]]],[11,"type_id","","",46,[[],["typeid",3]]],[11,"from","","",47,[[]]],[11,"into","","",47,[[]]],[11,"to_owned","","",47,[[]]],[11,"clone_into","","",47,[[]]],[11,"borrow","","",47,[[]]],[11,"borrow_mut","","",47,[[]]],[11,"try_from","","",47,[[],["result",4]]],[11,"try_into","","",47,[[],["result",4]]],[11,"type_id","","",47,[[],["typeid",3]]],[11,"from","","",48,[[]]],[11,"into","","",48,[[]]],[11,"to_owned","","",48,[[]]],[11,"clone_into","","",48,[[]]],[11,"borrow","","",48,[[]]],[11,"borrow_mut","","",48,[[]]],[11,"try_from","","",48,[[],["result",4]]],[11,"try_into","","",48,[[],["result",4]]],[11,"type_id","","",48,[[],["typeid",3]]],[11,"from","","",49,[[]]],[11,"into","","",49,[[]]],[11,"to_owned","","",49,[[]]],[11,"clone_into","","",49,[[]]],[11,"borrow","","",49,[[]]],[11,"borrow_mut","","",49,[[]]],[11,"try_from","","",49,[[],["result",4]]],[11,"try_into","","",49,[[],["result",4]]],[11,"type_id","","",49,[[],["typeid",3]]],[11,"from","","",50,[[]]],[11,"into","","",50,[[]]],[11,"to_owned","","",50,[[]]],[11,"clone_into","","",50,[[]]],[11,"borrow","","",50,[[]]],[11,"borrow_mut","","",50,[[]]],[11,"try_from","","",50,[[],["result",4]]],[11,"try_into","","",50,[[],["result",4]]],[11,"type_id","","",50,[[],["typeid",3]]],[11,"from","","",51,[[]]],[11,"into","","",51,[[]]],[11,"to_owned","","",51,[[]]],[11,"clone_into","","",51,[[]]],[11,"borrow","","",51,[[]]],[11,"borrow_mut","","",51,[[]]],[11,"try_from","","",51,[[],["result",4]]],[11,"try_into","","",51,[[],["result",4]]],[11,"type_id","","",51,[[],["typeid",3]]],[11,"from","","",52,[[]]],[11,"into","","",52,[[]]],[11,"to_owned","","",52,[[]]],[11,"clone_into","","",52,[[]]],[11,"borrow","","",52,[[]]],[11,"borrow_mut","","",52,[[]]],[11,"try_from","","",52,[[],["result",4]]],[11,"try_into","","",52,[[],["result",4]]],[11,"type_id","","",52,[[],["typeid",3]]],[11,"from","","",53,[[]]],[11,"into","","",53,[[]]],[11,"to_owned","","",53,[[]]],[11,"clone_into","","",53,[[]]],[11,"borrow","","",53,[[]]],[11,"borrow_mut","","",53,[[]]],[11,"try_from","","",53,[[],["result",4]]],[11,"try_into","","",53,[[],["result",4]]],[11,"type_id","","",53,[[],["typeid",3]]],[11,"from","","",54,[[]]],[11,"into","","",54,[[]]],[11,"to_owned","","",54,[[]]],[11,"clone_into","","",54,[[]]],[11,"borrow","","",54,[[]]],[11,"borrow_mut","","",54,[[]]],[11,"try_from","","",54,[[],["result",4]]],[11,"try_into","","",54,[[],["result",4]]],[11,"type_id","","",54,[[],["typeid",3]]],[11,"from","","",55,[[]]],[11,"into","","",55,[[]]],[11,"to_owned","","",55,[[]]],[11,"clone_into","","",55,[[]]],[11,"borrow","","",55,[[]]],[11,"borrow_mut","","",55,[[]]],[11,"try_from","","",55,[[],["result",4]]],[11,"try_into","","",55,[[],["result",4]]],[11,"type_id","","",55,[[],["typeid",3]]],[11,"from","","",56,[[]]],[11,"into","","",56,[[]]],[11,"to_owned","","",56,[[]]],[11,"clone_into","","",56,[[]]],[11,"borrow","","",56,[[]]],[11,"borrow_mut","","",56,[[]]],[11,"try_from","","",56,[[],["result",4]]],[11,"try_into","","",56,[[],["result",4]]],[11,"type_id","","",56,[[],["typeid",3]]],[11,"from","","",57,[[]]],[11,"into","","",57,[[]]],[11,"to_owned","","",57,[[]]],[11,"clone_into","","",57,[[]]],[11,"borrow","","",57,[[]]],[11,"borrow_mut","","",57,[[]]],[11,"try_from","","",57,[[],["result",4]]],[11,"try_into","","",57,[[],["result",4]]],[11,"type_id","","",57,[[],["typeid",3]]],[11,"from","forest_encoding::de","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"to_string","","",1,[[],["string",3]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",58,[[]]],[11,"into","","",58,[[]]],[11,"to_owned","","",58,[[]]],[11,"clone_into","","",58,[[]]],[11,"borrow","","",58,[[]]],[11,"borrow_mut","","",58,[[]]],[11,"try_from","","",58,[[],["result",4]]],[11,"try_into","","",58,[[],["result",4]]],[11,"type_id","","",58,[[],["typeid",3]]],[11,"fmt","","",58,[[["formatter",3]],[["error",3],["result",4]]]],[11,"from","forest_encoding::ser","",59,[[]]],[11,"into","","",59,[[]]],[11,"borrow","","",59,[[]]],[11,"borrow_mut","","",59,[[]]],[11,"try_from","","",59,[[],["result",4]]],[11,"try_into","","",59,[[],["result",4]]],[11,"type_id","","",59,[[],["typeid",3]]],[11,"from","forest_encoding::error","",60,[[]]],[11,"into","","",60,[[]]],[11,"to_string","","",60,[[],["string",3]]],[11,"borrow","","",60,[[]]],[11,"borrow_mut","","",60,[[]]],[11,"try_from","","",60,[[],["result",4]]],[11,"try_into","","",60,[[],["result",4]]],[11,"type_id","","",60,[[],["typeid",3]]],[11,"from","","",23,[[]]],[11,"into","","",23,[[]]],[11,"to_owned","","",23,[[]]],[11,"clone_into","","",23,[[]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"from","forest_encoding::tags","",24,[[]]],[11,"into","","",24,[[]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"serialize_field","forest_encoding::ser","",59,[[["str",15]],["result",4]]],[11,"end","","",59,[[],["result",4]]],[11,"fmt","forest_encoding::de","",1,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","forest_encoding::de::value","",44,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",33,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",54,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",53,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",55,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",39,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",38,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",56,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",41,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","forest_encoding::de","",58,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","forest_encoding::de::value","",57,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",40,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",46,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",42,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",37,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",35,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",49,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",34,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",47,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",50,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",36,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",43,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",52,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",45,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",51,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",31,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",48,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",32,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",31,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","forest_encoding::de","",1,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",2,[[["formatter",3]],[["error",3],["result",4]]]],[11,"next_key_seed","forest_encoding::de::value","",56,[[],[["option",4],["result",4]]]],[11,"next_value_seed","","",56,[[],["result",4]]],[11,"next_entry_seed","","",56,[[],[["option",4],["result",4]]]],[11,"size_hint","","",56,[[],[["usize",15],["option",4]]]],[11,"serialize_field","forest_encoding::ser","",59,[[["str",15]],["result",4]]],[11,"end","","",59,[[],["result",4]]],[11,"next_element_seed","forest_encoding::de::value","",56,[[],[["option",4],["result",4]]]],[11,"size_hint","","",56,[[],[["usize",15],["option",4]]]],[11,"next_element_seed","","",54,[[],[["option",4],["result",4]]]],[11,"size_hint","","",54,[[],[["usize",15],["option",4]]]],[11,"default","forest_encoding::de","",58,[[],["ignoredany",3]]],[11,"clone","forest_encoding::de::value","",31,[[],["error",3]]],[11,"clone","","",55,[[],["seqaccessdeserializer",3]]],[11,"clone","","",43,[[],["f32deserializer",3]]],[11,"clone","","",47,[[],["u128deserializer",3]]],[11,"clone","","",45,[[],["chardeserializer",3]]],[11,"clone","","",52,[[],["cowstrdeserializer",3]]],[11,"clone","","",48,[[],["u32deserializer",3]]],[11,"clone","","",36,[[],["i32deserializer",3]]],[11,"clone","","",41,[[],["u64deserializer",3]]],[11,"clone","forest_encoding::de","",58,[[],["ignoredany",3]]],[11,"clone","forest_encoding::de::value","",49,[[],["strdeserializer",3]]],[11,"clone","","",42,[[],["usizedeserializer",3]]],[11,"clone","","",33,[[],["booldeserializer",3]]],[11,"clone","forest_encoding::de","",1,[[],["unexpected",4]]],[11,"clone","forest_encoding::de::value","",53,[[],["borrowedbytesdeserializer",3]]],[11,"clone","","",51,[[],["stringdeserializer",3]]],[11,"clone","","",46,[[],["i128deserializer",3]]],[11,"clone","","",54,[[],["seqdeserializer",3]]],[11,"clone","","",39,[[],["u8deserializer",3]]],[11,"clone","","",40,[[],["u16deserializer",3]]],[11,"clone","","",34,[[],["i8deserializer",3]]],[11,"clone","","",37,[[],["i64deserializer",3]]],[11,"clone","","",35,[[],["i16deserializer",3]]],[11,"clone","","",56,[[],["mapdeserializer",3]]],[11,"clone","","",44,[[],["f64deserializer",3]]],[11,"clone","","",38,[[],["isizedeserializer",3]]],[11,"clone","","",57,[[],["mapaccessdeserializer",3]]],[11,"clone","","",50,[[],["borrowedstrdeserializer",3]]],[11,"clone","","",32,[[],["unitdeserializer",3]]],[11,"deserialize","forest_encoding::de","",58,[[],[["result",4],["ignoredany",3]]]],[11,"serialize_key","forest_encoding::ser","",59,[[],["result",4]]],[11,"serialize_value","","",59,[[],["result",4]]],[11,"end","","",59,[[],["result",4]]],[11,"serialize_field","","",59,[[],["result",4]]],[11,"end","","",59,[[],["result",4]]],[11,"serialize_field","","",59,[[],["result",4]]],[11,"end","","",59,[[],["result",4]]],[11,"serialize_element","","",59,[[],["result",4]]],[11,"end","","",59,[[],["result",4]]],[11,"serialize_element","","",59,[[],["result",4]]],[11,"end","","",59,[[],["result",4]]],[11,"deserialize_bool","forest_encoding::de::value","",47,[[],["result",4]]],[11,"deserialize_i8","","",47,[[],["result",4]]],[11,"deserialize_i16","","",47,[[],["result",4]]],[11,"deserialize_i32","","",47,[[],["result",4]]],[11,"deserialize_i64","","",47,[[],["result",4]]],[11,"deserialize_i128","","",47,[[],["result",4]]],[11,"deserialize_u8","","",47,[[],["result",4]]],[11,"deserialize_u16","","",47,[[],["result",4]]],[11,"deserialize_u32","","",47,[[],["result",4]]],[11,"deserialize_u64","","",47,[[],["result",4]]],[11,"deserialize_u128","","",47,[[],["result",4]]],[11,"deserialize_f32","","",47,[[],["result",4]]],[11,"deserialize_f64","","",47,[[],["result",4]]],[11,"deserialize_char","","",47,[[],["result",4]]],[11,"deserialize_str","","",47,[[],["result",4]]],[11,"deserialize_string","","",47,[[],["result",4]]],[11,"deserialize_bytes","","",47,[[],["result",4]]],[11,"deserialize_byte_buf","","",47,[[],["result",4]]],[11,"deserialize_option","","",47,[[],["result",4]]],[11,"deserialize_unit","","",47,[[],["result",4]]],[11,"deserialize_unit_struct","","",47,[[["str",15]],["result",4]]],[11,"deserialize_newtype_struct","","",47,[[["str",15]],["result",4]]],[11,"deserialize_seq","","",47,[[],["result",4]]],[11,"deserialize_tuple","","",47,[[["usize",15]],["result",4]]],[11,"deserialize_tuple_struct","","",47,[[["usize",15],["str",15]],["result",4]]],[11,"deserialize_map","","",47,[[],["result",4]]],[11,"deserialize_struct","","",47,[[["str",15]],["result",4]]],[11,"deserialize_enum","","",47,[[["str",15]],["result",4]]],[11,"deserialize_identifier","","",47,[[],["result",4]]],[11,"deserialize_ignored_any","","",47,[[],["result",4]]],[11,"deserialize_any","","",47,[[],["result",4]]],[11,"deserialize_any","","",55,[[],["result",4]]],[11,"deserialize_bool","","",55,[[],["result",4]]],[11,"deserialize_i8","","",55,[[],["result",4]]],[11,"deserialize_i16","","",55,[[],["result",4]]],[11,"deserialize_i32","","",55,[[],["result",4]]],[11,"deserialize_i64","","",55,[[],["result",4]]],[11,"deserialize_i128","","",55,[[],["result",4]]],[11,"deserialize_u8","","",55,[[],["result",4]]],[11,"deserialize_u16","","",55,[[],["result",4]]],[11,"deserialize_u32","","",55,[[],["result",4]]],[11,"deserialize_u64","","",55,[[],["result",4]]],[11,"deserialize_u128","","",55,[[],["result",4]]],[11,"deserialize_f32","","",55,[[],["result",4]]],[11,"deserialize_f64","","",55,[[],["result",4]]],[11,"deserialize_char","","",55,[[],["result",4]]],[11,"deserialize_str","","",55,[[],["result",4]]],[11,"deserialize_string","","",55,[[],["result",4]]],[11,"deserialize_bytes","","",55,[[],["result",4]]],[11,"deserialize_byte_buf","","",55,[[],["result",4]]],[11,"deserialize_option","","",55,[[],["result",4]]],[11,"deserialize_unit","","",55,[[],["result",4]]],[11,"deserialize_unit_struct","","",55,[[["str",15]],["result",4]]],[11,"deserialize_newtype_struct","","",55,[[["str",15]],["result",4]]],[11,"deserialize_seq","","",55,[[],["result",4]]],[11,"deserialize_tuple","","",55,[[["usize",15]],["result",4]]],[11,"deserialize_tuple_struct","","",55,[[["usize",15],["str",15]],["result",4]]],[11,"deserialize_map","","",55,[[],["result",4]]],[11,"deserialize_struct","","",55,[[["str",15]],["result",4]]],[11,"deserialize_enum","","",55,[[["str",15]],["result",4]]],[11,"deserialize_identifier","","",55,[[],["result",4]]],[11,"deserialize_ignored_any","","",55,[[],["result",4]]],[11,"deserialize_bool","","",38,[[],["result",4]]],[11,"deserialize_i8","","",38,[[],["result",4]]],[11,"deserialize_i16","","",38,[[],["result",4]]],[11,"deserialize_i32","","",38,[[],["result",4]]],[11,"deserialize_i64","","",38,[[],["result",4]]],[11,"deserialize_i128","","",38,[[],["result",4]]],[11,"deserialize_u8","","",38,[[],["result",4]]],[11,"deserialize_u16","","",38,[[],["result",4]]],[11,"deserialize_u32","","",38,[[],["result",4]]],[11,"deserialize_u64","","",38,[[],["result",4]]],[11,"deserialize_u128","","",38,[[],["result",4]]],[11,"deserialize_f32","","",38,[[],["result",4]]],[11,"deserialize_f64","","",38,[[],["result",4]]],[11,"deserialize_char","","",38,[[],["result",4]]],[11,"deserialize_str","","",38,[[],["result",4]]],[11,"deserialize_string","","",38,[[],["result",4]]],[11,"deserialize_bytes","","",38,[[],["result",4]]],[11,"deserialize_byte_buf","","",38,[[],["result",4]]],[11,"deserialize_option","","",38,[[],["result",4]]],[11,"deserialize_unit","","",38,[[],["result",4]]],[11,"deserialize_unit_struct","","",38,[[["str",15]],["result",4]]],[11,"deserialize_newtype_struct","","",38,[[["str",15]],["result",4]]],[11,"deserialize_seq","","",38,[[],["result",4]]],[11,"deserialize_tuple","","",38,[[["usize",15]],["result",4]]],[11,"deserialize_tuple_struct","","",38,[[["usize",15],["str",15]],["result",4]]],[11,"deserialize_map","","",38,[[],["result",4]]],[11,"deserialize_struct","","",38,[[["str",15]],["result",4]]],[11,"deserialize_enum","","",38,[[["str",15]],["result",4]]],[11,"deserialize_identifier","","",38,[[],["result",4]]],[11,"deserialize_ignored_any","","",38,[[],["result",4]]],[11,"deserialize_any","","",38,[[],["result",4]]],[11,"deserialize_any","","",49,[[],["result",4]]],[11,"deserialize_enum","","",49,[[["str",15]],["result",4]]],[11,"deserialize_bool","","",49,[[],["result",4]]],[11,"deserialize_i8","","",49,[[],["result",4]]],[11,"deserialize_i16","","",49,[[],["result",4]]],[11,"deserialize_i32","","",49,[[],["result",4]]],[11,"deserialize_i64","","",49,[[],["result",4]]],[11,"deserialize_i128","","",49,[[],["result",4]]],[11,"deserialize_u8","","",49,[[],["result",4]]],[11,"deserialize_u16","","",49,[[],["result",4]]],[11,"deserialize_u32","","",49,[[],["result",4]]],[11,"deserialize_u64","","",49,[[],["result",4]]],[11,"deserialize_u128","","",49,[[],["result",4]]],[11,"deserialize_f32","","",49,[[],["result",4]]],[11,"deserialize_f64","","",49,[[],["result",4]]],[11,"deserialize_char","","",49,[[],["result",4]]],[11,"deserialize_str","","",49,[[],["result",4]]],[11,"deserialize_string","","",49,[[],["result",4]]],[11,"deserialize_bytes","","",49,[[],["result",4]]],[11,"deserialize_byte_buf","","",49,[[],["result",4]]],[11,"deserialize_option","","",49,[[],["result",4]]],[11,"deserialize_unit","","",49,[[],["result",4]]],[11,"deserialize_unit_struct","","",49,[[["str",15]],["result",4]]],[11,"deserialize_newtype_struct","","",49,[[["str",15]],["result",4]]],[11,"deserialize_seq","","",49,[[],["result",4]]],[11,"deserialize_tuple","","",49,[[["usize",15]],["result",4]]],[11,"deserialize_tuple_struct","","",49,[[["usize",15],["str",15]],["result",4]]],[11,"deserialize_map","","",49,[[],["result",4]]],[11,"deserialize_struct","","",49,[[["str",15]],["result",4]]],[11,"deserialize_identifier","","",49,[[],["result",4]]],[11,"deserialize_ignored_any","","",49,[[],["result",4]]],[11,"deserialize_bool","","",44,[[],["result",4]]],[11,"deserialize_i8","","",44,[[],["result",4]]],[11,"deserialize_i16","","",44,[[],["result",4]]],[11,"deserialize_i32","","",44,[[],["result",4]]],[11,"deserialize_i64","","",44,[[],["result",4]]],[11,"deserialize_i128","","",44,[[],["result",4]]],[11,"deserialize_u8","","",44,[[],["result",4]]],[11,"deserialize_u16","","",44,[[],["result",4]]],[11,"deserialize_u32","","",44,[[],["result",4]]],[11,"deserialize_u64","","",44,[[],["result",4]]],[11,"deserialize_u128","","",44,[[],["result",4]]],[11,"deserialize_f32","","",44,[[],["result",4]]],[11,"deserialize_f64","","",44,[[],["result",4]]],[11,"deserialize_char","","",44,[[],["result",4]]],[11,"deserialize_str","","",44,[[],["result",4]]],[11,"deserialize_string","","",44,[[],["result",4]]],[11,"deserialize_bytes","","",44,[[],["result",4]]],[11,"deserialize_byte_buf","","",44,[[],["result",4]]],[11,"deserialize_option","","",44,[[],["result",4]]],[11,"deserialize_unit","","",44,[[],["result",4]]],[11,"deserialize_unit_struct","","",44,[[["str",15]],["result",4]]],[11,"deserialize_newtype_struct","","",44,[[["str",15]],["result",4]]],[11,"deserialize_seq","","",44,[[],["result",4]]],[11,"deserialize_tuple","","",44,[[["usize",15]],["result",4]]],[11,"deserialize_tuple_struct","","",44,[[["usize",15],["str",15]],["result",4]]],[11,"deserialize_map","","",44,[[],["result",4]]],[11,"deserialize_struct","","",44,[[["str",15]],["result",4]]],[11,"deserialize_enum","","",44,[[["str",15]],["result",4]]],[11,"deserialize_identifier","","",44,[[],["result",4]]],[11,"deserialize_ignored_any","","",44,[[],["result",4]]],[11,"deserialize_any","","",44,[[],["result",4]]],[11,"deserialize_bool","","",41,[[],["result",4]]],[11,"deserialize_i8","","",41,[[],["result",4]]],[11,"deserialize_i16","","",41,[[],["result",4]]],[11,"deserialize_i32","","",41,[[],["result",4]]],[11,"deserialize_i64","","",41,[[],["result",4]]],[11,"deserialize_i128","","",41,[[],["result",4]]],[11,"deserialize_u8","","",41,[[],["result",4]]],[11,"deserialize_u16","","",41,[[],["result",4]]],[11,"deserialize_u32","","",41,[[],["result",4]]],[11,"deserialize_u64","","",41,[[],["result",4]]],[11,"deserialize_u128","","",41,[[],["result",4]]],[11,"deserialize_f32","","",41,[[],["result",4]]],[11,"deserialize_f64","","",41,[[],["result",4]]],[11,"deserialize_char","","",41,[[],["result",4]]],[11,"deserialize_str","","",41,[[],["result",4]]],[11,"deserialize_string","","",41,[[],["result",4]]],[11,"deserialize_bytes","","",41,[[],["result",4]]],[11,"deserialize_byte_buf","","",41,[[],["result",4]]],[11,"deserialize_option","","",41,[[],["result",4]]],[11,"deserialize_unit","","",41,[[],["result",4]]],[11,"deserialize_unit_struct","","",41,[[["str",15]],["result",4]]],[11,"deserialize_newtype_struct","","",41,[[["str",15]],["result",4]]],[11,"deserialize_seq","","",41,[[],["result",4]]],[11,"deserialize_tuple","","",41,[[["usize",15]],["result",4]]],[11,"deserialize_tuple_struct","","",41,[[["usize",15],["str",15]],["result",4]]],[11,"deserialize_map","","",41,[[],["result",4]]],[11,"deserialize_struct","","",41,[[["str",15]],["result",4]]],[11,"deserialize_enum","","",41,[[["str",15]],["result",4]]],[11,"deserialize_identifier","","",41,[[],["result",4]]],[11,"deserialize_ignored_any","","",41,[[],["result",4]]],[11,"deserialize_any","","",41,[[],["result",4]]],[11,"deserialize_bool","","",39,[[],["result",4]]],[11,"deserialize_i8","","",39,[[],["result",4]]],[11,"deserialize_i16","","",39,[[],["result",4]]],[11,"deserialize_i32","","",39,[[],["result",4]]],[11,"deserialize_i64","","",39,[[],["result",4]]],[11,"deserialize_i128","","",39,[[],["result",4]]],[11,"deserialize_u8","","",39,[[],["result",4]]],[11,"deserialize_u16","","",39,[[],["result",4]]],[11,"deserialize_u32","","",39,[[],["result",4]]],[11,"deserialize_u64","","",39,[[],["result",4]]],[11,"deserialize_u128","","",39,[[],["result",4]]],[11,"deserialize_f32","","",39,[[],["result",4]]],[11,"deserialize_f64","","",39,[[],["result",4]]],[11,"deserialize_char","","",39,[[],["result",4]]],[11,"deserialize_str","","",39,[[],["result",4]]],[11,"deserialize_string","","",39,[[],["result",4]]],[11,"deserialize_bytes","","",39,[[],["result",4]]],[11,"deserialize_byte_buf","","",39,[[],["result",4]]],[11,"deserialize_option","","",39,[[],["result",4]]],[11,"deserialize_unit","","",39,[[],["result",4]]],[11,"deserialize_unit_struct","","",39,[[["str",15]],["result",4]]],[11,"deserialize_newtype_struct","","",39,[[["str",15]],["result",4]]],[11,"deserialize_seq","","",39,[[],["result",4]]],[11,"deserialize_tuple","","",39,[[["usize",15]],["result",4]]],[11,"deserialize_tuple_struct","","",39,[[["usize",15],["str",15]],["result",4]]],[11,"deserialize_map","","",39,[[],["result",4]]],[11,"deserialize_struct","","",39,[[["str",15]],["result",4]]],[11,"deserialize_enum","","",39,[[["str",15]],["result",4]]],[11,"deserialize_identifier","","",39,[[],["result",4]]],[11,"deserialize_ignored_any","","",39,[[],["result",4]]],[11,"deserialize_any","","",39,[[],["result",4]]],[11,"deserialize_bool","","",48,[[],["result",4]]],[11,"deserialize_i8","","",48,[[],["result",4]]],[11,"deserialize_i16","","",48,[[],["result",4]]],[11,"deserialize_i32","","",48,[[],["result",4]]],[11,"deserialize_i64","","",48,[[],["result",4]]],[11,"deserialize_i128","","",48,[[],["result",4]]],[11,"deserialize_u8","","",48,[[],["result",4]]],[11,"deserialize_u16","","",48,[[],["result",4]]],[11,"deserialize_u32","","",48,[[],["result",4]]],[11,"deserialize_u64","","",48,[[],["result",4]]],[11,"deserialize_u128","","",48,[[],["result",4]]],[11,"deserialize_f32","","",48,[[],["result",4]]],[11,"deserialize_f64","","",48,[[],["result",4]]],[11,"deserialize_char","","",48,[[],["result",4]]],[11,"deserialize_str","","",48,[[],["result",4]]],[11,"deserialize_string","","",48,[[],["result",4]]],[11,"deserialize_bytes","","",48,[[],["result",4]]],[11,"deserialize_byte_buf","","",48,[[],["result",4]]],[11,"deserialize_option","","",48,[[],["result",4]]],[11,"deserialize_unit","","",48,[[],["result",4]]],[11,"deserialize_unit_struct","","",48,[[["str",15]],["result",4]]],[11,"deserialize_newtype_struct","","",48,[[["str",15]],["result",4]]],[11,"deserialize_seq","","",48,[[],["result",4]]],[11,"deserialize_tuple","","",48,[[["usize",15]],["result",4]]],[11,"deserialize_tuple_struct","","",48,[[["usize",15],["str",15]],["result",4]]],[11,"deserialize_map","","",48,[[],["result",4]]],[11,"deserialize_struct","","",48,[[["str",15]],["result",4]]],[11,"deserialize_identifier","","",48,[[],["result",4]]],[11,"deserialize_ignored_any","","",48,[[],["result",4]]],[11,"deserialize_any","","",48,[[],["result",4]]],[11,"deserialize_enum","","",48,[[["str",15]],["result",4]]],[11,"deserialize_bool","","",40,[[],["result",4]]],[11,"deserialize_i8","","",40,[[],["result",4]]],[11,"deserialize_i16","","",40,[[],["result",4]]],[11,"deserialize_i32","","",40,[[],["result",4]]],[11,"deserialize_i64","","",40,[[],["result",4]]],[11,"deserialize_i128","","",40,[[],["result",4]]],[11,"deserialize_u8","","",40,[[],["result",4]]],[11,"deserialize_u16","","",40,[[],["result",4]]],[11,"deserialize_u32","","",40,[[],["result",4]]],[11,"deserialize_u64","","",40,[[],["result",4]]],[11,"deserialize_u128","","",40,[[],["result",4]]],[11,"deserialize_f32","","",40,[[],["result",4]]],[11,"deserialize_f64","","",40,[[],["result",4]]],[11,"deserialize_char","","",40,[[],["result",4]]],[11,"deserialize_str","","",40,[[],["result",4]]],[11,"deserialize_string","","",40,[[],["result",4]]],[11,"deserialize_bytes","","",40,[[],["result",4]]],[11,"deserialize_byte_buf","","",40,[[],["result",4]]],[11,"deserialize_option","","",40,[[],["result",4]]],[11,"deserialize_unit","","",40,[[],["result",4]]],[11,"deserialize_unit_struct","","",40,[[["str",15]],["result",4]]],[11,"deserialize_newtype_struct","","",40,[[["str",15]],["result",4]]],[11,"deserialize_seq","","",40,[[],["result",4]]],[11,"deserialize_tuple","","",40,[[["usize",15]],["result",4]]],[11,"deserialize_tuple_struct","","",40,[[["usize",15],["str",15]],["result",4]]],[11,"deserialize_map","","",40,[[],["result",4]]],[11,"deserialize_struct","","",40,[[["str",15]],["result",4]]],[11,"deserialize_enum","","",40,[[["str",15]],["result",4]]],[11,"deserialize_identifier","","",40,[[],["result",4]]],[11,"deserialize_ignored_any","","",40,[[],["result",4]]],[11,"deserialize_any","","",40,[[],["result",4]]],[11,"deserialize_bool","","",35,[[],["result",4]]],[11,"deserialize_i8","","",35,[[],["result",4]]],[11,"deserialize_i16","","",35,[[],["result",4]]],[11,"deserialize_i32","","",35,[[],["result",4]]],[11,"deserialize_i64","","",35,[[],["result",4]]],[11,"deserialize_i128","","",35,[[],["result",4]]],[11,"deserialize_u8","","",35,[[],["result",4]]],[11,"deserialize_u16","","",35,[[],["result",4]]],[11,"deserialize_u32","","",35,[[],["result",4]]],[11,"deserialize_u64","","",35,[[],["result",4]]],[11,"deserialize_u128","","",35,[[],["result",4]]],[11,"deserialize_f32","","",35,[[],["result",4]]],[11,"deserialize_f64","","",35,[[],["result",4]]],[11,"deserialize_char","","",35,[[],["result",4]]],[11,"deserialize_str","","",35,[[],["result",4]]],[11,"deserialize_string","","",35,[[],["result",4]]],[11,"deserialize_bytes","","",35,[[],["result",4]]],[11,"deserialize_byte_buf","","",35,[[],["result",4]]],[11,"deserialize_option","","",35,[[],["result",4]]],[11,"deserialize_unit","","",35,[[],["result",4]]],[11,"deserialize_unit_struct","","",35,[[["str",15]],["result",4]]],[11,"deserialize_newtype_struct","","",35,[[["str",15]],["result",4]]],[11,"deserialize_seq","","",35,[[],["result",4]]],[11,"deserialize_tuple","","",35,[[["usize",15]],["result",4]]],[11,"deserialize_tuple_struct","","",35,[[["usize",15],["str",15]],["result",4]]],[11,"deserialize_map","","",35,[[],["result",4]]],[11,"deserialize_struct","","",35,[[["str",15]],["result",4]]],[11,"deserialize_enum","","",35,[[["str",15]],["result",4]]],[11,"deserialize_identifier","","",35,[[],["result",4]]],[11,"deserialize_ignored_any","","",35,[[],["result",4]]],[11,"deserialize_any","","",35,[[],["result",4]]],[11,"deserialize_bool","","",33,[[],["result",4]]],[11,"deserialize_i8","","",33,[[],["result",4]]],[11,"deserialize_i16","","",33,[[],["result",4]]],[11,"deserialize_i32","","",33,[[],["result",4]]],[11,"deserialize_i64","","",33,[[],["result",4]]],[11,"deserialize_i128","","",33,[[],["result",4]]],[11,"deserialize_u8","","",33,[[],["result",4]]],[11,"deserialize_u16","","",33,[[],["result",4]]],[11,"deserialize_u32","","",33,[[],["result",4]]],[11,"deserialize_u64","","",33,[[],["result",4]]],[11,"deserialize_u128","","",33,[[],["result",4]]],[11,"deserialize_f32","","",33,[[],["result",4]]],[11,"deserialize_f64","","",33,[[],["result",4]]],[11,"deserialize_char","","",33,[[],["result",4]]],[11,"deserialize_str","","",33,[[],["result",4]]],[11,"deserialize_string","","",33,[[],["result",4]]],[11,"deserialize_bytes","","",33,[[],["result",4]]],[11,"deserialize_byte_buf","","",33,[[],["result",4]]],[11,"deserialize_option","","",33,[[],["result",4]]],[11,"deserialize_unit","","",33,[[],["result",4]]],[11,"deserialize_unit_struct","","",33,[[["str",15]],["result",4]]],[11,"deserialize_newtype_struct","","",33,[[["str",15]],["result",4]]],[11,"deserialize_seq","","",33,[[],["result",4]]],[11,"deserialize_tuple","","",33,[[["usize",15]],["result",4]]],[11,"deserialize_tuple_struct","","",33,[[["usize",15],["str",15]],["result",4]]],[11,"deserialize_map","","",33,[[],["result",4]]],[11,"deserialize_struct","","",33,[[["str",15]],["result",4]]],[11,"deserialize_enum","","",33,[[["str",15]],["result",4]]],[11,"deserialize_identifier","","",33,[[],["result",4]]],[11,"deserialize_ignored_any","","",33,[[],["result",4]]],[11,"deserialize_any","","",33,[[],["result",4]]],[11,"deserialize_bool","","",46,[[],["result",4]]],[11,"deserialize_i8","","",46,[[],["result",4]]],[11,"deserialize_i16","","",46,[[],["result",4]]],[11,"deserialize_i32","","",46,[[],["result",4]]],[11,"deserialize_i64","","",46,[[],["result",4]]],[11,"deserialize_i128","","",46,[[],["result",4]]],[11,"deserialize_u8","","",46,[[],["result",4]]],[11,"deserialize_u16","","",46,[[],["result",4]]],[11,"deserialize_u32","","",46,[[],["result",4]]],[11,"deserialize_u64","","",46,[[],["result",4]]],[11,"deserialize_u128","","",46,[[],["result",4]]],[11,"deserialize_f32","","",46,[[],["result",4]]],[11,"deserialize_f64","","",46,[[],["result",4]]],[11,"deserialize_char","","",46,[[],["result",4]]],[11,"deserialize_str","","",46,[[],["result",4]]],[11,"deserialize_string","","",46,[[],["result",4]]],[11,"deserialize_bytes","","",46,[[],["result",4]]],[11,"deserialize_byte_buf","","",46,[[],["result",4]]],[11,"deserialize_option","","",46,[[],["result",4]]],[11,"deserialize_unit","","",46,[[],["result",4]]],[11,"deserialize_unit_struct","","",46,[[["str",15]],["result",4]]],[11,"deserialize_newtype_struct","","",46,[[["str",15]],["result",4]]],[11,"deserialize_seq","","",46,[[],["result",4]]],[11,"deserialize_tuple","","",46,[[["usize",15]],["result",4]]],[11,"deserialize_tuple_struct","","",46,[[["usize",15],["str",15]],["result",4]]],[11,"deserialize_map","","",46,[[],["result",4]]],[11,"deserialize_struct","","",46,[[["str",15]],["result",4]]],[11,"deserialize_enum","","",46,[[["str",15]],["result",4]]],[11,"deserialize_identifier","","",46,[[],["result",4]]],[11,"deserialize_ignored_any","","",46,[[],["result",4]]],[11,"deserialize_any","","",46,[[],["result",4]]],[11,"deserialize_bool","","",34,[[],["result",4]]],[11,"deserialize_i8","","",34,[[],["result",4]]],[11,"deserialize_i16","","",34,[[],["result",4]]],[11,"deserialize_i32","","",34,[[],["result",4]]],[11,"deserialize_i64","","",34,[[],["result",4]]],[11,"deserialize_i128","","",34,[[],["result",4]]],[11,"deserialize_u8","","",34,[[],["result",4]]],[11,"deserialize_u16","","",34,[[],["result",4]]],[11,"deserialize_u32","","",34,[[],["result",4]]],[11,"deserialize_u64","","",34,[[],["result",4]]],[11,"deserialize_u128","","",34,[[],["result",4]]],[11,"deserialize_f32","","",34,[[],["result",4]]],[11,"deserialize_f64","","",34,[[],["result",4]]],[11,"deserialize_char","","",34,[[],["result",4]]],[11,"deserialize_str","","",34,[[],["result",4]]],[11,"deserialize_string","","",34,[[],["result",4]]],[11,"deserialize_bytes","","",34,[[],["result",4]]],[11,"deserialize_byte_buf","","",34,[[],["result",4]]],[11,"deserialize_option","","",34,[[],["result",4]]],[11,"deserialize_unit","","",34,[[],["result",4]]],[11,"deserialize_unit_struct","","",34,[[["str",15]],["result",4]]],[11,"deserialize_newtype_struct","","",34,[[["str",15]],["result",4]]],[11,"deserialize_seq","","",34,[[],["result",4]]],[11,"deserialize_tuple","","",34,[[["usize",15]],["result",4]]],[11,"deserialize_tuple_struct","","",34,[[["usize",15],["str",15]],["result",4]]],[11,"deserialize_map","","",34,[[],["result",4]]],[11,"deserialize_struct","","",34,[[["str",15]],["result",4]]],[11,"deserialize_enum","","",34,[[["str",15]],["result",4]]],[11,"deserialize_identifier","","",34,[[],["result",4]]],[11,"deserialize_ignored_any","","",34,[[],["result",4]]],[11,"deserialize_any","","",34,[[],["result",4]]],[11,"deserialize_any","","",56,[[],["result",4]]],[11,"deserialize_seq","","",56,[[],["result",4]]],[11,"deserialize_tuple","","",56,[[["usize",15]],["result",4]]],[11,"deserialize_bool","","",56,[[],["result",4]]],[11,"deserialize_i8","","",56,[[],["result",4]]],[11,"deserialize_i16","","",56,[[],["result",4]]],[11,"deserialize_i32","","",56,[[],["result",4]]],[11,"deserialize_i64","","",56,[[],["result",4]]],[11,"deserialize_i128","","",56,[[],["result",4]]],[11,"deserialize_u8","","",56,[[],["result",4]]],[11,"deserialize_u16","","",56,[[],["result",4]]],[11,"deserialize_u32","","",56,[[],["result",4]]],[11,"deserialize_u64","","",56,[[],["result",4]]],[11,"deserialize_u128","","",56,[[],["result",4]]],[11,"deserialize_f32","","",56,[[],["result",4]]],[11,"deserialize_f64","","",56,[[],["result",4]]],[11,"deserialize_char","","",56,[[],["result",4]]],[11,"deserialize_str","","",56,[[],["result",4]]],[11,"deserialize_string","","",56,[[],["result",4]]],[11,"deserialize_bytes","","",56,[[],["result",4]]],[11,"deserialize_byte_buf","","",56,[[],["result",4]]],[11,"deserialize_option","","",56,[[],["result",4]]],[11,"deserialize_unit","","",56,[[],["result",4]]],[11,"deserialize_unit_struct","","",56,[[["str",15]],["result",4]]],[11,"deserialize_newtype_struct","","",56,[[["str",15]],["result",4]]],[11,"deserialize_tuple_struct","","",56,[[["usize",15],["str",15]],["result",4]]],[11,"deserialize_map","","",56,[[],["result",4]]],[11,"deserialize_struct","","",56,[[["str",15]],["result",4]]],[11,"deserialize_enum","","",56,[[["str",15]],["result",4]]],[11,"deserialize_identifier","","",56,[[],["result",4]]],[11,"deserialize_ignored_any","","",56,[[],["result",4]]],[11,"deserialize_bool","","",36,[[],["result",4]]],[11,"deserialize_i8","","",36,[[],["result",4]]],[11,"deserialize_i16","","",36,[[],["result",4]]],[11,"deserialize_i32","","",36,[[],["result",4]]],[11,"deserialize_i64","","",36,[[],["result",4]]],[11,"deserialize_i128","","",36,[[],["result",4]]],[11,"deserialize_u8","","",36,[[],["result",4]]],[11,"deserialize_u16","","",36,[[],["result",4]]],[11,"deserialize_u32","","",36,[[],["result",4]]],[11,"deserialize_u64","","",36,[[],["result",4]]],[11,"deserialize_u128","","",36,[[],["result",4]]],[11,"deserialize_f32","","",36,[[],["result",4]]],[11,"deserialize_f64","","",36,[[],["result",4]]],[11,"deserialize_char","","",36,[[],["result",4]]],[11,"deserialize_str","","",36,[[],["result",4]]],[11,"deserialize_string","","",36,[[],["result",4]]],[11,"deserialize_bytes","","",36,[[],["result",4]]],[11,"deserialize_byte_buf","","",36,[[],["result",4]]],[11,"deserialize_option","","",36,[[],["result",4]]],[11,"deserialize_unit","","",36,[[],["result",4]]],[11,"deserialize_unit_struct","","",36,[[["str",15]],["result",4]]],[11,"deserialize_newtype_struct","","",36,[[["str",15]],["result",4]]],[11,"deserialize_seq","","",36,[[],["result",4]]],[11,"deserialize_tuple","","",36,[[["usize",15]],["result",4]]],[11,"deserialize_tuple_struct","","",36,[[["usize",15],["str",15]],["result",4]]],[11,"deserialize_map","","",36,[[],["result",4]]],[11,"deserialize_struct","","",36,[[["str",15]],["result",4]]],[11,"deserialize_enum","","",36,[[["str",15]],["result",4]]],[11,"deserialize_identifier","","",36,[[],["result",4]]],[11,"deserialize_ignored_any","","",36,[[],["result",4]]],[11,"deserialize_any","","",36,[[],["result",4]]],[11,"deserialize_bool","","",43,[[],["result",4]]],[11,"deserialize_i8","","",43,[[],["result",4]]],[11,"deserialize_i16","","",43,[[],["result",4]]],[11,"deserialize_i32","","",43,[[],["result",4]]],[11,"deserialize_i64","","",43,[[],["result",4]]],[11,"deserialize_i128","","",43,[[],["result",4]]],[11,"deserialize_u8","","",43,[[],["result",4]]],[11,"deserialize_u16","","",43,[[],["result",4]]],[11,"deserialize_u32","","",43,[[],["result",4]]],[11,"deserialize_u64","","",43,[[],["result",4]]],[11,"deserialize_u128","","",43,[[],["result",4]]],[11,"deserialize_f32","","",43,[[],["result",4]]],[11,"deserialize_f64","","",43,[[],["result",4]]],[11,"deserialize_char","","",43,[[],["result",4]]],[11,"deserialize_str","","",43,[[],["result",4]]],[11,"deserialize_string","","",43,[[],["result",4]]],[11,"deserialize_bytes","","",43,[[],["result",4]]],[11,"deserialize_byte_buf","","",43,[[],["result",4]]],[11,"deserialize_option","","",43,[[],["result",4]]],[11,"deserialize_unit","","",43,[[],["result",4]]],[11,"deserialize_unit_struct","","",43,[[["str",15]],["result",4]]],[11,"deserialize_newtype_struct","","",43,[[["str",15]],["result",4]]],[11,"deserialize_seq","","",43,[[],["result",4]]],[11,"deserialize_tuple","","",43,[[["usize",15]],["result",4]]],[11,"deserialize_tuple_struct","","",43,[[["usize",15],["str",15]],["result",4]]],[11,"deserialize_map","","",43,[[],["result",4]]],[11,"deserialize_struct","","",43,[[["str",15]],["result",4]]],[11,"deserialize_enum","","",43,[[["str",15]],["result",4]]],[11,"deserialize_identifier","","",43,[[],["result",4]]],[11,"deserialize_ignored_any","","",43,[[],["result",4]]],[11,"deserialize_any","","",43,[[],["result",4]]],[11,"deserialize_any","","",53,[[],["result",4]]],[11,"deserialize_bool","","",53,[[],["result",4]]],[11,"deserialize_i8","","",53,[[],["result",4]]],[11,"deserialize_i16","","",53,[[],["result",4]]],[11,"deserialize_i32","","",53,[[],["result",4]]],[11,"deserialize_i64","","",53,[[],["result",4]]],[11,"deserialize_i128","","",53,[[],["result",4]]],[11,"deserialize_u8","","",53,[[],["result",4]]],[11,"deserialize_u16","","",53,[[],["result",4]]],[11,"deserialize_u32","","",53,[[],["result",4]]],[11,"deserialize_u64","","",53,[[],["result",4]]],[11,"deserialize_u128","","",53,[[],["result",4]]],[11,"deserialize_f32","","",53,[[],["result",4]]],[11,"deserialize_f64","","",53,[[],["result",4]]],[11,"deserialize_char","","",53,[[],["result",4]]],[11,"deserialize_str","","",53,[[],["result",4]]],[11,"deserialize_string","","",53,[[],["result",4]]],[11,"deserialize_bytes","","",53,[[],["result",4]]],[11,"deserialize_byte_buf","","",53,[[],["result",4]]],[11,"deserialize_option","","",53,[[],["result",4]]],[11,"deserialize_unit","","",53,[[],["result",4]]],[11,"deserialize_unit_struct","","",53,[[["str",15]],["result",4]]],[11,"deserialize_newtype_struct","","",53,[[["str",15]],["result",4]]],[11,"deserialize_seq","","",53,[[],["result",4]]],[11,"deserialize_tuple","","",53,[[["usize",15]],["result",4]]],[11,"deserialize_tuple_struct","","",53,[[["usize",15],["str",15]],["result",4]]],[11,"deserialize_map","","",53,[[],["result",4]]],[11,"deserialize_struct","","",53,[[["str",15]],["result",4]]],[11,"deserialize_identifier","","",53,[[],["result",4]]],[11,"deserialize_ignored_any","","",53,[[],["result",4]]],[11,"deserialize_enum","","",53,[[["str",15]],["result",4]]],[11,"deserialize_bool","","",32,[[],["result",4]]],[11,"deserialize_i8","","",32,[[],["result",4]]],[11,"deserialize_i16","","",32,[[],["result",4]]],[11,"deserialize_i32","","",32,[[],["result",4]]],[11,"deserialize_i64","","",32,[[],["result",4]]],[11,"deserialize_i128","","",32,[[],["result",4]]],[11,"deserialize_u8","","",32,[[],["result",4]]],[11,"deserialize_u16","","",32,[[],["result",4]]],[11,"deserialize_u32","","",32,[[],["result",4]]],[11,"deserialize_u64","","",32,[[],["result",4]]],[11,"deserialize_u128","","",32,[[],["result",4]]],[11,"deserialize_f32","","",32,[[],["result",4]]],[11,"deserialize_f64","","",32,[[],["result",4]]],[11,"deserialize_char","","",32,[[],["result",4]]],[11,"deserialize_str","","",32,[[],["result",4]]],[11,"deserialize_string","","",32,[[],["result",4]]],[11,"deserialize_bytes","","",32,[[],["result",4]]],[11,"deserialize_byte_buf","","",32,[[],["result",4]]],[11,"deserialize_unit","","",32,[[],["result",4]]],[11,"deserialize_unit_struct","","",32,[[["str",15]],["result",4]]],[11,"deserialize_newtype_struct","","",32,[[["str",15]],["result",4]]],[11,"deserialize_seq","","",32,[[],["result",4]]],[11,"deserialize_tuple","","",32,[[["usize",15]],["result",4]]],[11,"deserialize_tuple_struct","","",32,[[["usize",15],["str",15]],["result",4]]],[11,"deserialize_map","","",32,[[],["result",4]]],[11,"deserialize_struct","","",32,[[["str",15]],["result",4]]],[11,"deserialize_enum","","",32,[[["str",15]],["result",4]]],[11,"deserialize_identifier","","",32,[[],["result",4]]],[11,"deserialize_ignored_any","","",32,[[],["result",4]]],[11,"deserialize_any","","",32,[[],["result",4]]],[11,"deserialize_option","","",32,[[],["result",4]]],[11,"deserialize_any","","",51,[[],["result",4]]],[11,"deserialize_enum","","",51,[[["str",15]],["result",4]]],[11,"deserialize_bool","","",51,[[],["result",4]]],[11,"deserialize_i8","","",51,[[],["result",4]]],[11,"deserialize_i16","","",51,[[],["result",4]]],[11,"deserialize_i32","","",51,[[],["result",4]]],[11,"deserialize_i64","","",51,[[],["result",4]]],[11,"deserialize_i128","","",51,[[],["result",4]]],[11,"deserialize_u8","","",51,[[],["result",4]]],[11,"deserialize_u16","","",51,[[],["result",4]]],[11,"deserialize_u32","","",51,[[],["result",4]]],[11,"deserialize_u64","","",51,[[],["result",4]]],[11,"deserialize_u128","","",51,[[],["result",4]]],[11,"deserialize_f32","","",51,[[],["result",4]]],[11,"deserialize_f64","","",51,[[],["result",4]]],[11,"deserialize_char","","",51,[[],["result",4]]],[11,"deserialize_str","","",51,[[],["result",4]]],[11,"deserialize_string","","",51,[[],["result",4]]],[11,"deserialize_bytes","","",51,[[],["result",4]]],[11,"deserialize_byte_buf","","",51,[[],["result",4]]],[11,"deserialize_option","","",51,[[],["result",4]]],[11,"deserialize_unit","","",51,[[],["result",4]]],[11,"deserialize_unit_struct","","",51,[[["str",15]],["result",4]]],[11,"deserialize_newtype_struct","","",51,[[["str",15]],["result",4]]],[11,"deserialize_seq","","",51,[[],["result",4]]],[11,"deserialize_tuple","","",51,[[["usize",15]],["result",4]]],[11,"deserialize_tuple_struct","","",51,[[["usize",15],["str",15]],["result",4]]],[11,"deserialize_map","","",51,[[],["result",4]]],[11,"deserialize_struct","","",51,[[["str",15]],["result",4]]],[11,"deserialize_identifier","","",51,[[],["result",4]]],[11,"deserialize_ignored_any","","",51,[[],["result",4]]],[11,"deserialize_any","","",54,[[],["result",4]]],[11,"deserialize_bool","","",54,[[],["result",4]]],[11,"deserialize_i8","","",54,[[],["result",4]]],[11,"deserialize_i16","","",54,[[],["result",4]]],[11,"deserialize_i32","","",54,[[],["result",4]]],[11,"deserialize_i64","","",54,[[],["result",4]]],[11,"deserialize_i128","","",54,[[],["result",4]]],[11,"deserialize_u8","","",54,[[],["result",4]]],[11,"deserialize_u16","","",54,[[],["result",4]]],[11,"deserialize_u32","","",54,[[],["result",4]]],[11,"deserialize_u64","","",54,[[],["result",4]]],[11,"deserialize_u128","","",54,[[],["result",4]]],[11,"deserialize_f32","","",54,[[],["result",4]]],[11,"deserialize_f64","","",54,[[],["result",4]]],[11,"deserialize_char","","",54,[[],["result",4]]],[11,"deserialize_str","","",54,[[],["result",4]]],[11,"deserialize_string","","",54,[[],["result",4]]],[11,"deserialize_bytes","","",54,[[],["result",4]]],[11,"deserialize_byte_buf","","",54,[[],["result",4]]],[11,"deserialize_option","","",54,[[],["result",4]]],[11,"deserialize_unit","","",54,[[],["result",4]]],[11,"deserialize_unit_struct","","",54,[[["str",15]],["result",4]]],[11,"deserialize_newtype_struct","","",54,[[["str",15]],["result",4]]],[11,"deserialize_seq","","",54,[[],["result",4]]],[11,"deserialize_tuple","","",54,[[["usize",15]],["result",4]]],[11,"deserialize_tuple_struct","","",54,[[["usize",15],["str",15]],["result",4]]],[11,"deserialize_map","","",54,[[],["result",4]]],[11,"deserialize_struct","","",54,[[["str",15]],["result",4]]],[11,"deserialize_enum","","",54,[[["str",15]],["result",4]]],[11,"deserialize_identifier","","",54,[[],["result",4]]],[11,"deserialize_ignored_any","","",54,[[],["result",4]]],[11,"deserialize_any","","",52,[[],["result",4]]],[11,"deserialize_enum","","",52,[[["str",15]],["result",4]]],[11,"deserialize_bool","","",52,[[],["result",4]]],[11,"deserialize_i8","","",52,[[],["result",4]]],[11,"deserialize_i16","","",52,[[],["result",4]]],[11,"deserialize_i32","","",52,[[],["result",4]]],[11,"deserialize_i64","","",52,[[],["result",4]]],[11,"deserialize_i128","","",52,[[],["result",4]]],[11,"deserialize_u8","","",52,[[],["result",4]]],[11,"deserialize_u16","","",52,[[],["result",4]]],[11,"deserialize_u32","","",52,[[],["result",4]]],[11,"deserialize_u64","","",52,[[],["result",4]]],[11,"deserialize_u128","","",52,[[],["result",4]]],[11,"deserialize_f32","","",52,[[],["result",4]]],[11,"deserialize_f64","","",52,[[],["result",4]]],[11,"deserialize_char","","",52,[[],["result",4]]],[11,"deserialize_str","","",52,[[],["result",4]]],[11,"deserialize_string","","",52,[[],["result",4]]],[11,"deserialize_bytes","","",52,[[],["result",4]]],[11,"deserialize_byte_buf","","",52,[[],["result",4]]],[11,"deserialize_option","","",52,[[],["result",4]]],[11,"deserialize_unit","","",52,[[],["result",4]]],[11,"deserialize_unit_struct","","",52,[[["str",15]],["result",4]]],[11,"deserialize_newtype_struct","","",52,[[["str",15]],["result",4]]],[11,"deserialize_seq","","",52,[[],["result",4]]],[11,"deserialize_tuple","","",52,[[["usize",15]],["result",4]]],[11,"deserialize_tuple_struct","","",52,[[["usize",15],["str",15]],["result",4]]],[11,"deserialize_map","","",52,[[],["result",4]]],[11,"deserialize_struct","","",52,[[["str",15]],["result",4]]],[11,"deserialize_identifier","","",52,[[],["result",4]]],[11,"deserialize_ignored_any","","",52,[[],["result",4]]],[11,"deserialize_bool","","",37,[[],["result",4]]],[11,"deserialize_i8","","",37,[[],["result",4]]],[11,"deserialize_i16","","",37,[[],["result",4]]],[11,"deserialize_i32","","",37,[[],["result",4]]],[11,"deserialize_i64","","",37,[[],["result",4]]],[11,"deserialize_i128","","",37,[[],["result",4]]],[11,"deserialize_u8","","",37,[[],["result",4]]],[11,"deserialize_u16","","",37,[[],["result",4]]],[11,"deserialize_u32","","",37,[[],["result",4]]],[11,"deserialize_u64","","",37,[[],["result",4]]],[11,"deserialize_u128","","",37,[[],["result",4]]],[11,"deserialize_f32","","",37,[[],["result",4]]],[11,"deserialize_f64","","",37,[[],["result",4]]],[11,"deserialize_char","","",37,[[],["result",4]]],[11,"deserialize_str","","",37,[[],["result",4]]],[11,"deserialize_string","","",37,[[],["result",4]]],[11,"deserialize_bytes","","",37,[[],["result",4]]],[11,"deserialize_byte_buf","","",37,[[],["result",4]]],[11,"deserialize_option","","",37,[[],["result",4]]],[11,"deserialize_unit","","",37,[[],["result",4]]],[11,"deserialize_unit_struct","","",37,[[["str",15]],["result",4]]],[11,"deserialize_newtype_struct","","",37,[[["str",15]],["result",4]]],[11,"deserialize_seq","","",37,[[],["result",4]]],[11,"deserialize_tuple","","",37,[[["usize",15]],["result",4]]],[11,"deserialize_tuple_struct","","",37,[[["usize",15],["str",15]],["result",4]]],[11,"deserialize_map","","",37,[[],["result",4]]],[11,"deserialize_struct","","",37,[[["str",15]],["result",4]]],[11,"deserialize_enum","","",37,[[["str",15]],["result",4]]],[11,"deserialize_identifier","","",37,[[],["result",4]]],[11,"deserialize_ignored_any","","",37,[[],["result",4]]],[11,"deserialize_any","","",37,[[],["result",4]]],[11,"deserialize_bool","","",42,[[],["result",4]]],[11,"deserialize_i8","","",42,[[],["result",4]]],[11,"deserialize_i16","","",42,[[],["result",4]]],[11,"deserialize_i32","","",42,[[],["result",4]]],[11,"deserialize_i64","","",42,[[],["result",4]]],[11,"deserialize_i128","","",42,[[],["result",4]]],[11,"deserialize_u8","","",42,[[],["result",4]]],[11,"deserialize_u16","","",42,[[],["result",4]]],[11,"deserialize_u32","","",42,[[],["result",4]]],[11,"deserialize_u64","","",42,[[],["result",4]]],[11,"deserialize_u128","","",42,[[],["result",4]]],[11,"deserialize_f32","","",42,[[],["result",4]]],[11,"deserialize_f64","","",42,[[],["result",4]]],[11,"deserialize_char","","",42,[[],["result",4]]],[11,"deserialize_str","","",42,[[],["result",4]]],[11,"deserialize_string","","",42,[[],["result",4]]],[11,"deserialize_bytes","","",42,[[],["result",4]]],[11,"deserialize_byte_buf","","",42,[[],["result",4]]],[11,"deserialize_option","","",42,[[],["result",4]]],[11,"deserialize_unit","","",42,[[],["result",4]]],[11,"deserialize_unit_struct","","",42,[[["str",15]],["result",4]]],[11,"deserialize_newtype_struct","","",42,[[["str",15]],["result",4]]],[11,"deserialize_seq","","",42,[[],["result",4]]],[11,"deserialize_tuple","","",42,[[["usize",15]],["result",4]]],[11,"deserialize_tuple_struct","","",42,[[["usize",15],["str",15]],["result",4]]],[11,"deserialize_map","","",42,[[],["result",4]]],[11,"deserialize_struct","","",42,[[["str",15]],["result",4]]],[11,"deserialize_enum","","",42,[[["str",15]],["result",4]]],[11,"deserialize_identifier","","",42,[[],["result",4]]],[11,"deserialize_ignored_any","","",42,[[],["result",4]]],[11,"deserialize_any","","",42,[[],["result",4]]],[11,"deserialize_any","","",50,[[],["result",4]]],[11,"deserialize_enum","","",50,[[["str",15]],["result",4]]],[11,"deserialize_bool","","",50,[[],["result",4]]],[11,"deserialize_i8","","",50,[[],["result",4]]],[11,"deserialize_i16","","",50,[[],["result",4]]],[11,"deserialize_i32","","",50,[[],["result",4]]],[11,"deserialize_i64","","",50,[[],["result",4]]],[11,"deserialize_i128","","",50,[[],["result",4]]],[11,"deserialize_u8","","",50,[[],["result",4]]],[11,"deserialize_u16","","",50,[[],["result",4]]],[11,"deserialize_u32","","",50,[[],["result",4]]],[11,"deserialize_u64","","",50,[[],["result",4]]],[11,"deserialize_u128","","",50,[[],["result",4]]],[11,"deserialize_f32","","",50,[[],["result",4]]],[11,"deserialize_f64","","",50,[[],["result",4]]],[11,"deserialize_char","","",50,[[],["result",4]]],[11,"deserialize_str","","",50,[[],["result",4]]],[11,"deserialize_string","","",50,[[],["result",4]]],[11,"deserialize_bytes","","",50,[[],["result",4]]],[11,"deserialize_byte_buf","","",50,[[],["result",4]]],[11,"deserialize_option","","",50,[[],["result",4]]],[11,"deserialize_unit","","",50,[[],["result",4]]],[11,"deserialize_unit_struct","","",50,[[["str",15]],["result",4]]],[11,"deserialize_newtype_struct","","",50,[[["str",15]],["result",4]]],[11,"deserialize_seq","","",50,[[],["result",4]]],[11,"deserialize_tuple","","",50,[[["usize",15]],["result",4]]],[11,"deserialize_tuple_struct","","",50,[[["usize",15],["str",15]],["result",4]]],[11,"deserialize_map","","",50,[[],["result",4]]],[11,"deserialize_struct","","",50,[[["str",15]],["result",4]]],[11,"deserialize_identifier","","",50,[[],["result",4]]],[11,"deserialize_ignored_any","","",50,[[],["result",4]]],[11,"deserialize_bool","","",45,[[],["result",4]]],[11,"deserialize_i8","","",45,[[],["result",4]]],[11,"deserialize_i16","","",45,[[],["result",4]]],[11,"deserialize_i32","","",45,[[],["result",4]]],[11,"deserialize_i64","","",45,[[],["result",4]]],[11,"deserialize_i128","","",45,[[],["result",4]]],[11,"deserialize_u8","","",45,[[],["result",4]]],[11,"deserialize_u16","","",45,[[],["result",4]]],[11,"deserialize_u32","","",45,[[],["result",4]]],[11,"deserialize_u64","","",45,[[],["result",4]]],[11,"deserialize_u128","","",45,[[],["result",4]]],[11,"deserialize_f32","","",45,[[],["result",4]]],[11,"deserialize_f64","","",45,[[],["result",4]]],[11,"deserialize_char","","",45,[[],["result",4]]],[11,"deserialize_str","","",45,[[],["result",4]]],[11,"deserialize_string","","",45,[[],["result",4]]],[11,"deserialize_bytes","","",45,[[],["result",4]]],[11,"deserialize_byte_buf","","",45,[[],["result",4]]],[11,"deserialize_option","","",45,[[],["result",4]]],[11,"deserialize_unit","","",45,[[],["result",4]]],[11,"deserialize_unit_struct","","",45,[[["str",15]],["result",4]]],[11,"deserialize_newtype_struct","","",45,[[["str",15]],["result",4]]],[11,"deserialize_seq","","",45,[[],["result",4]]],[11,"deserialize_tuple","","",45,[[["usize",15]],["result",4]]],[11,"deserialize_tuple_struct","","",45,[[["usize",15],["str",15]],["result",4]]],[11,"deserialize_map","","",45,[[],["result",4]]],[11,"deserialize_struct","","",45,[[["str",15]],["result",4]]],[11,"deserialize_enum","","",45,[[["str",15]],["result",4]]],[11,"deserialize_identifier","","",45,[[],["result",4]]],[11,"deserialize_ignored_any","","",45,[[],["result",4]]],[11,"deserialize_any","","",45,[[],["result",4]]],[11,"deserialize_any","","",57,[[],["result",4]]],[11,"deserialize_enum","","",57,[[["str",15]],["result",4]]],[11,"deserialize_bool","","",57,[[],["result",4]]],[11,"deserialize_i8","","",57,[[],["result",4]]],[11,"deserialize_i16","","",57,[[],["result",4]]],[11,"deserialize_i32","","",57,[[],["result",4]]],[11,"deserialize_i64","","",57,[[],["result",4]]],[11,"deserialize_i128","","",57,[[],["result",4]]],[11,"deserialize_u8","","",57,[[],["result",4]]],[11,"deserialize_u16","","",57,[[],["result",4]]],[11,"deserialize_u32","","",57,[[],["result",4]]],[11,"deserialize_u64","","",57,[[],["result",4]]],[11,"deserialize_u128","","",57,[[],["result",4]]],[11,"deserialize_f32","","",57,[[],["result",4]]],[11,"deserialize_f64","","",57,[[],["result",4]]],[11,"deserialize_char","","",57,[[],["result",4]]],[11,"deserialize_str","","",57,[[],["result",4]]],[11,"deserialize_string","","",57,[[],["result",4]]],[11,"deserialize_bytes","","",57,[[],["result",4]]],[11,"deserialize_byte_buf","","",57,[[],["result",4]]],[11,"deserialize_option","","",57,[[],["result",4]]],[11,"deserialize_unit","","",57,[[],["result",4]]],[11,"deserialize_unit_struct","","",57,[[["str",15]],["result",4]]],[11,"deserialize_newtype_struct","","",57,[[["str",15]],["result",4]]],[11,"deserialize_seq","","",57,[[],["result",4]]],[11,"deserialize_tuple","","",57,[[["usize",15]],["result",4]]],[11,"deserialize_tuple_struct","","",57,[[["usize",15],["str",15]],["result",4]]],[11,"deserialize_map","","",57,[[],["result",4]]],[11,"deserialize_struct","","",57,[[["str",15]],["result",4]]],[11,"deserialize_identifier","","",57,[[],["result",4]]],[11,"deserialize_ignored_any","","",57,[[],["result",4]]],[11,"variant_seed","","",49,[[],["result",4]]],[11,"variant_seed","","",51,[[],["result",4]]],[11,"variant_seed","","",52,[[],["result",4]]],[11,"variant_seed","","",50,[[],["result",4]]],[11,"variant_seed","","",48,[[],["result",4]]],[11,"variant_seed","","",57,[[],["result",4]]],[11,"custom","","",31,[[],["error",3]]],[11,"description","","",31,[[],["str",15]]],[11,"custom","","",31,[[],["error",3]]],[11,"eq","forest_encoding::de","",1,[[["unexpected",4]],["bool",15]]],[11,"ne","","",1,[[["unexpected",4]],["bool",15]]],[11,"eq","forest_encoding::de::value","",31,[[["error",3]],["bool",15]]],[11,"ne","","",31,[[["error",3]],["bool",15]]],[11,"expecting","forest_encoding::de","",58,[[["formatter",3]],[["error",3],["result",4]]]],[11,"visit_bool","","",58,[[["bool",15]],["result",4]]],[11,"visit_i64","","",58,[[["i64",15]],["result",4]]],[11,"visit_u64","","",58,[[["u64",15]],["result",4]]],[11,"visit_f64","","",58,[[["f64",15]],["result",4]]],[11,"visit_str","","",58,[[["str",15]],["result",4]]],[11,"visit_none","","",58,[[],["result",4]]],[11,"visit_some","","",58,[[],["result",4]]],[11,"visit_newtype_struct","","",58,[[],["result",4]]],[11,"visit_unit","","",58,[[],["result",4]]],[11,"visit_seq","","",58,[[],["result",4]]],[11,"visit_map","","",58,[[],["result",4]]],[11,"visit_bytes","","",58,[[],["result",4]]],[11,"visit_enum","","",58,[[],["result",4]]],[11,"fmt","forest_encoding::error","",60,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",23,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",60,[[["formatter",3]],[["error",3],["result",4]]]],[11,"deserialize","forest_encoding::tags","",24,[[],[["tagged",3],["result",4]]]],[11,"from","forest_encoding::error","",60,[[["error",3]],["error",3]]],[11,"clone","","",23,[[],["category",4]]],[11,"custom","","",60,[[],["error",3]]],[11,"invalid_type","","",60,[[["expected",8],["unexpected",4]],["error",3]]],[11,"custom","","",60,[[],["error",3]]],[11,"source","","",60,[[],[["option",4],["error",8]]]],[11,"eq","","",23,[[["category",4]],["bool",15]]],[11,"serialize","forest_encoding::tags","",24,[[],["result",4]]],[11,"from","forest_encoding","",29,[[["cborerror",3]],["error",3]]],[11,"from","","",29,[[["ciderror",4]]]],[11,"clone","","",26,[[],["bytesde",3]]],[11,"eq","","",26,[[["bytesde",3]],["bool",15]]],[11,"ne","","",26,[[["bytesde",3]],["bool",15]]],[11,"eq","","",29,[[["error",3]],["bool",15]]],[11,"ne","","",29,[[["error",3]],["bool",15]]],[11,"eq","","",30,[[["codecprotocol",4]],["bool",15]]],[11,"fmt","","",26,[[["formatter",3]],["result",6]]],[11,"fmt","","",29,[[["formatter",3]],["result",6]]],[11,"fmt","","",30,[[["formatter",3]],["result",6]]],[11,"fmt","","",29,[[["formatter",3]],["result",6]]],[11,"fmt","","",30,[[["formatter",3]],["result",6]]],[11,"serialize","","",25,[[],["result",4]]],[11,"serialize","","",26,[[],["result",4]]],[11,"serialize","","",27,[[],["result",4]]],[11,"deserialize","","",26,[[],["result",4]]],[11,"deserialize","","",27,[[],["result",4]]],[11,"marshal_cbor","","Marshalls cbor encodable object into cbor bytes",28,[[],[["error",3],["result",4],["vec",3]]]],[11,"unmarshal_cbor","","Unmarshals cbor encoded bytes to object",28,[[],[["result",4],["error",3]]]],[11,"cid","","Returns the content identifier of the raw block of data …",28,[[],[["cid",3],["error",3],["result",4]]]],[11,"new","forest_encoding::de::value","Create a new borrowed deserializer from the given string.",50,[[["str",15]],["borrowedstrdeserializer",3]]],[11,"new","","Create a new borrowed deserializer from the given byte …",53,[[],["borrowedbytesdeserializer",3]]],[11,"new","","Construct a new <code>SeqDeserializer<I, E></code>.",54,[[],["seqdeserializer",3]]],[11,"end","","Check for remaining elements after passing a …",54,[[],["result",4]]],[11,"new","","Construct a new <code>SeqAccessDeserializer<A></code>.",55,[[],["seqaccessdeserializer",3]]],[11,"new","","Construct a new <code>MapDeserializer<I, E></code>.",56,[[],["mapdeserializer",3]]],[11,"end","","Check for remaining elements after passing a …",56,[[],["result",4]]],[11,"new","","Construct a new <code>MapAccessDeserializer<A></code>.",57,[[],["mapaccessdeserializer",3]]],[11,"is","forest_encoding::ser","Returns <code>true</code> if the boxed type is the same as <code>T</code>",12,[[],["bool",15]]],[11,"downcast_ref","","Returns some reference to the boxed value if it is of …",12,[[],["option",4]]],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it …",12,[[],["option",4]]],[11,"is","","Forwards to the method defined on the type <code>dyn Error</code>.",12,[[],["bool",15]]],[11,"downcast_ref","","Forwards to the method defined on the type <code>dyn Error</code>.",12,[[],["option",4]]],[11,"downcast_mut","","Forwards to the method defined on the type <code>dyn Error</code>.",12,[[],["option",4]]],[11,"is","","Forwards to the method defined on the type <code>dyn Error</code>.",12,[[],["bool",15]]],[11,"downcast_ref","","Forwards to the method defined on the type <code>dyn Error</code>.",12,[[],["option",4]]],[11,"downcast_mut","","Forwards to the method defined on the type <code>dyn Error</code>.",12,[[],["option",4]]],[11,"downcast","","Attempts to downcast the box to a concrete type.",12,[[["global",3],["error",8],["box",3]],[["box",3],["result",4],["box",3]]]],[11,"chain","","Returns an iterator starting with the current error and …",12,[[],["chain",3]]],[11,"downcast","","Attempts to downcast the box to a concrete type.",12,[[["global",3],["box",3],["error",8]],[["box",3],["box",3],["result",4]]]],[11,"downcast","","Attempts to downcast the box to a concrete type.",12,[[["global",3],["box",3],["error",8]],[["box",3],["box",3],["result",4]]]],[11,"offset","forest_encoding::error","The byte offset at which the error occurred.",60,[[],["u64",15]]],[11,"classify","","Categorizes the cause of this error.",60,[[],["category",4]]],[11,"is_io","","Returns true if this error was caused by a failure to …",60,[[],["bool",15]]],[11,"is_syntax","","Returns true if this error was caused by input that was …",60,[[],["bool",15]]],[11,"is_data","","Returns true if this error was caused by data that was …",60,[[],["bool",15]]],[11,"is_eof","","Returns true if this error was caused by prematurely …",60,[[],["bool",15]]],[11,"is_scratch_too_small","","Returns true if this error was caused by the scratch …",60,[[],["bool",15]]],[11,"new","forest_encoding::tags","Create a new tagged value",24,[[["option",4],["u64",15]],["tagged",3]]]],"p":[[8,"Error"],[4,"Unexpected"],[8,"Expected"],[8,"Deserialize"],[8,"DeserializeSeed"],[8,"Deserializer"],[8,"Visitor"],[8,"SeqAccess"],[8,"MapAccess"],[8,"EnumAccess"],[8,"VariantAccess"],[8,"IntoDeserializer"],[8,"StdError"],[8,"Error"],[8,"Serialize"],[8,"Serializer"],[8,"SerializeSeq"],[8,"SerializeTuple"],[8,"SerializeTupleStruct"],[8,"SerializeTupleVariant"],[8,"SerializeMap"],[8,"SerializeStruct"],[8,"SerializeStructVariant"],[4,"Category"],[3,"Tagged"],[3,"BytesSer"],[3,"BytesDe"],[3,"Byte32De"],[8,"Cbor"],[3,"Error"],[4,"CodecProtocol"],[3,"Error"],[3,"UnitDeserializer"],[3,"BoolDeserializer"],[3,"I8Deserializer"],[3,"I16Deserializer"],[3,"I32Deserializer"],[3,"I64Deserializer"],[3,"IsizeDeserializer"],[3,"U8Deserializer"],[3,"U16Deserializer"],[3,"U64Deserializer"],[3,"UsizeDeserializer"],[3,"F32Deserializer"],[3,"F64Deserializer"],[3,"CharDeserializer"],[3,"I128Deserializer"],[3,"U128Deserializer"],[3,"U32Deserializer"],[3,"StrDeserializer"],[3,"BorrowedStrDeserializer"],[3,"StringDeserializer"],[3,"CowStrDeserializer"],[3,"BorrowedBytesDeserializer"],[3,"SeqDeserializer"],[3,"SeqAccessDeserializer"],[3,"MapDeserializer"],[3,"MapAccessDeserializer"],[3,"IgnoredAny"],[3,"Impossible"],[3,"Error"]]},\
"forest_hash_utils":{"doc":"","i":[[3,"BytesKey","forest_hash_utils","Key type to be used to serialize as byte string instead …",null,null],[12,"0","","",0,null],[8,"Hash","","Custom trait to avoid issues like …",null,null],[10,"hash","","",1,[[]]],[11,"hash_slice","","",1,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"hash","","",0,[[]]],[11,"from","","",0,[[["vec",3],["u8",15]]]],[11,"from","","",0,[[]]],[11,"from","","",0,[[["str",15]]]],[11,"clone","","",0,[[],["byteskey",3]]],[11,"eq","","",0,[[["byteskey",3]],["bool",15]]],[11,"ne","","",0,[[["byteskey",3]],["bool",15]]],[11,"partial_cmp","","",0,[[["byteskey",3]],[["option",4],["ordering",4]]]],[11,"lt","","",0,[[["byteskey",3]],["bool",15]]],[11,"le","","",0,[[["byteskey",3]],["bool",15]]],[11,"gt","","",0,[[["byteskey",3]],["bool",15]]],[11,"ge","","",0,[[["byteskey",3]],["bool",15]]],[11,"deref","","",0,[[]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"borrow","","",0,[[]]],[11,"borrow","","",0,[[],["vec",3]]],[11,"serialize","","",0,[[],["result",4]]],[11,"deserialize","","",0,[[],["result",4]]]],"p":[[3,"BytesKey"],[8,"Hash"]]},\
"forest_ipld":{"doc":"","i":[[0,"selector","forest_ipld","",null,null],[4,"VisitReason","forest_ipld::selector","Provides reason for callback in traversal for <code>walk_all</code>.",null,null],[13,"SelectionMatch","","Ipld node visited was a specific match.",0,null],[13,"SelectionCandidate","","Ipld node was visited while searching for matches.",0,null],[8,"LinkResolver","","",null,null],[10,"load_link","","Resolves a Cid link into it\'s respective Ipld node, if it …",1,[[["cid",3]],[["pin",3],["box",3]]]],[3,"Progress","","Contains progress of traversal and last block information …",null,null],[3,"LastBlockInfo","","Contains information about the last block that was …",null,null],[12,"path","","",2,null],[12,"link","","",2,null],[4,"Selector","","Selectors are expressions that identify and select a …",null,null],[13,"Matcher","","Matcher marks a node to be included in the \\\"result\\\" set. …",3,null],[13,"ExploreAll","","ExploreAll is similar to a <code>*</code> -- it traverses all elements …",3,null],[12,"next","forest_ipld::selector::Selector","",4,null],[13,"ExploreFields","forest_ipld::selector","ExploreFields traverses named fields in a map (or …",3,null],[12,"fields","forest_ipld::selector::Selector","",5,null],[13,"ExploreIndex","forest_ipld::selector","ExploreIndex traverses a specific index in a list, and …",3,null],[12,"index","forest_ipld::selector::Selector","",6,null],[12,"next","","",6,null],[13,"ExploreRange","forest_ipld::selector","ExploreRange traverses a list, and for each element in …",3,null],[12,"start","forest_ipld::selector::Selector","",7,null],[12,"end","","",7,null],[12,"next","","",7,null],[13,"ExploreRecursive","forest_ipld::selector","ExploreRecursive traverses some structure recursively. To …",3,null],[12,"sequence","forest_ipld::selector::Selector","",8,null],[12,"limit","","",8,null],[12,"stop_at","","if a node matches, we won\'t match it nor explore its …",8,null],[12,"current","","Used to index current",8,null],[13,"ExploreUnion","forest_ipld::selector","ExploreUnion allows selection to continue with two or …",3,null],[13,"ExploreRecursiveEdge","","ExploreRecursiveEdge is a special sentinel value which is …",3,null],[4,"RecursionLimit","","",null,null],[13,"None","","",9,null],[13,"Depth","","",9,null],[4,"Condition","","Condition is expresses a predicate with a boolean result.",null,null],[13,"HasField","","",10,null],[13,"HasValue","","",10,null],[13,"HasKind","","",10,null],[13,"IsLink","","",10,null],[13,"GreaterThan","","",10,null],[13,"LessThan","","",10,null],[13,"And","","",10,null],[13,"Or","","",10,null],[11,"interests","","Returns a vector of all sectors of interest, <code>None</code> variant …",3,[[],[["vec",3],["option",4]]]],[11,"explore","","Processes and returns resultant selector node",3,[[["ipld",4],["pathsegment",4]],[["option",4],["selector",4]]]],[11,"decide","","Returns true if matcher, false otherwise",3,[[],["bool",15]]],[0,"json","forest_ipld","",null,null],[3,"IpldJson","forest_ipld::json","Wrapper for serializing and deserializing a Ipld from …",null,null],[12,"0","","",11,null],[3,"IpldJsonRef","","Wrapper for serializing a ipld reference to JSON.",null,null],[12,"0","","",12,null],[5,"serialize","","",null,[[["ipld",4]],["result",4]]],[5,"deserialize","","",null,[[],[["result",4],["ipld",4]]]],[4,"Error","forest_ipld","Ipld error",null,null],[13,"Encoding","","",13,null],[13,"Other","","",13,null],[13,"Link","","",13,null],[13,"Custom","","",13,null],[3,"Path","","Describes a series of steps across a tree or DAG of Ipld, …",null,null],[4,"PathSegment","","Represents either a key in a map or an index in a list.",null,null],[13,"String","","Key in a map",14,null],[13,"Int","","Index in a list",14,null],[4,"Ipld","","Represents IPLD data structure used when serializing and …",null,null],[13,"Null","","Represents a null value.",15,null],[13,"Bool","","Represents a boolean value.",15,null],[13,"Integer","","Represents a signed integer value.",15,null],[13,"Float","","Represents a floating point value.",15,null],[13,"String","","Represents a String.",15,null],[13,"Bytes","","Represents Bytes.",15,null],[13,"List","","Represents List of IPLD objects.",15,null],[13,"Map","","Represents a map of strings to Ipld objects.",15,null],[13,"Link","","Represents a link to another piece of data through a …",15,null],[5,"to_ipld","","Convert any object into an IPLD object",null,[[],[["error",4],["result",4],["ipld",4]]]],[5,"from_ipld","","Convert a <code>Ipld</code> structure into a type <code>T</code> Currently converts …",null,[[["ipld",4]],[["result",4],["string",3]]]],[14,"ipld","","Construct a <code>forest_ipld::Ipld</code> roughly matching JSON …",null,null],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_string","","",13,[[],["string",3]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"to_owned","","",16,[[]]],[11,"clone_into","","",16,[[]]],[11,"to_string","","",16,[[],["string",3]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"to_owned","","",14,[[]]],[11,"clone_into","","",14,[[]]],[11,"to_string","","",14,[[],["string",3]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","forest_ipld::selector","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",17,[[]]],[11,"into","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","forest_ipld::json","",11,[[]]],[11,"into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"from","forest_ipld","",15,[[]]],[11,"into","","",15,[[]]],[11,"to_owned","","",15,[[]]],[11,"clone_into","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"from","","",13,[[["cborerror",3]],["error",4]]],[11,"from","","",16,[[["str",15]]]],[11,"from","","",14,[[["usize",15]]]],[11,"from","","",14,[[["string",3]]]],[11,"from","","",14,[[["str",15]]]],[11,"clone","","",16,[[],["path",3]]],[11,"clone","","",14,[[],["pathsegment",4]]],[11,"clone","forest_ipld::selector","",0,[[],["visitreason",4]]],[11,"clone","","",2,[[],["lastblockinfo",3]]],[11,"clone","","",3,[[],["selector",4]]],[11,"clone","","",9,[[],["recursionlimit",4]]],[11,"clone","","",10,[[],["condition",4]]],[11,"clone","forest_ipld","",15,[[],["ipld",4]]],[11,"default","","",16,[[],["path",3]]],[11,"default","forest_ipld::selector","",17,[[],["progress",3]]],[11,"eq","forest_ipld","",13,[[["error",4]],["bool",15]]],[11,"ne","","",13,[[["error",4]],["bool",15]]],[11,"eq","","",16,[[["path",3]],["bool",15]]],[11,"ne","","",16,[[["path",3]],["bool",15]]],[11,"eq","","",14,[[["pathsegment",4]],["bool",15]]],[11,"ne","","",14,[[["pathsegment",4]],["bool",15]]],[11,"eq","forest_ipld::selector","",0,[[["visitreason",4]],["bool",15]]],[11,"eq","","",2,[[["lastblockinfo",3]],["bool",15]]],[11,"ne","","",2,[[["lastblockinfo",3]],["bool",15]]],[11,"eq","","",3,[[["selector",4]],["bool",15]]],[11,"ne","","",3,[[["selector",4]],["bool",15]]],[11,"eq","","",9,[[["recursionlimit",4]],["bool",15]]],[11,"ne","","",9,[[["recursionlimit",4]],["bool",15]]],[11,"eq","","",10,[[["condition",4]],["bool",15]]],[11,"eq","forest_ipld","",15,[[["ipld",4]],["bool",15]]],[11,"ne","","",15,[[["ipld",4]],["bool",15]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",16,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","forest_ipld::selector","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",17,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","forest_ipld","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",16,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"sub_assign","forest_ipld::selector","",9,[[["u64",15]]]],[11,"custom","forest_ipld","",13,[[["display",8]],["error",4]]],[11,"serialize","forest_ipld::selector","",3,[[],["result",4]]],[11,"serialize","","",9,[[],["result",4]]],[11,"serialize","","",10,[[],["result",4]]],[11,"serialize","forest_ipld","",15,[[],["result",4]]],[11,"serialize","forest_ipld::json","",11,[[],["result",4]]],[11,"serialize","","",12,[[],["result",4]]],[11,"deserialize","forest_ipld","",15,[[],["result",4]]],[11,"deserialize","","",14,[[],["result",4]]],[11,"deserialize","forest_ipld::selector","",3,[[],["result",4]]],[11,"deserialize","","",9,[[],["result",4]]],[11,"deserialize","","",10,[[],["result",4]]],[11,"deserialize","forest_ipld::json","",11,[[],["result",4]]],[11,"new","forest_ipld","",16,[[["vec",3],["pathsegment",4]]]],[11,"extend","","Extend <code>Path</code> with another <code>Path</code> by cloning and appending …",16,[[["path",3]]]],[11,"segments","","Returns slice of <code>PathSegment</code>s of the <code>Path</code>.",16,[[]]],[11,"push","","Pushes a <code>PathSegment</code> to the end of the <code>Path</code>.",16,[[["pathsegment",4]]]],[11,"pop","","Pops a <code>PathSegment</code> from the end of the path.",16,[[],[["option",4],["pathsegment",4]]]],[11,"to_index","","Return index or conversion from string to index. If path …",14,[[],[["usize",15],["option",4]]]],[11,"walk_all","forest_ipld::selector","Walks all nodes visited (not just matched nodes) and …",3,[[["ipld",4],["option",4]]]],[11,"walk_matching","","Walks a graph of Ipld nodes, executing the callback only …",3,[[["ipld",4],["option",4]]]],[11,"path","","Returns the path of the current progress",17,[[],["path",3]]],[11,"last_block","","Returns the last block information from a link traversal.",17,[[],[["lastblockinfo",3],["option",4]]]]],"p":[[4,"VisitReason"],[8,"LinkResolver"],[3,"LastBlockInfo"],[4,"Selector"],[13,"ExploreAll"],[13,"ExploreFields"],[13,"ExploreIndex"],[13,"ExploreRange"],[13,"ExploreRecursive"],[4,"RecursionLimit"],[4,"Condition"],[3,"IpldJson"],[3,"IpldJsonRef"],[4,"Error"],[4,"PathSegment"],[4,"Ipld"],[3,"Path"],[3,"Progress"]]},\
"forest_json_utils":{"doc":"","i":[[0,"go_vec_visitor","forest_json_utils","",null,null],[5,"serialize","forest_json_utils::go_vec_visitor","",null,[[],["result",4]]],[5,"deserialize","","",null,[[],[["result",4],["vec",3]]]],[3,"GoVecVisitor","forest_json_utils","Helper visitor to match Go\'s default behaviour of …",null,null],[11,"new","","",0,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"fmt","","",0,[[["formatter",3]],[["error",3],["result",4]]]],[11,"default","","",0,[[],["govecvisitor",3]]],[11,"expecting","","",0,[[["formatter",3]],["result",6]]],[11,"visit_seq","","",0,[[],[["result",4],["vec",3]]]],[11,"visit_none","","",0,[[],["result",4]]],[11,"visit_unit","","",0,[[],["result",4]]]],"p":[[3,"GoVecVisitor"]]},\
"forest_libp2p":{"doc":"","i":[[0,"chain_exchange","forest_libp2p","",null,null],[17,"HEADERS","forest_libp2p::chain_exchange","ChainExchange Filecoin header set bit.",null,null],[17,"MESSAGES","","ChainExchange Filecoin messages set bit.",null,null],[3,"ChainExchangeRequest","","The payload that gets sent to another node to request for …",null,null],[12,"start","","The tipset [Cid] to start the request from.",0,null],[12,"request_len","","The amount of epochs to request.",0,null],[12,"options","","1 = Block only, 2 = Messages only, 3 = Blocks and …",0,null],[4,"ChainExchangeResponseStatus","","Status codes of a chain_exchange response.",null,null],[13,"Success","","All is well.",1,null],[13,"PartialResponse","","We could not fetch all blocks requested (but at least we …",1,null],[13,"BlockNotFound","","Request.Start not found.",1,null],[13,"GoAway","","Requester is making too many requests.",1,null],[13,"InternalError","","Internal error occured.",1,null],[13,"BadRequest","","Request was bad.",1,null],[13,"Other","","Other undefined response code.",1,null],[3,"ChainExchangeResponse","","The response to a ChainExchange request.",null,null],[12,"status","","Status code of the response.",2,null],[12,"message","","Status message indicating failure reason.",2,null],[12,"chain","","The tipsets requested.",2,null],[3,"CompactedMessages","","Contains all bls and secp messages and their indexes per …",null,null],[12,"bls_msgs","","Unsigned bls messages.",3,null],[12,"bls_msg_includes","","Describes which block each message belongs to.",3,null],[12,"secp_msgs","","Signed secp messages.",3,null],[12,"secp_msg_includes","","Describes which block each message belongs to.",3,null],[3,"TipsetBundle","","Contains the blocks and messages in a particular tipset",null,null],[12,"blocks","","The blocks in the tipset.",4,null],[12,"messages","","Compressed messages format.",4,null],[5,"make_chain_exchange_response","","Builds chain exchange response out of chain data.",null,[[["chainstore",3],["chainexchangerequest",3]]]],[17,"CHAIN_XCHG_PROTOCOL_ID","","Libp2p protocol ID for ChainExchange.",null,null],[3,"ChainExchangeProtocolName","","Type to satisfy <code>ProtocolName</code> interface for ChainExchange …",null,null],[6,"ChainExchangeCodec","","ChainExchange protocol codec to be used within the RPC …",null,null],[0,"hello","forest_libp2p","",null,null],[3,"HelloRequest","forest_libp2p::hello","Hello message …",null,null],[12,"heaviest_tip_set","","",5,null],[12,"heaviest_tipset_height","","",5,null],[12,"heaviest_tipset_weight","","",5,null],[12,"genesis_hash","","",5,null],[3,"HelloResponse","","Response to a Hello message. This just handles latency of …",null,null],[12,"arrival","","Time of arrival to peer in unix nanoseconds.",6,null],[12,"sent","","Time sent from peer in unix nanoseconds.",6,null],[17,"HELLO_PROTOCOL_ID","","Libp2p Hello protocol ID.",null,null],[3,"HelloProtocolName","","Type to satisfy <code>ProtocolName</code> interface for Hello RPC.",null,null],[6,"HelloCodec","","Hello protocol codec to be used within the RPC service.",null,null],[0,"rpc","forest_libp2p","",null,null],[3,"CborRequestResponse","forest_libp2p::rpc","Generic Cbor RequestResponse type. This is just needed to …",null,null],[4,"RequestResponseError","","libp2p request response outbound error type. This …",null,null],[13,"DialFailure","","The request could not be sent because a dialing attempt …",7,null],[13,"Timeout","","The request timed out before a response was received.",7,null],[13,"ConnectionClosed","","The connection closed before a response was received.",7,null],[13,"UnsupportedProtocols","","The remote supports none of the requested protocols.",7,null],[3,"Libp2pConfig","forest_libp2p","Libp2p config for the Forest node.",null,null],[12,"listening_multiaddr","","Local address.",8,null],[12,"bootstrap_peers","","Bootstrap peer list.",8,null],[12,"mdns","","Mdns discovery enabled.",8,null],[12,"kademlia","","Kademlia discovery enabled.",8,null],[12,"target_peer_count","","Target peer count.",8,null],[6,"IdentTopic","","",null,null],[3,"Topic","","A gossipsub topic.",null,null],[17,"PUBSUB_BLOCK_STR","","Gossipsub Filecoin blocks topic identifier.",null,null],[17,"PUBSUB_MSG_STR","","Gossipsub Filecoin messages topic identifier.",null,null],[4,"NetworkEvent","","Events emitted by this Service.",null,null],[13,"PubsubMessage","","",9,null],[12,"source","forest_libp2p::NetworkEvent","",10,null],[12,"message","","",10,null],[13,"HelloRequest","forest_libp2p","",9,null],[12,"request","forest_libp2p::NetworkEvent","",11,null],[12,"source","","",11,null],[13,"ChainExchangeRequest","forest_libp2p","",9,null],[12,"request","forest_libp2p::NetworkEvent","",12,null],[12,"channel","","",12,null],[13,"PeerConnected","forest_libp2p","",9,null],[13,"PeerDisconnected","","",9,null],[13,"BitswapBlock","","",9,null],[12,"cid","forest_libp2p::NetworkEvent","",13,null],[4,"PubsubMessage","forest_libp2p","Message types that can come over GossipSub",null,null],[13,"Block","","Messages that come over the block topic",14,null],[13,"Message","","Messages that come over the message topic",14,null],[4,"NetworkMessage","","Messages into the service to handle.",null,null],[13,"PubsubMessage","","",15,null],[12,"topic","forest_libp2p::NetworkMessage","",16,null],[12,"message","","",16,null],[13,"ChainExchangeRequest","forest_libp2p","",15,null],[12,"peer_id","forest_libp2p::NetworkMessage","",17,null],[12,"request","","",17,null],[12,"response_channel","","",17,null],[13,"HelloRequest","forest_libp2p","",15,null],[12,"peer_id","forest_libp2p::NetworkMessage","",18,null],[12,"request","","",18,null],[12,"response_channel","","",18,null],[13,"BitswapRequest","forest_libp2p","",15,null],[12,"cid","forest_libp2p::NetworkMessage","",19,null],[12,"response_channel","","",19,null],[13,"JSONRPCRequest","forest_libp2p","",15,null],[12,"method","forest_libp2p::NetworkMessage","",20,null],[4,"NetRPCMethods","forest_libp2p","Network RPC API methods used to gather data from libp2p …",null,null],[13,"NetAddrsListen","","",21,null],[3,"Libp2pService","","The Libp2pService listens to events from the Libp2p swarm.",null,null],[5,"build_transport","","Builds the transport stack that LibP2P will communicate …",null,[[["keypair",4]],["boxed",3]]],[5,"get_keypair","","Fetch keypair from disk, returning none if it cannot be …",null,[[["str",15]],[["option",4],["keypair",4]]]],[3,"PeerId","","Identifier of a peer of the network.",null,null],[3,"Multiaddr","","Representation of a Multiaddr.",null,null],[11,"from","forest_libp2p::chain_exchange","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"init","","",0,[[],["usize",15]]],[11,"deref","","",0,[[["usize",15]]]],[11,"deref_mut","","",0,[[["usize",15]]]],[11,"drop","","",0,[[["usize",15]]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"init","","",1,[[],["usize",15]]],[11,"deref","","",1,[[["usize",15]]]],[11,"deref_mut","","",1,[[["usize",15]]]],[11,"drop","","",1,[[["usize",15]]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"init","","",2,[[],["usize",15]]],[11,"deref","","",2,[[["usize",15]]]],[11,"deref_mut","","",2,[[["usize",15]]]],[11,"drop","","",2,[[["usize",15]]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"init","","",3,[[],["usize",15]]],[11,"deref","","",3,[[["usize",15]]]],[11,"deref_mut","","",3,[[["usize",15]]]],[11,"drop","","",3,[[["usize",15]]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"init","","",4,[[],["usize",15]]],[11,"deref","","",4,[[["usize",15]]]],[11,"deref_mut","","",4,[[["usize",15]]]],[11,"drop","","",4,[[["usize",15]]]],[11,"from","","",22,[[]]],[11,"into","","",22,[[]]],[11,"to_owned","","",22,[[]]],[11,"clone_into","","",22,[[]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"vzip","","",22,[[]]],[11,"init","","",22,[[],["usize",15]]],[11,"deref","","",22,[[["usize",15]]]],[11,"deref_mut","","",22,[[["usize",15]]]],[11,"drop","","",22,[[["usize",15]]]],[11,"from","forest_libp2p","",8,[[]]],[11,"into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"vzip","","",8,[[]]],[11,"init","","",8,[[],["usize",15]]],[11,"deref","","",8,[[["usize",15]]]],[11,"deref_mut","","",8,[[["usize",15]]]],[11,"drop","","",8,[[["usize",15]]]],[11,"from","forest_libp2p::hello","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"vzip","","",5,[[]]],[11,"init","","",5,[[],["usize",15]]],[11,"deref","","",5,[[["usize",15]]]],[11,"deref_mut","","",5,[[["usize",15]]]],[11,"drop","","",5,[[["usize",15]]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"vzip","","",6,[[]]],[11,"init","","",6,[[],["usize",15]]],[11,"deref","","",6,[[["usize",15]]]],[11,"deref_mut","","",6,[[["usize",15]]]],[11,"drop","","",6,[[["usize",15]]]],[11,"from","","",23,[[]]],[11,"into","","",23,[[]]],[11,"to_owned","","",23,[[]]],[11,"clone_into","","",23,[[]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"vzip","","",23,[[]]],[11,"init","","",23,[[],["usize",15]]],[11,"deref","","",23,[[["usize",15]]]],[11,"deref_mut","","",23,[[["usize",15]]]],[11,"drop","","",23,[[["usize",15]]]],[11,"from","forest_libp2p::rpc","",24,[[]]],[11,"into","","",24,[[]]],[11,"to_owned","","",24,[[]]],[11,"clone_into","","",24,[[]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"vzip","","",24,[[]]],[11,"init","","",24,[[],["usize",15]]],[11,"deref","","",24,[[["usize",15]]]],[11,"deref_mut","","",24,[[["usize",15]]]],[11,"drop","","",24,[[["usize",15]]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"vzip","","",7,[[]]],[11,"init","","",7,[[],["usize",15]]],[11,"deref","","",7,[[["usize",15]]]],[11,"deref_mut","","",7,[[["usize",15]]]],[11,"drop","","",7,[[["usize",15]]]],[11,"from","forest_libp2p","",25,[[]]],[11,"into","","",25,[[]]],[11,"to_owned","","",25,[[]]],[11,"clone_into","","",25,[[]]],[11,"to_string","","",25,[[],["string",3]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"vzip","","",25,[[]]],[11,"init","","",25,[[],["usize",15]]],[11,"deref","","",25,[[["usize",15]]]],[11,"deref_mut","","",25,[[["usize",15]]]],[11,"drop","","",25,[[["usize",15]]]],[11,"equivalent","","",25,[[],["bool",15]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"vzip","","",9,[[]]],[11,"init","","",9,[[],["usize",15]]],[11,"deref","","",9,[[["usize",15]]]],[11,"deref_mut","","",9,[[["usize",15]]]],[11,"drop","","",9,[[["usize",15]]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"to_owned","","",14,[[]]],[11,"clone_into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"vzip","","",14,[[]]],[11,"init","","",14,[[],["usize",15]]],[11,"deref","","",14,[[["usize",15]]]],[11,"deref_mut","","",14,[[["usize",15]]]],[11,"drop","","",14,[[["usize",15]]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"vzip","","",15,[[]]],[11,"init","","",15,[[],["usize",15]]],[11,"deref","","",15,[[["usize",15]]]],[11,"deref_mut","","",15,[[["usize",15]]]],[11,"drop","","",15,[[["usize",15]]]],[11,"from","","",21,[[]]],[11,"into","","",21,[[]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"vzip","","",21,[[]]],[11,"init","","",21,[[],["usize",15]]],[11,"deref","","",21,[[["usize",15]]]],[11,"deref_mut","","",21,[[["usize",15]]]],[11,"drop","","",21,[[["usize",15]]]],[11,"from","","",26,[[]]],[11,"into","","",26,[[]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"vzip","","",26,[[]]],[11,"init","","",26,[[],["usize",15]]],[11,"deref","","",26,[[["usize",15]]]],[11,"deref_mut","","",26,[[["usize",15]]]],[11,"drop","","",26,[[["usize",15]]]],[11,"from","","",27,[[]]],[11,"into","","",27,[[]]],[11,"to_owned","","",27,[[]]],[11,"clone_into","","",27,[[]]],[11,"to_string","","",27,[[],["string",3]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"vzip","","",27,[[]]],[11,"get_hash","","",27,[[],["u64",15]]],[11,"init","","",27,[[],["usize",15]]],[11,"deref","","",27,[[["usize",15]]]],[11,"deref_mut","","",27,[[["usize",15]]]],[11,"drop","","",27,[[["usize",15]]]],[11,"get_hash","","",27,[[],["u64",15]]],[11,"equivalent","","",27,[[],["bool",15]]],[11,"get_hash","","",27,[[],["u64",15]]],[11,"from","","",28,[[]]],[11,"into","","",28,[[]]],[11,"to_owned","","",28,[[]]],[11,"clone_into","","",28,[[]]],[11,"to_string","","",28,[[],["string",3]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"protocol_name","","",28,[[]]],[11,"encode_hex","","",28,[[]]],[11,"encode_hex_upper","","",28,[[]]],[11,"vzip","","",28,[[]]],[11,"get_hash","","",28,[[],["u64",15]]],[11,"as_byte_slice","","",28,[[]]],[11,"as_slice_of","","",28,[[],[["result",4],["error",4]]]],[11,"init","","",28,[[],["usize",15]]],[11,"deref","","",28,[[["usize",15]]]],[11,"deref_mut","","",28,[[["usize",15]]]],[11,"drop","","",28,[[["usize",15]]]],[11,"get_hash","","",28,[[],["u64",15]]],[11,"equivalent","","",28,[[],["bool",15]]],[11,"get_hash","","",28,[[],["u64",15]]],[11,"try_from","","",28,[[["vec",3],["u8",15],["global",3]],[["error",4],["result",4],["multiaddr",3]]]],[11,"try_from","","",28,[[["string",3]],[["error",4],["result",4],["multiaddr",3]]]],[11,"try_from","","",28,[[["str",15]],[["error",4],["result",4],["multiaddr",3]]]],[11,"fmt","","",28,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","Convert a Multiaddr to a string",28,[[["formatter",3]],[["error",3],["result",4]]]],[11,"hash","","",28,[[]]],[11,"partial_cmp","","",28,[[["multiaddr",3]],[["option",4],["ordering",4]]]],[11,"lt","","",28,[[["multiaddr",3]],["bool",15]]],[11,"le","","",28,[[["multiaddr",3]],["bool",15]]],[11,"gt","","",28,[[["multiaddr",3]],["bool",15]]],[11,"ge","","",28,[[["multiaddr",3]],["bool",15]]],[11,"serialize","","",28,[[],["result",4]]],[11,"from","","",28,[[["ipv6addr",3]],["multiaddr",3]]],[11,"from","","",28,[[["protocol",4]],["multiaddr",3]]],[11,"from","","",28,[[["ipaddr",4]],["multiaddr",3]]],[11,"from","","",28,[[["ipv4addr",3]],["multiaddr",3]]],[11,"as_ref","","",28,[[]]],[11,"from_iter","","",28,[[],["multiaddr",3]]],[11,"clone","","",28,[[],["multiaddr",3]]],[11,"cmp","","",28,[[["multiaddr",3]],["ordering",4]]],[11,"eq","","",28,[[["multiaddr",3]],["bool",15]]],[11,"ne","","",28,[[["multiaddr",3]],["bool",15]]],[11,"deserialize","","",28,[[],[["result",4],["multiaddr",3]]]],[11,"from_str","","",28,[[["str",15]],[["error",4],["result",4],["multiaddr",3]]]],[11,"try_from","","",27,[[["vec",3],["u8",15],["global",3]],[["peerid",3],["result",4]]]],[11,"try_from","","",27,[[["uint",3],["multihash",3]],[["peerid",3],["result",4]]]],[11,"fmt","","",27,[[["formatter",3]],[["error",3],["result",4]]]],[11,"hash","","",27,[[]]],[11,"from","","",27,[[["publickey",4]],["peerid",3]]],[11,"clone","","",27,[[],["peerid",3]]],[11,"from_str","","",27,[[["str",15]],[["result",4],["peerid",3]]]],[11,"eq","","",27,[[["peerid",3]],["bool",15]]],[11,"ne","","",27,[[["peerid",3]],["bool",15]]],[11,"fmt","","",27,[[["formatter",3]],[["error",3],["result",4]]]],[11,"partial_cmp","","",27,[[["peerid",3]],[["option",4],["ordering",4]]]],[11,"lt","","",27,[[["peerid",3]],["bool",15]]],[11,"le","","",27,[[["peerid",3]],["bool",15]]],[11,"gt","","",27,[[["peerid",3]],["bool",15]]],[11,"ge","","",27,[[["peerid",3]],["bool",15]]],[11,"as_ref","","",27,[[],["multihash",3]]],[11,"cmp","","",27,[[["peerid",3]],["ordering",4]]],[11,"fmt","","",25,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",25,[[["formatter",3]],[["error",3],["result",4]]]],[11,"partial_cmp","","",25,[[["topic",3]],[["option",4],["ordering",4]]]],[11,"lt","","",25,[[["topic",3]],["bool",15]]],[11,"le","","",25,[[["topic",3]],["bool",15]]],[11,"gt","","",25,[[["topic",3]],["bool",15]]],[11,"ge","","",25,[[["topic",3]],["bool",15]]],[11,"clone","","",25,[[],["topic",3]]],[11,"cmp","","",25,[[["topic",3]],["ordering",4]]],[11,"eq","","",25,[[["topic",3]],["bool",15]]],[11,"ne","","",25,[[["topic",3]],["bool",15]]],[11,"from","forest_libp2p::rpc","",7,[[["outboundfailure",4]]]],[11,"clone","forest_libp2p::chain_exchange","",0,[[],["chainexchangerequest",3]]],[11,"clone","","",1,[[],["chainexchangeresponsestatus",4]]],[11,"clone","","",2,[[],["chainexchangeresponse",3]]],[11,"clone","","",3,[[],["compactedmessages",3]]],[11,"clone","","",4,[[],["tipsetbundle",3]]],[11,"clone","","",22,[[],["chainexchangeprotocolname",3]]],[11,"clone","forest_libp2p::hello","",5,[[],["hellorequest",3]]],[11,"clone","","",6,[[],["helloresponse",3]]],[11,"clone","","",23,[[],["helloprotocolname",3]]],[11,"clone","forest_libp2p::rpc","",24,[[],["cborrequestresponse",3]]],[11,"clone","forest_libp2p","",14,[[],["pubsubmessage",4]]],[11,"default","forest_libp2p::chain_exchange","",4,[[],["tipsetbundle",3]]],[11,"default","","",22,[[],["chainexchangeprotocolname",3]]],[11,"default","forest_libp2p","",8,[[]]],[11,"default","forest_libp2p::hello","",23,[[],["helloprotocolname",3]]],[11,"default","forest_libp2p::rpc","",24,[[]]],[11,"eq","forest_libp2p::chain_exchange","",0,[[["chainexchangerequest",3]],["bool",15]]],[11,"ne","","",0,[[["chainexchangerequest",3]],["bool",15]]],[11,"eq","","",1,[[["chainexchangeresponsestatus",4]],["bool",15]]],[11,"ne","","",1,[[["chainexchangeresponsestatus",4]],["bool",15]]],[11,"eq","","",2,[[["chainexchangeresponse",3]],["bool",15]]],[11,"ne","","",2,[[["chainexchangeresponse",3]],["bool",15]]],[11,"eq","","",3,[[["compactedmessages",3]],["bool",15]]],[11,"ne","","",3,[[["compactedmessages",3]],["bool",15]]],[11,"eq","","",4,[[["tipsetbundle",3]],["bool",15]]],[11,"ne","","",4,[[["tipsetbundle",3]],["bool",15]]],[11,"eq","","",22,[[["chainexchangeprotocolname",3]],["bool",15]]],[11,"eq","forest_libp2p::hello","",5,[[["hellorequest",3]],["bool",15]]],[11,"ne","","",5,[[["hellorequest",3]],["bool",15]]],[11,"eq","","",6,[[["helloresponse",3]],["bool",15]]],[11,"ne","","",6,[[["helloresponse",3]],["bool",15]]],[11,"eq","","",23,[[["helloprotocolname",3]],["bool",15]]],[11,"fmt","forest_libp2p::chain_exchange","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",22,[[["formatter",3]],["result",6]]],[11,"fmt","forest_libp2p","",8,[[["formatter",3]],["result",6]]],[11,"fmt","forest_libp2p::hello","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",23,[[["formatter",3]],["result",6]]],[11,"fmt","forest_libp2p::rpc","",7,[[["formatter",3]],["result",6]]],[11,"fmt","forest_libp2p","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",21,[[["formatter",3]],["result",6]]],[11,"try_from","forest_libp2p::chain_exchange","",3,[[["tipsetbundle",3]],["result",4]]],[11,"serialize","","",0,[[],["result",4]]],[11,"serialize","","",1,[[],["result",4]]],[11,"serialize","","",2,[[],["result",4]]],[11,"serialize","","",3,[[],["result",4]]],[11,"serialize","","",4,[[],["result",4]]],[11,"serialize","forest_libp2p::hello","",5,[[],["result",4]]],[11,"serialize","","",6,[[],["result",4]]],[11,"deserialize","forest_libp2p::chain_exchange","",0,[[],["result",4]]],[11,"deserialize","","",1,[[],["result",4]]],[11,"deserialize","","",2,[[],["result",4]]],[11,"deserialize","","",3,[[],["result",4]]],[11,"deserialize","","",4,[[],["result",4]]],[11,"deserialize","forest_libp2p","",8,[[],["result",4]]],[11,"deserialize","forest_libp2p::hello","",5,[[],["result",4]]],[11,"deserialize","","",6,[[],["result",4]]],[11,"protocol_name","forest_libp2p::chain_exchange","",22,[[]]],[11,"protocol_name","forest_libp2p::hello","",23,[[]]],[11,"read_request","forest_libp2p::rpc","",24,[[],[["pin",3],["box",3]]]],[11,"read_response","","",24,[[],[["pin",3],["box",3]]]],[11,"write_request","","",24,[[],[["box",3],["pin",3]]]],[11,"write_response","","",24,[[],[["box",3],["pin",3]]]],[11,"include_blocks","forest_libp2p::chain_exchange","If a request has the [HEADERS] bit set and requests …",0,[[],["bool",15]]],[11,"include_messages","","If a request has the [MESSAGES] bit set and requests …",0,[[],["bool",15]]],[11,"into_result","","Converts chain_exchange response into result. Returns an …",2,[[],[["result",4],["string",3],["vec",3]]]],[11,"new","forest_libp2p","",25,[[],["topic",3]]],[11,"hash","","",25,[[],["topichash",3]]],[11,"new","","",26,[[["keypair",4],["str",15],["arc",3],["libp2pconfig",3],["chainstore",3]]]],[11,"run","","Starts the libp2p service networking stack. This Future …",26,[[]]],[11,"network_sender","","Returns a sender which allows sending messages to the …",26,[[],[["networkmessage",4],["sender",3]]]],[11,"network_receiver","","Returns a receiver to listen to network events emitted …",26,[[],[["receiver",3],["networkevent",4]]]],[11,"from_public_key","","Builds a <code>PeerId</code> from a public key.",27,[[["publickey",4]],["peerid",3]]],[11,"from_bytes","","Parses a <code>PeerId</code> from bytes.",27,[[],[["result",4],["error",4],["peerid",3]]]],[11,"from_multihash","","Tries to turn a <code>Multihash</code> into a <code>PeerId</code>.",27,[[["uint",3],["multihash",3]],[["multihash",3],["result",4],["peerid",3]]]],[11,"random","","Generates a random peer ID from a cryptographically …",27,[[],["peerid",3]]],[11,"to_bytes","","Returns a raw bytes representation of this <code>PeerId</code>.",27,[[],[["vec",3],["global",3],["u8",15]]]],[11,"to_base58","","Returns a base-58 encoded string of this <code>PeerId</code>.",27,[[],["string",3]]],[11,"is_public_key","","Checks whether the public key passed as parameter matches …",27,[[["publickey",4]],[["option",4],["bool",15]]]],[11,"empty","","Create a new, empty multiaddress.",28,[[],["multiaddr",3]]],[11,"with_capacity","","Create a new, empty multiaddress with the given capacity.",28,[[["usize",15]],["multiaddr",3]]],[11,"len","","Return the length in bytes of this multiaddress.",28,[[],["usize",15]]],[11,"is_empty","","Returns true if the length of this multiaddress is 0.",28,[[],["bool",15]]],[11,"to_vec","","Return a copy of this [<code>Multiaddr</code>]\'s byte representation.",28,[[],[["vec",3],["global",3],["u8",15]]]],[11,"push","","Adds an already-parsed address component to the end of …",28,[[["protocol",4]]]],[11,"pop","","Pops the last <code>Protocol</code> of this multiaddr, or <code>None</code> if the …",28,[[],[["option",4],["protocol",4]]]],[11,"with","","Like [<code>Multiaddr::push</code>] but consumes <code>self</code>.",28,[[["protocol",4]],["multiaddr",3]]],[11,"iter","","Returns the components of this multiaddress.",28,[[],["iter",3]]],[11,"replace","","Replace a [<code>Protocol</code>] at some position in this <code>Multiaddr</code>.",28,[[["usize",15]],[["option",4],["multiaddr",3]]]]],"p":[[3,"ChainExchangeRequest"],[4,"ChainExchangeResponseStatus"],[3,"ChainExchangeResponse"],[3,"CompactedMessages"],[3,"TipsetBundle"],[3,"HelloRequest"],[3,"HelloResponse"],[4,"RequestResponseError"],[3,"Libp2pConfig"],[4,"NetworkEvent"],[13,"PubsubMessage"],[13,"HelloRequest"],[13,"ChainExchangeRequest"],[13,"BitswapBlock"],[4,"PubsubMessage"],[4,"NetworkMessage"],[13,"PubsubMessage"],[13,"ChainExchangeRequest"],[13,"HelloRequest"],[13,"BitswapRequest"],[13,"JSONRPCRequest"],[4,"NetRPCMethods"],[3,"ChainExchangeProtocolName"],[3,"HelloProtocolName"],[3,"CborRequestResponse"],[3,"Topic"],[3,"Libp2pService"],[3,"PeerId"],[3,"Multiaddr"]]},\
"forest_message":{"doc":"","i":[[0,"chain_message","forest_message","",null,null],[4,"ChainMessage","forest_message::chain_message","Enum to encpasulate signed and unsigned messages. Useful …",null,null],[13,"Unsigned","","",0,null],[13,"Signed","","",0,null],[11,"message","","",0,[[],["unsignedmessage",3]]],[0,"message_receipt","forest_message","",null,null],[0,"json","forest_message::message_receipt","",null,null],[0,"vec","forest_message::message_receipt::json","",null,null],[5,"serialize","forest_message::message_receipt::json::vec","",null,[[],["result",4]]],[5,"deserialize","","",null,[[],[["vec",3],["result",4]]]],[0,"opt","forest_message::message_receipt::json","",null,null],[5,"serialize","forest_message::message_receipt::json::opt","",null,[[["option",4]],["result",4]]],[5,"deserialize","","",null,[[],[["option",4],["result",4]]]],[3,"MessageReceiptJson","forest_message::message_receipt::json","Wrapper for serializing and deserializing a SignedMessage …",null,null],[12,"0","","",1,null],[3,"MessageReceiptJsonRef","","Wrapper for serializing a SignedMessage reference to JSON.",null,null],[12,"0","","",2,null],[5,"serialize","","",null,[[["messagereceipt",3]],["result",4]]],[5,"deserialize","","",null,[[],[["result",4],["messagereceipt",3]]]],[3,"MessageReceipt","forest_message::message_receipt","Result of a state transition from a message",null,null],[12,"exit_code","","",3,null],[12,"return_data","","",3,null],[12,"gas_used","","",3,null],[0,"signed_message","forest_message","",null,null],[0,"json","forest_message::signed_message","",null,null],[0,"vec","forest_message::signed_message::json","",null,null],[5,"serialize","forest_message::signed_message::json::vec","",null,[[],["result",4]]],[5,"deserialize","","",null,[[],[["result",4],["vec",3]]]],[3,"SignedMessageJson","forest_message::signed_message::json","Wrapper for serializing and deserializing a SignedMessage …",null,null],[12,"0","","",4,null],[3,"SignedMessageJsonRef","","Wrapper for serializing a SignedMessage reference to JSON.",null,null],[12,"0","","",5,null],[5,"serialize","","",null,[[["signedmessage",3]],["result",4]]],[5,"deserialize","","",null,[[],[["signedmessage",3],["result",4]]]],[3,"SignedMessage","forest_message::signed_message","Represents a wrapped message with signature bytes.",null,null],[12,"message","","",6,null],[12,"signature","","",6,null],[11,"new","","Generate new signed message from an unsigned message and …",6,[[["unsignedmessage",3]],[["cryptoerror",4],["result",4]]]],[11,"new_from_parts","","Generate a new signed message from fields.",6,[[["unsignedmessage",3],["signature",3]],[["result",4],["signedmessage",3],["string",3]]]],[11,"message","","Returns reference to the unsigned message.",6,[[],["unsignedmessage",3]]],[11,"signature","","Returns signature of the signed message.",6,[[],["signature",3]]],[11,"into_message","","Consumes self and returns it\'s unsigned message.",6,[[],["unsignedmessage",3]]],[11,"is_bls","","Checks if the signed message is a BLS message.",6,[[],["bool",15]]],[11,"is_secp256k1","","Checks if the signed message is a Secp256k1 message.",6,[[],["bool",15]]],[11,"verify","","Verifies that the from address of the message generated …",6,[[],[["string",3],["result",4]]]],[0,"unsigned_message","forest_message","",null,null],[0,"json","forest_message::unsigned_message","",null,null],[0,"vec","forest_message::unsigned_message::json","",null,null],[5,"serialize","forest_message::unsigned_message::json::vec","",null,[[],["result",4]]],[5,"deserialize","","",null,[[],[["vec",3],["result",4]]]],[3,"UnsignedMessageJson","forest_message::unsigned_message::json","Wrapper for serializing and deserializing a …",null,null],[12,"0","","",7,null],[3,"UnsignedMessageJsonRef","","Wrapper for serializing a UnsignedMessage reference to …",null,null],[12,"0","","",8,null],[5,"serialize","","",null,[[["unsignedmessage",3]],["result",4]]],[5,"deserialize","","",null,[[],[["result",4],["unsignedmessage",3]]]],[3,"UnsignedMessage","forest_message::unsigned_message","Default Unsigned VM message type which includes all data …",null,null],[12,"version","","",9,null],[12,"from","","",9,null],[12,"to","","",9,null],[12,"sequence","","",9,null],[12,"value","","",9,null],[12,"method_num","","",9,null],[12,"params","","",9,null],[12,"gas_limit","","",9,null],[12,"gas_fee_cap","","",9,null],[12,"gas_premium","","",9,null],[3,"MessageBuilder","","Builder for <code>UnsignedMessage</code>.",null,null],[11,"version","","",10,[[["i64",15]]]],[11,"from","","",10,[[["address",3]]]],[11,"to","","",10,[[["address",3]]]],[11,"sequence","","",10,[[["u64",15]]]],[11,"value","","",10,[[["tokenamount",6]]]],[11,"method_num","","",10,[[["methodnum",6]]]],[11,"params","","",10,[[["serialized",3]]]],[11,"gas_limit","","",10,[[["i64",15]]]],[11,"gas_fee_cap","","",10,[[["tokenamount",6]]]],[11,"gas_premium","","",10,[[["tokenamount",6]]]],[11,"build","","Builds a new <code>UnsignedMessage</code>.",10,[[],[["string",3],["unsignedmessage",3],["result",4]]]],[11,"builder","","",9,[[],["messagebuilder",3]]],[11,"to_signing_bytes","","Helper function to convert the message into signing bytes.…",9,[[],[["vec",3],["u8",15]]]],[11,"valid_for_block_inclusion","","Semantic validation and validates the message has enough …",9,[[["i64",15],["networkversion",4]],[["string",3],["result",4]]]],[8,"Message","forest_message","Message interface to interact with Signed and unsigned …",null,null],[10,"from","","Returns the from address of the message.",11,[[],["address",3]]],[10,"to","","Returns the destination address of the message.",11,[[],["address",3]]],[10,"sequence","","Returns the message sequence or nonce.",11,[[],["u64",15]]],[10,"value","","Returns the amount sent in message.",11,[[],["tokenamount",6]]],[10,"method_num","","Returns the method number to be called.",11,[[],["methodnum",6]]],[10,"params","","Returns the encoded parameters for the method call.",11,[[],["serialized",3]]],[10,"set_gas_limit","","sets the gas limit for the message.",11,[[["i64",15]]]],[10,"set_sequence","","sets a new sequence to the message.",11,[[["u64",15]]]],[10,"gas_limit","","Returns the gas limit for the message.",11,[[],["i64",15]]],[10,"required_funds","","Returns the required funds for the message.",11,[[],["tokenamount",6]]],[10,"gas_fee_cap","","gets gas fee cap for the message.",11,[[],["tokenamount",6]]],[10,"gas_premium","","gets gas premium for the message.",11,[[],["tokenamount",6]]],[10,"set_gas_fee_cap","","sets the gas fee cap.",11,[[["tokenamount",6]]]],[10,"set_gas_premium","","sets the gas premium.",11,[[["tokenamount",6]]]],[11,"from","forest_message::chain_message","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"init","","",0,[[],["usize",15]]],[11,"deref","","",0,[[["usize",15]]]],[11,"deref_mut","","",0,[[["usize",15]]]],[11,"drop","","",0,[[["usize",15]]]],[11,"from","forest_message::message_receipt::json","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"init","","",1,[[],["usize",15]]],[11,"deref","","",1,[[["usize",15]]]],[11,"deref_mut","","",1,[[["usize",15]]]],[11,"drop","","",1,[[["usize",15]]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"init","","",2,[[],["usize",15]]],[11,"deref","","",2,[[["usize",15]]]],[11,"deref_mut","","",2,[[["usize",15]]]],[11,"drop","","",2,[[["usize",15]]]],[11,"from","forest_message::message_receipt","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"init","","",3,[[],["usize",15]]],[11,"deref","","",3,[[["usize",15]]]],[11,"deref_mut","","",3,[[["usize",15]]]],[11,"drop","","",3,[[["usize",15]]]],[11,"from","forest_message::signed_message::json","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"init","","",4,[[],["usize",15]]],[11,"deref","","",4,[[["usize",15]]]],[11,"deref_mut","","",4,[[["usize",15]]]],[11,"drop","","",4,[[["usize",15]]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"vzip","","",5,[[]]],[11,"init","","",5,[[],["usize",15]]],[11,"deref","","",5,[[["usize",15]]]],[11,"deref_mut","","",5,[[["usize",15]]]],[11,"drop","","",5,[[["usize",15]]]],[11,"from","forest_message::signed_message","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"vzip","","",6,[[]]],[11,"init","","",6,[[],["usize",15]]],[11,"deref","","",6,[[["usize",15]]]],[11,"deref_mut","","",6,[[["usize",15]]]],[11,"drop","","",6,[[["usize",15]]]],[11,"from","forest_message::unsigned_message::json","",7,[[]]],[11,"into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"vzip","","",7,[[]]],[11,"init","","",7,[[],["usize",15]]],[11,"deref","","",7,[[["usize",15]]]],[11,"deref_mut","","",7,[[["usize",15]]]],[11,"drop","","",7,[[["usize",15]]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"vzip","","",8,[[]]],[11,"init","","",8,[[],["usize",15]]],[11,"deref","","",8,[[["usize",15]]]],[11,"deref_mut","","",8,[[["usize",15]]]],[11,"drop","","",8,[[["usize",15]]]],[11,"from","forest_message::unsigned_message","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"vzip","","",9,[[]]],[11,"init","","",9,[[],["usize",15]]],[11,"deref","","",9,[[["usize",15]]]],[11,"deref_mut","","",9,[[["usize",15]]]],[11,"drop","","",9,[[["usize",15]]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"vzip","","",10,[[]]],[11,"init","","",10,[[],["usize",15]]],[11,"deref","","",10,[[["usize",15]]]],[11,"deref_mut","","",10,[[["usize",15]]]],[11,"drop","","",10,[[["usize",15]]]],[11,"from","forest_message::chain_message","",0,[[],["address",3]]],[11,"to","","",0,[[],["address",3]]],[11,"sequence","","",0,[[],["u64",15]]],[11,"value","","",0,[[],["tokenamount",6]]],[11,"method_num","","",0,[[],["methodnum",6]]],[11,"params","","",0,[[],["serialized",3]]],[11,"gas_limit","","",0,[[],["i64",15]]],[11,"set_gas_limit","","",0,[[["i64",15]]]],[11,"set_sequence","","",0,[[["u64",15]]]],[11,"required_funds","","",0,[[],["tokenamount",6]]],[11,"gas_fee_cap","","",0,[[],["tokenamount",6]]],[11,"gas_premium","","",0,[[],["tokenamount",6]]],[11,"set_gas_fee_cap","","",0,[[["tokenamount",6]]]],[11,"set_gas_premium","","",0,[[["tokenamount",6]]]],[11,"from","forest_message::signed_message","",6,[[],["address",3]]],[11,"to","","",6,[[],["address",3]]],[11,"sequence","","",6,[[],["u64",15]]],[11,"value","","",6,[[],["tokenamount",6]]],[11,"method_num","","",6,[[],["methodnum",6]]],[11,"params","","",6,[[],["serialized",3]]],[11,"gas_limit","","",6,[[],["i64",15]]],[11,"set_gas_limit","","",6,[[["i64",15]]]],[11,"set_sequence","","",6,[[["u64",15]]]],[11,"required_funds","","",6,[[],["tokenamount",6]]],[11,"gas_fee_cap","","",6,[[],["tokenamount",6]]],[11,"gas_premium","","",6,[[],["tokenamount",6]]],[11,"set_gas_fee_cap","","",6,[[["tokenamount",6]]]],[11,"set_gas_premium","","",6,[[["tokenamount",6]]]],[11,"from","forest_message::unsigned_message","",9,[[],["address",3]]],[11,"to","","",9,[[],["address",3]]],[11,"sequence","","",9,[[],["u64",15]]],[11,"value","","",9,[[],["tokenamount",6]]],[11,"method_num","","",9,[[],["methodnum",6]]],[11,"params","","",9,[[],["serialized",3]]],[11,"set_sequence","","",9,[[["u64",15]]]],[11,"gas_limit","","",9,[[],["i64",15]]],[11,"gas_fee_cap","","",9,[[],["tokenamount",6]]],[11,"gas_premium","","",9,[[],["tokenamount",6]]],[11,"set_gas_limit","","",9,[[["i64",15]]]],[11,"set_gas_fee_cap","","",9,[[["tokenamount",6]]]],[11,"set_gas_premium","","",9,[[["tokenamount",6]]]],[11,"required_funds","","",9,[[],["tokenamount",6]]],[11,"from","forest_message::message_receipt","",3,[[["messagereceiptjson",3]]]],[11,"from","forest_message::message_receipt::json","",1,[[["messagereceipt",3]]]],[11,"from","forest_message::signed_message","",6,[[["signedmessagejson",3]]]],[11,"from","forest_message::signed_message::json","",4,[[["signedmessage",3]]]],[11,"from","forest_message::unsigned_message","",9,[[["unsignedmessagejson",3]]]],[11,"from","forest_message::unsigned_message::json","",7,[[["unsignedmessage",3]]]],[11,"clone","forest_message::chain_message","",0,[[],["chainmessage",4]]],[11,"clone","forest_message::message_receipt","",3,[[],["messagereceipt",3]]],[11,"clone","forest_message::signed_message","",6,[[],["signedmessage",3]]],[11,"clone","forest_message::unsigned_message","",9,[[],["unsignedmessage",3]]],[11,"clone","","",10,[[],["messagebuilder",3]]],[11,"default","","",10,[[],["messagebuilder",3]]],[11,"eq","forest_message::message_receipt","",3,[[["messagereceipt",3]],["bool",15]]],[11,"ne","","",3,[[["messagereceipt",3]],["bool",15]]],[11,"eq","forest_message::signed_message","",6,[[["signedmessage",3]],["bool",15]]],[11,"ne","","",6,[[["signedmessage",3]],["bool",15]]],[11,"eq","forest_message::unsigned_message","",9,[[["unsignedmessage",3]],["bool",15]]],[11,"ne","","",9,[[["unsignedmessage",3]],["bool",15]]],[11,"fmt","forest_message::chain_message","",0,[[["formatter",3]],["result",6]]],[11,"fmt","forest_message::message_receipt","",3,[[["formatter",3]],["result",6]]],[11,"fmt","forest_message::signed_message","",6,[[["formatter",3]],["result",6]]],[11,"fmt","forest_message::unsigned_message","",9,[[["formatter",3]],["result",6]]],[11,"fmt","forest_message::unsigned_message::json","",7,[[["formatter",3]],["result",6]]],[11,"hash","forest_message::chain_message","",0,[[]]],[11,"hash","forest_message::signed_message","",6,[[]]],[11,"hash","forest_message::unsigned_message","",9,[[]]],[11,"serialize","forest_message::chain_message","",0,[[],["result",4]]],[11,"serialize","forest_message::message_receipt","",3,[[],["result",4]]],[11,"serialize","forest_message::message_receipt::json","",1,[[],["result",4]]],[11,"serialize","","",2,[[],["result",4]]],[11,"serialize","forest_message::signed_message","",6,[[],["result",4]]],[11,"serialize","forest_message::signed_message::json","",4,[[],["result",4]]],[11,"serialize","","",5,[[],["result",4]]],[11,"serialize","forest_message::unsigned_message","",9,[[],["result",4]]],[11,"serialize","forest_message::unsigned_message::json","",7,[[],["result",4]]],[11,"serialize","","",8,[[],["result",4]]],[11,"deserialize","forest_message::chain_message","",0,[[],["result",4]]],[11,"deserialize","forest_message::message_receipt","",3,[[],["result",4]]],[11,"deserialize","forest_message::message_receipt::json","",1,[[],["result",4]]],[11,"deserialize","forest_message::signed_message","",6,[[],["result",4]]],[11,"deserialize","forest_message::signed_message::json","",4,[[],["result",4]]],[11,"deserialize","forest_message::unsigned_message","",9,[[],["result",4]]],[11,"deserialize","forest_message::unsigned_message::json","",7,[[],["result",4]]],[11,"cid","forest_message::chain_message","Returns the content identifier of the raw block of data …",0,[[],[["cid",3],["result",4],["error",3]]]],[11,"marshal_cbor","forest_message::signed_message","",6,[[],[["result",4],["vec",3],["error",3]]]]],"p":[[4,"ChainMessage"],[3,"MessageReceiptJson"],[3,"MessageReceiptJsonRef"],[3,"MessageReceipt"],[3,"SignedMessageJson"],[3,"SignedMessageJsonRef"],[3,"SignedMessage"],[3,"UnsignedMessageJson"],[3,"UnsignedMessageJsonRef"],[3,"UnsignedMessage"],[3,"MessageBuilder"],[8,"Message"]]},\
"forest_runtime":{"doc":"","i":[[8,"ActorCode","forest_runtime","Interface for invoking methods on an Actor",null,null],[10,"invoke_method","","Invokes method with runtime on the actor\'s code. Method …",0,[[["methodnum",6],["serialized",3]],[["result",4],["serialized",3],["actorerror",3]]]],[8,"Runtime","","Runtime is the VM\'s internal runtime object. this is …",null,null],[10,"network_version","","The network protocol version number at the current epoch.",1,[[],["networkversion",4]]],[10,"message","","Information related to the current message being executed.",1,[[],["messageinfo",8]]],[10,"curr_epoch","","The current chain epoch number. The genesis block has …",1,[[],["chainepoch",6]]],[10,"validate_immediate_caller_accept_any","","Validates the caller against some predicate. Exported …",1,[[],[["actorerror",3],["result",4]]]],[10,"validate_immediate_caller_is","","",1,[[],[["actorerror",3],["result",4]]]],[10,"validate_immediate_caller_type","","",1,[[],[["actorerror",3],["result",4]]]],[10,"current_balance","","The balance of the receiver.",1,[[],[["result",4],["tokenamount",6],["actorerror",3]]]],[10,"resolve_address","","Resolves an address of any protocol to an ID address (via …",1,[[["address",3]],[["option",4],["result",4],["actorerror",3]]]],[10,"get_actor_code_cid","","Look up the code ID at an actor address.",1,[[["address",3]],[["option",4],["actorerror",3],["result",4]]]],[10,"get_randomness_from_tickets","","Randomness returns a (pseudo)random byte array drawing …",1,[[["domainseparationtag",4],["chainepoch",6]],[["actorerror",3],["result",4],["randomness",3]]]],[10,"get_randomness_from_beacon","","Randomness returns a (pseudo)random byte array drawing …",1,[[["domainseparationtag",4],["chainepoch",6]],[["actorerror",3],["result",4],["randomness",3]]]],[10,"create","","Initializes the state object. This is only valid in a …",1,[[],[["actorerror",3],["result",4]]]],[10,"state","","Loads a readonly copy of the state of the receiver into …",1,[[],[["result",4],["actorerror",3],["cbor",8]]]],[10,"transaction","","Loads a mutable version of the state into the <code>obj</code> …",1,[[],[["result",4],["actorerror",3]]]],[10,"store","","Returns reference to blockstore",1,[[]]],[10,"send","","Sends a message to another actor, returning the exit code …",1,[[["tokenamount",6],["address",3],["serialized",3],["methodnum",6]],[["result",4],["serialized",3],["actorerror",3]]]],[10,"new_actor_address","","Computes an address for a new actor. The returned address …",1,[[],[["result",4],["address",3],["actorerror",3]]]],[10,"create_actor","","Creates an actor with code <code>codeID</code> and address <code>address</code>, …",1,[[["cid",3],["address",3]],[["actorerror",3],["result",4]]]],[10,"delete_actor","","Deletes the executing actor from the state tree, …",1,[[["address",3]],[["actorerror",3],["result",4]]]],[10,"total_fil_circ_supply","","Returns the total token supply in circulation at the …",1,[[],[["result",4],["tokenamount",6],["actorerror",3]]]],[10,"charge_gas","","ChargeGas charges specified amount of <code>gas</code> for execution. …",1,[[["i64",15],["str",15]],[["actorerror",3],["result",4]]]],[11,"deserialize_params","","This function is a workaround for go-implementation\'s …",1,[[["serialized",3]],[["deserializeowned",8],["result",4],["actorerror",3]]]],[8,"MessageInfo","","Message information available to the actor about …",null,null],[10,"caller","","The address of the immediate calling actor. Always an …",2,[[],["address",3]]],[10,"receiver","","The address of the actor receiving the message. Always an …",2,[[],["address",3]]],[10,"value_received","","The value attached to the message being processed, …",2,[[],["tokenamount",6]]],[8,"Syscalls","","Pure functions implemented as primitives by the runtime.",null,null],[10,"verify_signature","","Verifies that a signature is valid for an address and …",3,[[["signature",3],["address",3]],[["box",3],["result",4]]]],[11,"hash_blake2b","","Hashes input data using blake2b with 256 bit output.",3,[[],[["box",3],["result",4]]]],[11,"compute_unsealed_sector_cid","","Computes an unsealed sector CID (CommD) from its …",3,[[["registeredsealproof",4]],[["cid",3],["result",4],["box",3]]]],[10,"verify_seal","","Verifies a sector seal proof.",3,[[["sealverifyinfo",3]],[["box",3],["result",4]]]],[10,"verify_post","","Verifies a window proof of spacetime.",3,[[["windowpostverifyinfo",3]],[["box",3],["result",4]]]],[10,"verify_consensus_fault","","Verifies that two block headers provide proof of a …",3,[[],[["option",4],["box",3],["result",4]]]],[11,"batch_verify_seals","","",3,[[],[["box",3],["hashmap",3],["result",4]]]],[3,"ConsensusFault","","Result of checking two headers for a consensus fault.",null,null],[12,"target","","Address of the miner at fault (always an ID address).",4,null],[12,"epoch","","Epoch of the fault, which is the higher epoch of the two …",4,null],[12,"fault_type","","Type of fault.",4,null],[4,"ConsensusFaultType","","Consensus fault types in VM.",null,null],[13,"DoubleForkMining","","",5,null],[13,"ParentGrinding","","",5,null],[13,"TimeOffsetMining","","",5,null],[5,"compute_unsealed_sector_cid","","Computes sector [Cid] from proof type and pieces for …",null,[[["registeredsealproof",4]],[["cid",3],["result",4],["box",3]]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"init","","",4,[[],["usize",15]]],[11,"deref","","",4,[[["usize",15]]]],[11,"deref_mut","","",4,[[["usize",15]]]],[11,"drop","","",4,[[["usize",15]]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"vzip","","",5,[[]]],[11,"init","","",5,[[],["usize",15]]],[11,"deref","","",5,[[["usize",15]]]],[11,"deref_mut","","",5,[[["usize",15]]]],[11,"drop","","",5,[[["usize",15]]]],[11,"clone","","",4,[[],["consensusfault",3]]],[11,"clone","","",5,[[],["consensusfaulttype",4]]]],"p":[[8,"ActorCode"],[8,"Runtime"],[8,"MessageInfo"],[8,"Syscalls"],[3,"ConsensusFault"],[4,"ConsensusFaultType"]]},\
"forest_vm":{"doc":"","i":[[3,"ActorState","forest_vm","State of all actor implementations.",null,null],[12,"code","","Link to code for the actor.",0,null],[12,"state","","Link to the state of the actor.",0,null],[12,"sequence","","Sequence of the actor.",0,null],[12,"balance","","Tokens available to the actor.",0,null],[6,"DealID","","Deal identifier used in market and miner actors",null,null],[3,"ActorError","","The error type that gets returned by actor method calls.",null,null],[4,"ExitCode","","ExitCode defines the exit code from the VM execution.",null,null],[13,"Ok","","",1,null],[13,"SysErrSenderInvalid","","Indicates failure to find an actor in the state tree.",1,null],[13,"SysErrSenderStateInvalid","","Indicates failure to find the code for an actor.",1,null],[13,"SysErrInvalidMethod","","Indicates failure to find a method in an actor.",1,null],[13,"SysErrActorPanic","","Used for catching panics currently. (marked as …",1,null],[13,"SysErrInvalidReceiver","","Indicates a message sender has insufficient funds for a …",1,null],[13,"SysErrInsufficientFunds","","Indicates a message invocation out of sequence.",1,null],[13,"SysErrOutOfGas","","Indicates message execution (including subcalls) used …",1,null],[13,"SysErrForbidden","","Indicates a message execution is forbidden for the caller.",1,null],[13,"SysErrIllegalActor","","Indicates actor code performed a disallowed operation. …",1,null],[13,"SysErrIllegalArgument","","Indicates an invalid argument passed to a runtime method.",1,null],[13,"SysErrReserved2","","Reserved exit codes, do not use.",1,null],[13,"SysErrReserved3","","",1,null],[13,"SysErrReserved4","","",1,null],[13,"SysErrReserved5","","",1,null],[13,"SysErrReserved6","","",1,null],[13,"ErrIllegalArgument","","Indicates a method parameter is invalid.",1,null],[13,"ErrNotFound","","Indicates a requested resource does not exist.",1,null],[13,"ErrForbidden","","Indicates an action is disallowed.",1,null],[13,"ErrInsufficientFunds","","Indicates a balance of funds is insufficient.",1,null],[13,"ErrIllegalState","","Indicates an actor\'s internal state is invalid.",1,null],[13,"ErrSerialization","","Indicates de/serialization failure within actor code.",1,null],[13,"ErrTooManyProveCommits","","Power actor specific exit code.",1,null],[13,"ErrPlaceholder","","",1,null],[6,"MethodNum","","Method number indicator for calling actor methods.",null,null],[17,"METHOD_SEND","","Base actor send method.",null,null],[17,"METHOD_CONSTRUCTOR","","Base actor constructor method.",null,null],[3,"Serialized","","Serialized bytes to be used as parameters into actor …",null,null],[6,"TokenAmount","","Token type to be used within the VM.",null,null],[3,"EMPTY_ARR_BYTES","","Cbor bytes of an empty array serialized.",null,null],[3,"EMPTY_ARR_CID","","Cid of the empty array Cbor bytes (<code>EMPTY_ARR_BYTES</code>).",null,null],[14,"actor_error","","Convenience macro for generating Actor Errors",null,null],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"to_string","","",2,[[],["string",3]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",2,[[["encodingerror",3]]]],[11,"from","","",2,[[["cborerror",3]]]],[11,"clone","","",0,[[],["actorstate",3]]],[11,"clone","","",2,[[],["actorerror",3]]],[11,"clone","","",1,[[],["exitcode",4]]],[11,"clone","","",3,[[],["serialized",3]]],[11,"default","","",3,[[],["serialized",3]]],[11,"eq","","",0,[[["actorstate",3]],["bool",15]]],[11,"ne","","",0,[[["actorstate",3]],["bool",15]]],[11,"eq","","",2,[[["actorerror",3]],["bool",15]]],[11,"ne","","",2,[[["actorerror",3]],["bool",15]]],[11,"eq","","",1,[[["exitcode",4]],["bool",15]]],[11,"eq","","",3,[[["serialized",3]],["bool",15]]],[11,"ne","","",3,[[["serialized",3]],["bool",15]]],[11,"deref","","",3,[[]]],[11,"deref","","",4,[[],["vec",3]]],[11,"deref","","",5,[[],["cid",3]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"hash","","",3,[[]]],[11,"serialize","","",0,[[],["result",4]]],[11,"serialize","","",1,[[],["result",4]]],[11,"serialize","","",3,[[],["result",4]]],[11,"deserialize","","",0,[[],["result",4]]],[11,"deserialize","","",1,[[],["result",4]]],[11,"deserialize","","",3,[[],["result",4]]],[11,"initialize","","",4,[[]]],[11,"initialize","","",5,[[]]],[11,"from_i64","","",1,[[["i64",15]],["option",4]]],[11,"from_u64","","",1,[[["u64",15]],["option",4]]],[11,"new","","Constructor for actor state",0,[[["u64",15],["tokenamount",6],["cid",3]]]],[11,"deduct_funds","","Safely deducts funds from an Actor",0,[[["tokenamount",6]],[["result",4],["string",3]]]],[11,"deposit_funds","","Deposits funds to an Actor",0,[[["tokenamount",6]]]],[11,"new","","",2,[[["exitcode",4],["string",3]]]],[11,"new_fatal","","",2,[[["string",3]]]],[11,"is_fatal","","Returns true if error is fatal.",2,[[],["bool",15]]],[11,"exit_code","","Returns the exit code of the error.",2,[[],["exitcode",4]]],[11,"is_ok","","Returns true when the exit code is <code>Ok</code>.",2,[[],["bool",15]]],[11,"msg","","Error message of the actor error.",2,[[],["str",15]]],[11,"wrap","","Prefix error message with a string message.",2,[[]]],[11,"is_success","","returns true if the exit code was a success",1,[[],["bool",15]]],[11,"new","","Constructor if data is encoded already",3,[[["vec",3],["u8",15]]]],[11,"serialize","","Contructor for encoding Cbor encodable structure.",3,[[["serialize",8]],[["result",4],["encodingerror",3]]]],[11,"bytes","","Returns serialized bytes.",3,[[]]],[11,"deserialize","","Deserializes the serialized bytes into a defined type.",3,[[],[["deserializeowned",8],["result",4],["encodingerror",3]]]]],"p":[[3,"ActorState"],[4,"ExitCode"],[3,"ActorError"],[3,"Serialized"],[3,"EMPTY_ARR_BYTES"],[3,"EMPTY_ARR_CID"]]},\
"genesis":{"doc":"","i":[[5,"initialize_genesis","genesis","Uses an optional file path or the default genesis to …",null,[[["option",4],["string",3],["statemanager",3]]]],[5,"import_chain","","Import a chain from a CAR file. If the snapshot boolean …",null,[[["arc",3],["option",4],["i64",15],["bool",15],["str",15]]]]],"p":[]},\
"interpreter":{"doc":"","i":[[3,"DefaultRuntime","interpreter","Implementation of the Runtime trait.",null,null],[5,"resolve_to_key_addr","","returns the public key type of address (<code>BLS</code>/<code>SECP256K1</code>) of …",null,[[["address",3],["statetree",3]],[["address",3],["result",4],["box",3]]]],[3,"GasCharge","","Single gas charge in the VM. Contains information about …",null,null],[12,"name","","",0,null],[12,"compute_gas","","",0,null],[12,"storage_gas","","",0,null],[5,"price_list_by_epoch","","Returns gas price list by Epoch for gas consumption.",null,[[["chainepoch",6]],["pricelist",3]]],[3,"PriceList","","Provides prices for operations in the VM",null,null],[8,"Rand","","Randomness provider trait",null,null],[10,"get_chain_randomness","","Gets 32 bytes of randomness for ChainRand paramaterized …",1,[[["chainepoch",6],["domainseparationtag",4]],[["result",4],["box",3]]]],[10,"get_beacon_randomness","","Gets 32 bytes of randomness for ChainRand paramaterized …",1,[[["chainepoch",6],["domainseparationtag",4]],[["result",4],["box",3]]]],[3,"BlockMessages","","Contains all messages to process through the VM as well …",null,null],[12,"miner","","",2,null],[12,"messages","","",2,null],[12,"win_count","","",2,null],[8,"CircSupplyCalc","","Allows generation of the current circulating supply given …",null,null],[10,"get_supply","","Retrieves total circulating supply on the network.",3,[[["chainepoch",6],["statetree",3]],[["tokenamount",6],["box",3],["result",4]]]],[8,"LookbackStateGetter","","Trait to allow VM to retrieve state at an old epoch.",null,null],[10,"state_lookback","","Returns a state tree from the given epoch.",4,[[["chainepoch",6]],[["result",4],["statetree",3],["box",3]]]],[3,"VM","","Interpreter which handles execution of state …",null,null],[3,"ApplyRet","","Apply message return data.",null,null],[12,"msg_receipt","","Message receipt for the transaction. This data is stored …",5,null],[12,"act_error","","Actor error from the transaction, if one exists.",5,null],[12,"penalty","","Gas penalty from transaction, if any.",5,null],[12,"miner_tip","","Tip given to miner from message.",5,null],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"vzip","","",6,[[]]],[11,"init","","",6,[[],["usize",15]]],[11,"deref","","",6,[[["usize",15]]]],[11,"deref_mut","","",6,[[["usize",15]]]],[11,"drop","","",6,[[["usize",15]]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"init","","",0,[[],["usize",15]]],[11,"deref","","",0,[[["usize",15]]]],[11,"deref_mut","","",0,[[["usize",15]]]],[11,"drop","","",0,[[["usize",15]]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"vzip","","",7,[[]]],[11,"init","","",7,[[],["usize",15]]],[11,"deref","","",7,[[["usize",15]]]],[11,"deref_mut","","",7,[[["usize",15]]]],[11,"drop","","",7,[[["usize",15]]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"init","","",2,[[],["usize",15]]],[11,"deref","","",2,[[["usize",15]]]],[11,"deref_mut","","",2,[[["usize",15]]]],[11,"drop","","",2,[[["usize",15]]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"vzip","","",8,[[]]],[11,"init","","",8,[[],["usize",15]]],[11,"deref","","",8,[[["usize",15]]]],[11,"deref_mut","","",8,[[["usize",15]]]],[11,"drop","","",8,[[["usize",15]]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"vzip","","",5,[[]]],[11,"init","","",5,[[],["usize",15]]],[11,"deref","","",5,[[["usize",15]]]],[11,"deref_mut","","",5,[[["usize",15]]]],[11,"drop","","",5,[[["usize",15]]]],[11,"clone","","",7,[[],["pricelist",3]]],[11,"clone","","",5,[[],["applyret",3]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"verify_signature","","",6,[[["address",3],["signature",3]],[["result",4],["box",3]]]],[11,"hash_blake2b","","",6,[[],[["box",3],["result",4]]]],[11,"compute_unsealed_sector_cid","","",6,[[["registeredsealproof",4]],[["cid",3],["box",3],["result",4]]]],[11,"verify_seal","","",6,[[["sealverifyinfo",3]],[["result",4],["box",3]]]],[11,"verify_post","","",6,[[["windowpostverifyinfo",3]],[["result",4],["box",3]]]],[11,"verify_consensus_fault","","",6,[[],[["box",3],["result",4],["option",4]]]],[11,"batch_verify_seals","","",6,[[],[["result",4],["hashmap",3],["box",3]]]],[11,"new","","Constructs a new Runtime",6,[[["hashset",3],["u64",15],["i64",15],["networkversion",4],["address",3],["chainepoch",6],["statetree",3],["unsignedmessage",3]],[["result",4],["actorerror",3]]]],[11,"charge_gas","","Adds to amount of used.",6,[[["gascharge",3]],[["actorerror",3],["result",4]]]],[11,"gas_used","","Returns gas used by runtime.",6,[[],["i64",15]]],[11,"price_list","","Returns the price list for gas charges within the runtime.",6,[[],["pricelist",3]]],[11,"send","","Shared logic between the DefaultRuntime and the …",6,[[["option",4],["gascharge",3],["unsignedmessage",3]],[["serialized",3],["result",4],["actorerror",3]]]],[11,"try_create_account_actor","","creates account actors from only BLS/SECP256K1 addresses.",6,[[["address",3]],[["actorerror",3],["result",4]]]],[11,"new","","",0,[[["i64",15],["str",15]]]],[11,"total","","Calculates total gas charge based on compute and storage …",0,[[],["i64",15]]],[11,"on_chain_message","","Returns the gas required for storing a message of a given …",7,[[["usize",15]],["gascharge",3]]],[11,"on_chain_return_value","","Returns the gas required for storing the response of a …",7,[[["usize",15]],["gascharge",3]]],[11,"on_method_invocation","","Returns the gas required when invoking a method.",7,[[["methodnum",6],["tokenamount",6]],["gascharge",3]]],[11,"on_ipld_get","","Returns the gas required for storing an object.",7,[[],["gascharge",3]]],[11,"on_ipld_put","","Returns the gas required for storing an object.",7,[[["usize",15]],["gascharge",3]]],[11,"on_create_actor","","Returns the gas required for creating an actor.",7,[[],["gascharge",3]]],[11,"on_delete_actor","","Returns the gas required for deleting an actor.",7,[[],["gascharge",3]]],[11,"on_verify_signature","","Returns gas required for signature verification.",7,[[["signaturetype",4]],["gascharge",3]]],[11,"on_hashing","","Returns gas required for hashing data.",7,[[["usize",15]],["gascharge",3]]],[11,"on_compute_unsealed_sector_cid","","Returns gas required for computing unsealed sector Cid.",7,[[["registeredsealproof",4]],["gascharge",3]]],[11,"on_verify_seal","","Returns gas required for seal verification.",7,[[["sealverifyinfo",3]],["gascharge",3]]],[11,"on_verify_post","","Returns gas required for PoSt verification.",7,[[["windowpostverifyinfo",3]],["gascharge",3]]],[11,"on_verify_consensus_fault","","Returns gas required for verifying consensus fault.",7,[[],["gascharge",3]]],[11,"new","","",8,[[["chainepoch",6],["bigint",3],["cid",3]],[["string",3],["result",4]]]],[11,"register_actor","","Registers an actor that is not part of the set of default …",8,[[["cid",3]],["bool",15]]],[11,"registered_actors","","Gets registered actors that are not part of the set of …",8,[[],["hashset",3]]],[11,"flush","","Flush stores in VM and return state root.",8,[[],[["cid",3],["box",3],["result",4]]]],[11,"state","","Returns a reference to the VM\'s state tree.",8,[[],["statetree",3]]],[11,"migrate_state","","Flushes the StateTree and perform a state migration if …",8,[[["chainepoch",6]],[["box",3],["option",4],["result",4]]]],[11,"apply_block_messages","","Apply block messages from a Tipset. Returns the receipts …",8,[[["chainepoch",6],["option",4]],[["box",3],["vec",3],["result",4]]]],[11,"apply_implicit_message","","Applies single message through vm and returns result from …",8,[[["unsignedmessage",3]],["applyret",3]]],[11,"apply_message","","Applies the state transition for a single message. …",8,[[["chainmessage",4]],[["applyret",3],["string",3],["result",4]]]]],"p":[[3,"GasCharge"],[8,"Rand"],[3,"BlockMessages"],[8,"CircSupplyCalc"],[8,"LookbackStateGetter"],[3,"ApplyRet"],[3,"DefaultRuntime"],[3,"PriceList"],[3,"VM"]]},\
"ipld_amt":{"doc":"AMT crate for use as rust IPLD data structure","i":[[3,"Amt","ipld_amt","Array Mapped Trie allows for the insertion and …",null,null],[4,"Error","","AMT Error",null,null],[13,"OutOfRange","","Index referenced it above arbitrary max set",0,null],[13,"MaxHeight","","Height of root node is greater than max.",0,null],[13,"Cid","","Error generating a Cid for data",0,null],[13,"Cached","","Error when trying to serialize an AMT without a flushed …",0,null],[13,"InvalidVecLength","","Serialized vector less than number of bits set",0,null],[13,"LinksAndValues","","Invalid formatted serialized node.",0,null],[13,"CidNotFound","","Cid not found in store error",0,null],[13,"Dynamic","","Dynamic error for when the error needs to be forwarded as …",0,null],[13,"Other","","Custom AMT error",0,null],[3,"ValueMut","","A wrapper around a mutable reference to a value in an …",null,null],[17,"MAX_INDEX","","MaxIndex is the maximum index for elements in the AMT. …",null,null],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",0,[[["ciderror",4]]]],[11,"from","","",0,[[["encodingerror",3]]]],[11,"from","","",0,[[["box",3],["stderror",8]]]],[11,"eq","","",1,[[],["bool",15]]],[11,"deref","","",2,[[]]],[11,"deref_mut","","",2,[[]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"source","","",0,[[],[["option",4],["error",8]]]],[11,"new","","Constructor for Root AMT node",1,[[]]],[11,"new_with_bit_width","","Construct new Amt with given bit width.",1,[[["usize",15]]]],[11,"load","","Constructs an AMT with a blockstore and a Cid of the root …",1,[[["cid",3]],[["error",4],["result",4]]]],[11,"height","","Gets the height of the <code>Amt</code>.",1,[[],["usize",15]]],[11,"count","","Gets count of elements added in the <code>Amt</code>.",1,[[],["usize",15]]],[11,"new_from_iter","","Generates an AMT with block store and array of cbor …",1,[[],[["cid",3],["error",4],["result",4]]]],[11,"get","","Get value at index of AMT",1,[[["usize",15]],[["option",4],["error",4],["result",4]]]],[11,"set","","Set value at index",1,[[["usize",15]],[["result",4],["error",4]]]],[11,"batch_set","","Batch set (naive for now)",1,[[],[["result",4],["error",4]]]],[11,"delete","","Delete item from AMT at index",1,[[["usize",15]],[["option",4],["result",4],["error",4]]]],[11,"batch_delete","","Deletes multiple items from AMT If <code>strict</code> is true, all …",1,[[["bool",15]],[["bool",15],["error",4],["result",4]]]],[11,"flush","","flush root and return Cid used as key in block store",1,[[],[["cid",3],["error",4],["result",4]]]],[11,"for_each","","Iterates over each value in the Amt and runs a function …",1,[[],[["box",3],["result",4]]]],[11,"for_each_while","","Iterates over each value in the Amt and runs a function …",1,[[],[["box",3],["result",4]]]],[11,"for_each_mut","","Iterates over each value in the Amt and runs a function …",1,[[],[["box",3],["result",4]]]],[11,"for_each_while_mut","","Iterates over each value in the Amt and runs a function …",1,[[],[["box",3],["result",4]]]],[11,"new","","",2,[[]]],[11,"value_changed","","",2,[[],["bool",15]]],[11,"mark_unchanged","","Marks guard as unchanged. This should only be used when …",2,[[]]]],"p":[[4,"Error"],[3,"Amt"],[3,"ValueMut"]]},\
"ipld_blockstore":{"doc":"","i":[[0,"resolve","ipld_blockstore","This module is used for resolving Cids and Ipld …",null,null],[5,"resolve_cids_recursive","ipld_blockstore::resolve","Resolves link to recursively resolved [Ipld] with no hash …",null,[[["u64",15],["cid",3],["option",4]],[["result",4],["ipld",4],["box",3]]]],[5,"resolve_ipld","","Resolves [Ipld] links recursively, building an [Ipld] …",null,[[["ipld",4],["option",4],["u64",15]],[["result",4],["box",3]]]],[3,"BufferedBlockStore","ipld_blockstore","Wrapper around <code>BlockStore</code> to limit and have control over …",null,null],[8,"BlockStore","","Wrapper for database to handle inserting and retrieving …",null,null],[11,"get_bytes","","Get bytes from block store by Cid.",0,[[["cid",3]],[["box",3],["option",4],["result",4]]]],[11,"get","","Get typed object from block store by Cid.",0,[[["cid",3]],[["result",4],["box",3],["option",4]]]],[11,"put","","Put an object in the block store and return the Cid …",0,[[["code",4]],[["box",3],["result",4],["cid",3]]]],[11,"put_raw","","Put raw bytes in the block store and return the Cid …",0,[[["code",4],["vec",3],["u8",15]],[["box",3],["result",4],["cid",3]]]],[11,"bulk_put","","Batch put cbor objects into blockstore and returns vector …",0,[[["code",4]],[["result",4],["box",3],["vec",3]]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"get_bytes","","",1,[[["cid",3]],[["box",3],["option",4],["result",4]]]],[11,"put_raw","","",1,[[["code",4],["vec",3],["u8",15]],[["box",3],["result",4],["cid",3]]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"read","","",1,[[],[["error",4],["result",4],["option",4]]]],[11,"write","","",1,[[],[["error",4],["result",4]]]],[11,"delete","","",1,[[],[["error",4],["result",4]]]],[11,"exists","","",1,[[],[["bool",15],["error",4],["result",4]]]],[11,"bulk_read","","",1,[[],[["error",4],["result",4],["vec",3]]]],[11,"bulk_write","","",1,[[],[["error",4],["result",4]]]],[11,"bulk_delete","","",1,[[],[["error",4],["result",4]]]],[11,"new","","",1,[[]]],[11,"flush","","Flushes the buffered cache based on the root node. This …",1,[[["cid",3]],[["result",4],["box",3]]]]],"p":[[8,"BlockStore"],[3,"BufferedBlockStore"]]},\
"ipld_hamt":{"doc":"HAMT crate for use as rust IPLD data structure","i":[[4,"Error","ipld_hamt","HAMT Error",null,null],[13,"MaxDepth","","Maximum depth error",0,null],[13,"InvalidHashBitLen","","Hash bits does not support greater than 8 bit width",0,null],[13,"ZeroPointers","","This should be treated as a fatal error, must have at …",0,null],[13,"CidNotFound","","Cid not found in store error",0,null],[13,"Dynamic","","Dynamic error for when the error needs to be forwarded as …",0,null],[13,"Other","","Custom HAMT error",0,null],[3,"Hamt","","Implementation of the HAMT data structure for IPLD.",null,null],[8,"HashAlgorithm","","Algorithm used as the hasher for the Hamt.",null,null],[10,"hash","","",1,[[]]],[4,"Sha256","","Sha256 hashing algorithm used for hashing keys in the …",null,null],[3,"BytesKey","","Key type to be used to serialize as byte string instead …",null,null],[12,"0","","",2,null],[8,"Hash","","Custom trait to avoid issues like …",null,null],[10,"hash","","",3,[[]]],[11,"hash_slice","","",3,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"equivalent","","",2,[[],["bool",15]]],[11,"borrow","","",2,[[],["vec",3]]],[11,"borrow","","",2,[[]]],[11,"fmt","","",2,[[["formatter",3]],[["error",3],["result",4]]]],[11,"hash","","",2,[[]]],[11,"deref","","",2,[[]]],[11,"clone","","",2,[[],["byteskey",3]]],[11,"partial_cmp","","",2,[[["byteskey",3]],[["option",4],["ordering",4]]]],[11,"lt","","",2,[[["byteskey",3]],["bool",15]]],[11,"le","","",2,[[["byteskey",3]],["bool",15]]],[11,"gt","","",2,[[["byteskey",3]],["bool",15]]],[11,"ge","","",2,[[["byteskey",3]],["bool",15]]],[11,"eq","","",2,[[["byteskey",3]],["bool",15]]],[11,"ne","","",2,[[["byteskey",3]],["bool",15]]],[11,"deserialize","","",2,[[],[["result",4],["byteskey",3]]]],[11,"serialize","","",2,[[],["result",4]]],[11,"from","","",2,[[["global",3],["vec",3],["u8",15]],["byteskey",3]]],[11,"from","","",2,[[],["byteskey",3]]],[11,"from","","",2,[[["str",15]],["byteskey",3]]],[11,"hash","","",5,[[]]],[11,"from","","",0,[[["encodingerror",3]]]],[11,"from","","",0,[[["stderror",8],["box",3]]]],[11,"eq","","",4,[[],["bool",15]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"serialize","","",4,[[],["result",4]]],[11,"new","","",4,[[]]],[11,"new_with_bit_width","","Construct hamt with a bit width",4,[[["u32",15]]]],[11,"load","","Lazily instantiate a hamt from this root Cid.",4,[[["cid",3]],[["result",4],["error",4]]]],[11,"load_with_bit_width","","Lazily instantiate a hamt from this root Cid with a …",4,[[["u32",15],["cid",3]],[["result",4],["error",4]]]],[11,"set_root","","Sets the root based on the Cid of the root node using the …",4,[[["cid",3]],[["result",4],["error",4]]]],[11,"store","","Returns a reference to the underlying store of the Hamt.",4,[[]]],[11,"set","","Inserts a key-value pair into the HAMT.",4,[[],[["error",4],["result",4],["option",4]]]],[11,"set_if_absent","","Inserts a key-value pair into the HAMT only if that key …",4,[[],[["bool",15],["error",4],["result",4]]]],[11,"get","","Returns a reference to the value corresponding to the key.",4,[[],[["result",4],["option",4],["error",4]]]],[11,"contains_key","","Returns <code>true</code> if a value exists for the given key in the …",4,[[],[["bool",15],["error",4],["result",4]]]],[11,"delete","","Removes a key from the HAMT, returning the value at the …",4,[[],[["error",4],["result",4],["option",4]]]],[11,"flush","","Flush root and return Cid for hamt",4,[[],[["result",4],["cid",3],["error",4]]]],[11,"is_empty","","Returns true if the HAMT has no entries",4,[[],["bool",15]]],[11,"for_each","","Iterates over each KV in the Hamt and runs a function on …",4,[[],[["result",4],["box",3]]]]],"p":[[4,"Error"],[8,"HashAlgorithm"],[3,"BytesKey"],[8,"Hash"],[3,"Hamt"],[4,"Sha256"]]},\
"key_management":{"doc":"","i":[[0,"json","key_management","",null,null],[3,"KeyInfoJson","key_management::json","Wrapper for serializing and deserializing a SignedMessage …",null,null],[12,"0","","",0,null],[3,"KeyInfoJsonRef","","Wrapper for serializing a SignedMessage reference to JSON.",null,null],[12,"0","","",1,null],[5,"serialize","","",null,[[["keyinfo",3]],["result",4]]],[5,"deserialize","","",null,[[],[["result",4],["keyinfo",3]]]],[4,"Error","key_management","",null,null],[13,"KeyInfo","","info that corresponds to key does not exist",2,null],[13,"KeyExists","","Key already exists in keystore",2,null],[13,"KeyNotExists","","",2,null],[13,"NoKey","","",2,null],[13,"IO","","",2,null],[13,"Other","","",2,null],[13,"KeyInfoConversion","","",2,null],[17,"KEYSTORE_NAME","","",null,null],[17,"ENCRYPTED_KEYSTORE_NAME","","",null,null],[3,"KeyInfo","","KeyInfo struct, this contains the type of key (stored as …",null,null],[3,"PersistentKeyInfo","","",null,null],[8,"Store","","KeyStore struct, this contains a HashMap that is a set of …",null,null],[10,"list","","Return all of the keys that are stored in the KeyStore",3,[[],[["string",3],["vec",3]]]],[10,"get","","Return Keyinfo that corresponds to a given key",3,[[["str",15]],[["result",4],["keyinfo",3],["error",4]]]],[10,"put","","Save a key key_info pair to the KeyStore",3,[[["string",3],["keyinfo",3]],[["error",4],["result",4]]]],[10,"remove","","Remove the Key and corresponding key_info from the …",3,[[["string",3]],[["result",4],["keyinfo",3],["error",4]]]],[3,"KeyStore","","KeyStore struct, this contains a HashMap that is a set of …",null,null],[4,"KeyStoreConfig","","",null,null],[13,"Memory","","",4,null],[13,"Persistent","","",4,null],[13,"Encrypted","","",4,null],[4,"EncryptedKeyStoreError","","",null,null],[13,"DecryptionError","","Possibly indicates incorrect passphrase",5,null],[13,"EncryptionError","","An error occured while encrypting keys",5,null],[13,"ConfigurationError","","Unlock called without <code>encrypted_keystore</code> being enabled in …",5,null],[3,"Key","","A Key, this contains a key_info, address, and public_key …",null,null],[12,"key_info","","",6,null],[12,"public_key","","",6,null],[12,"address","","",6,null],[3,"Wallet","","This is a Wallet, it contains 2 HashMaps:",null,null],[5,"get_default","","Return the default Address for KeyStore",null,[[["keystore",3]],[["result",4],["error",4],["address",3]]]],[5,"list_addrs","","Return Vec of Addresses sorted by their string …",null,[[["keystore",3]],[["error",4],["result",4],["vec",3]]]],[5,"find_key","","Return Key corresponding to given Address in KeyStore",null,[[["address",3],["keystore",3]],[["error",4],["key",3],["result",4]]]],[5,"try_find","","",null,[[["keystore",3],["address",3]],[["result",4],["keyinfo",3],["error",4]]]],[5,"export_key_info","","Return keyInfo for given Address in KeyStore",null,[[["address",3],["keystore",3]],[["result",4],["keyinfo",3],["error",4]]]],[5,"generate_key","","Generate new Key of given SignatureType",null,[[["signaturetype",4]],[["error",4],["key",3],["result",4]]]],[5,"import","","Import KeyInfo into KeyStore",null,[[["keystore",3],["keyinfo",3]],[["result",4],["error",4],["address",3]]]],[5,"to_public","","Return the public key for a given private_key and …",null,[[["signaturetype",4]],[["error",4],["result",4],["vec",3]]]],[5,"new_address","","Return a new Address that is of a given SignatureType and …",null,[[["signaturetype",4]],[["result",4],["error",4],["address",3]]]],[5,"sign","","Sign takes in SignatureType, private key and message. …",null,[[["signaturetype",4]],[["signature",3],["error",4],["result",4]]]],[5,"generate","","Generate a new private key",null,[[["signaturetype",4]],[["error",4],["result",4],["vec",3]]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_string","","",2,[[],["string",3]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","key_management::json","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","key_management","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"vzip","","",7,[[]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"vzip","","",8,[[]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"vzip","","",9,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_string","","",5,[[],["string",3]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"vzip","","",5,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"vzip","","",6,[[]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"vzip","","",10,[[]]],[11,"from","","",2,[[["error",3]]]],[11,"from","","",7,[[["keyinfojson",3]],["keyinfo",3]]],[11,"clone","","",7,[[],["keyinfo",3]]],[11,"clone","","",8,[[],["persistentkeyinfo",3]]],[11,"clone","key_management::json","",0,[[],["keyinfojson",3]]],[11,"clone","key_management","",9,[[],["keystore",3]]],[11,"clone","","",6,[[],["key",3]]],[11,"clone","","",10,[[],["wallet",3]]],[11,"eq","","",2,[[["error",4]],["bool",15]]],[11,"ne","","",2,[[["error",4]],["bool",15]]],[11,"eq","","",7,[[["keyinfo",3]],["bool",15]]],[11,"ne","","",7,[[["keyinfo",3]],["bool",15]]],[11,"eq","","",8,[[["persistentkeyinfo",3]],["bool",15]]],[11,"ne","","",8,[[["persistentkeyinfo",3]],["bool",15]]],[11,"eq","","",9,[[["keystore",3]],["bool",15]]],[11,"ne","","",9,[[["keystore",3]],["bool",15]]],[11,"eq","","",6,[[["key",3]],["bool",15]]],[11,"ne","","",6,[[["key",3]],["bool",15]]],[11,"eq","","",10,[[["wallet",3]],["bool",15]]],[11,"ne","","",10,[[["wallet",3]],["bool",15]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"try_from","","",6,[[["keyinfo",3]],["result",4]]],[11,"serialize","","",7,[[],["result",4]]],[11,"serialize","","",8,[[],["result",4]]],[11,"serialize","key_management::json","",0,[[],["result",4]]],[11,"serialize","","",1,[[],["result",4]]],[11,"serialize","key_management","",6,[[],["result",4]]],[11,"deserialize","","",7,[[],["result",4]]],[11,"deserialize","","",8,[[],["result",4]]],[11,"deserialize","key_management::json","",0,[[],["result",4]]],[11,"deserialize","key_management","",6,[[],["result",4]]],[11,"new","","Return a new KeyInfo given the key_type and private_key",7,[[["signaturetype",4],["vec",3],["u8",15]]]],[11,"key_type","","Return a reference to the key_type",7,[[],["signaturetype",4]]],[11,"private_key","","Return a reference to the private_key",7,[[],["vec",3]]],[11,"new","","",9,[[["keystoreconfig",4]],[["error",4],["result",4]]]],[11,"flush","","",9,[[],[["error",4],["result",4]]]],[11,"list","","Return all of the keys that are stored in the KeyStore",9,[[],[["string",3],["vec",3]]]],[11,"get","","Return Keyinfo that corresponds to a given key",9,[[["str",15]],[["result",4],["keyinfo",3],["error",4]]]],[11,"put","","Save a key key_info pair to the KeyStore",9,[[["string",3],["keyinfo",3]],[["error",4],["result",4]]]],[11,"remove","","Remove the Key and corresponding key_info from the …",9,[[["string",3]],[["result",4],["keyinfo",3],["error",4]]]],[11,"new","","Return a new Wallet with a given KeyStore",10,[[["keystore",3]]]],[11,"new_from_keys","","Return a wallet from a given amount of keys. This wallet …",10,[[["keystore",3]]]],[11,"find_key","","Return the Key that is resolved by a given Address, If …",10,[[["address",3]],[["error",4],["key",3],["result",4]]]],[11,"sign","","Return the resultant Signature after signing a given …",10,[[["address",3]],[["signature",3],["error",4],["result",4]]]],[11,"export","","Return the KeyInfo for a given Address",10,[[["address",3]],[["result",4],["keyinfo",3],["error",4]]]],[11,"import","","Add Key_Info to the Wallet, return the Address that …",10,[[["keyinfo",3]],[["result",4],["error",4],["address",3]]]],[11,"list_addrs","","Return a Vec that contains all of the Addresses in the …",10,[[],[["error",4],["result",4],["vec",3]]]],[11,"get_default","","Return the Address of the default KeyInfo in the Wallet",10,[[],[["result",4],["error",4],["address",3]]]],[11,"set_default","","Set a default KeyInfo to the Wallet",10,[[["address",3]],[["error",4],["result",4]]]],[11,"generate_addr","","Generate a new Address that fits the requirement of the …",10,[[["signaturetype",4]],[["result",4],["error",4],["address",3]]]],[11,"has_key","","Return whether or not the Wallet contains a Key that is …",10,[[["address",3]],["bool",15]]]],"p":[[3,"KeyInfoJson"],[3,"KeyInfoJsonRef"],[4,"Error"],[8,"Store"],[4,"KeyStoreConfig"],[4,"EncryptedKeyStoreError"],[3,"Key"],[3,"KeyInfo"],[3,"PersistentKeyInfo"],[3,"KeyStore"],[3,"Wallet"]]},\
"message_pool":{"doc":"","i":[[0,"test_provider","message_pool","Contains mock implementations for testing internal …",null,null],[3,"TestApi","message_pool::test_provider","Struct used for creating a provider when writing tests …",null,null],[5,"create_header","","",null,[[["u64",15]],["blockheader",3]]],[5,"mock_block","","",null,[[["u64",15]],["blockheader",3]]],[5,"mock_block_with_epoch","","",null,[[["i64",15],["u64",15]],["blockheader",3]]],[5,"mock_block_with_parents","","",null,[[["tipset",3],["u64",15]],["blockheader",3]]],[5,"block_probabilities","message_pool","",null,[[["f64",15]],[["f64",15],["vec",3]]]],[3,"MpoolConfig","","Config available for the MessagePool.",null,null],[12,"priority_addrs","","",0,null],[12,"size_limit_high","","",0,null],[12,"size_limit_low","","",0,null],[12,"replace_by_fee_ratio","","",0,null],[12,"prune_cooldown","","",0,null],[12,"gas_limit_overestimation","","",0,null],[4,"Error","","MessagePool error.",null,null],[13,"MessageTooBig","","Error indicating message that\'s too large",1,null],[13,"GasPriceTooLow","","",1,null],[13,"GasFeeCapTooLow","","",1,null],[13,"MessageValueTooHigh","","",1,null],[13,"SequenceTooLow","","",1,null],[13,"NotEnoughFunds","","",1,null],[13,"InvalidToAddr","","",1,null],[13,"InvalidFromAddr","","",1,null],[13,"DuplicateSequence","","",1,null],[13,"TryAgain","","",1,null],[13,"SoftValidationFailure","","",1,null],[13,"Other","","",1,null],[3,"MessagePool","","This contains all necessary information needed for the …",null,null],[12,"pending","","A map of pending messages where the key is the address",2,null],[12,"cur_tipset","","The current tipset (a set of blocks)",2,null],[12,"api","","The underlying provider",2,null],[12,"min_gas_price","","The minimum gas price needed for executing the …",2,null],[12,"max_tx_pool_size","","This is max number of messages in the pool.",2,null],[12,"network_name","","TODO",2,null],[12,"network_sender","","Sender half to send messages to other components",2,null],[12,"bls_sig_cache","","A cache for BLS signature keyed by Cid",2,null],[12,"sig_val_cache","","A cache for BLS signature keyed by Cid",2,null],[12,"republished","","A set of republished messages identified by their Cid",2,null],[12,"repub_trigger","","Acts as a signal to republish messages from the …",2,null],[12,"config","","Configurable parameters of the message pool",2,null],[3,"MpoolRpcProvider","","This is the default Provider implementation that will be …",null,null],[8,"Provider","","Provider Trait. This trait will be used by the …",null,null],[10,"subscribe_head_changes","","Update Mpool\'s cur_tipset whenever there is a chnge to …",3,[[],[["pin",3],["box",3]]]],[10,"get_heaviest_tipset","","Get the heaviest Tipset in the provider",3,[[],[["pin",3],["box",3]]]],[10,"put_message","","Add a message to the MpoolProvider, return either Cid or …",3,[[["chainmessage",4]],[["result",4],["cid",3],["error",4]]]],[10,"get_actor_after","","Return state actor for given address given the tipset …",3,[[["tipset",3],["address",3]],[["error",4],["result",4],["actorstate",3]]]],[10,"messages_for_block","","Return the signed messages for given blockheader",3,[[["blockheader",3]],[["result",4],["error",4]]]],[10,"state_account_key","","Resolves to the key address",3,[[["address",3],["arc",3]],[["pin",3],["box",3]]]],[10,"messages_for_tipset","","Return all messages for a tipset",3,[[["tipset",3]],[["error",4],["result",4],["vec",3]]]],[10,"load_tipset","","Return a tipset given the tipset keys from the ChainStore",3,[[["tipsetkeys",3]],[["pin",3],["box",3]]]],[10,"chain_compute_base_fee","","Computes the base fee",3,[[["tipset",3]],[["error",4],["bigint",3],["result",4]]]],[5,"head_change","","This function will revert and/or apply tipsets to the …",null,[[["rwlock",3],["vec",3],["tipset",3],["arc",3],["sender",3],["rwlock",3],["rwlock",3],["rwlock",3],["rwlock",3]]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"to_subset","","",0,[[],["option",4]]],[11,"is_in_subset","","",0,[[],["bool",15]]],[11,"to_subset_unchecked","","",0,[[]]],[11,"from_subset","","",0,[[]]],[11,"init","","",0,[[],["usize",15]]],[11,"deref","","",0,[[["usize",15]]]],[11,"deref_mut","","",0,[[["usize",15]]]],[11,"drop","","",0,[[["usize",15]]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_string","","",1,[[],["string",3]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"to_subset","","",1,[[],["option",4]]],[11,"is_in_subset","","",1,[[],["bool",15]]],[11,"to_subset_unchecked","","",1,[[]]],[11,"from_subset","","",1,[[]]],[11,"init","","",1,[[],["usize",15]]],[11,"deref","","",1,[[["usize",15]]]],[11,"deref_mut","","",1,[[["usize",15]]]],[11,"drop","","",1,[[["usize",15]]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"to_subset","","",2,[[],["option",4]]],[11,"is_in_subset","","",2,[[],["bool",15]]],[11,"to_subset_unchecked","","",2,[[]]],[11,"from_subset","","",2,[[]]],[11,"init","","",2,[[],["usize",15]]],[11,"deref","","",2,[[["usize",15]]]],[11,"deref_mut","","",2,[[["usize",15]]]],[11,"drop","","",2,[[["usize",15]]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"to_subset","","",4,[[],["option",4]]],[11,"is_in_subset","","",4,[[],["bool",15]]],[11,"to_subset_unchecked","","",4,[[]]],[11,"from_subset","","",4,[[]]],[11,"init","","",4,[[],["usize",15]]],[11,"deref","","",4,[[["usize",15]]]],[11,"deref_mut","","",4,[[["usize",15]]]],[11,"drop","","",4,[[["usize",15]]]],[11,"from","message_pool::test_provider","",5,[[]]],[11,"into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"vzip","","",5,[[]]],[11,"to_subset","","",5,[[],["option",4]]],[11,"is_in_subset","","",5,[[],["bool",15]]],[11,"to_subset_unchecked","","",5,[[]]],[11,"from_subset","","",5,[[]]],[11,"init","","",5,[[],["usize",15]]],[11,"deref","","",5,[[["usize",15]]]],[11,"deref_mut","","",5,[[["usize",15]]]],[11,"drop","","",5,[[["usize",15]]]],[11,"subscribe_head_changes","message_pool","",4,[[],[["pin",3],["box",3]]]],[11,"get_heaviest_tipset","","",4,[[],[["pin",3],["box",3]]]],[11,"put_message","","",4,[[["chainmessage",4]],[["result",4],["cid",3],["error",4]]]],[11,"get_actor_after","","",4,[[["tipset",3],["address",3]],[["error",4],["result",4],["actorstate",3]]]],[11,"messages_for_block","","",4,[[["blockheader",3]],[["result",4],["error",4]]]],[11,"messages_for_tipset","","",4,[[["tipset",3]],[["error",4],["result",4],["vec",3]]]],[11,"load_tipset","","",4,[[["tipsetkeys",3]],[["pin",3],["box",3]]]],[11,"chain_compute_base_fee","","",4,[[["tipset",3]],[["error",4],["bigint",3],["result",4]]]],[11,"state_account_key","","",4,[[["address",3],["arc",3]],[["pin",3],["box",3]]]],[11,"subscribe_head_changes","message_pool::test_provider","",5,[[],[["pin",3],["box",3]]]],[11,"get_heaviest_tipset","","",5,[[],[["pin",3],["box",3]]]],[11,"put_message","","",5,[[["chainmessage",4]],[["result",4],["cid",3],["error",4]]]],[11,"get_actor_after","","",5,[[["tipset",3],["address",3]],[["error",4],["result",4],["actorstate",3]]]],[11,"messages_for_block","","",5,[[["blockheader",3]],[["result",4],["error",4]]]],[11,"state_account_key","","",5,[[["address",3],["arc",3]],[["pin",3],["box",3]]]],[11,"messages_for_tipset","","",5,[[["tipset",3]],[["error",4],["result",4],["vec",3]]]],[11,"load_tipset","","",5,[[["tipsetkeys",3]],[["pin",3],["box",3]]]],[11,"chain_compute_base_fee","","",5,[[["tipset",3]],[["error",4],["bigint",3],["result",4]]]],[11,"from","message_pool","",1,[[["chainerror",4]]]],[11,"from","","",1,[[["encodeerror",3]]]],[11,"clone","","",0,[[],["mpoolconfig",3]]],[11,"default","","",0,[[]]],[11,"default","message_pool::test_provider","Create a new TestApi",5,[[]]],[11,"eq","message_pool","",1,[[["error",4]],["bool",15]]],[11,"ne","","",1,[[["error",4]],["bool",15]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"deserialize","","",0,[[],["result",4]]],[11,"serialize","","",0,[[],["result",4]]],[11,"new","","",0,[[["f64",15],["vec",3],["i64",15],["address",3],["duration",3]],[["result",4],["string",3]]]],[11,"save_config","","Saves message pool config to the database, to easily …",0,[[],[["result",4],["box",3]]]],[11,"load_config","","Load config from store, if exists. If there is no config, …",0,[[],[["result",4],["box",3]]]],[11,"size_limit_low","","Returns the low limit capacity of messages to allocate.",0,[[],["i64",15]]],[11,"priority_addrs","","Returns slice of [Address]es to prioritize when selecting …",0,[[]]],[11,"new","","Creates a new MessagePool instance.",2,[[["mpoolconfig",3],["sender",3],["string",3],["networkmessage",4]]]],[11,"push","","Push a signed message to the MessagePool. Additionally …",2,[[["signedmessage",3]]]],[11,"add","","This is a helper to push that will help to make sure that …",2,[[["signedmessage",3]]]],[11,"add_skip_checks","","Add a SignedMessage without doing any of the checks.",2,[[["signedmessage",3]]]],[11,"get_sequence","","Get the sequence for a given address, return Error if …",2,[[["address",3]]]],[11,"push_with_sequence","","Adds a local message returned from the call back function …",2,[[["address",3]]]],[11,"remove","","Remove a message given a sequence and address from the …",2,[[["u64",15],["bool",15],["address",3]]]],[11,"pending","","Return a tuple that contains a vector of all signed …",2,[[]]],[11,"pending_for","","Return a Vector of signed messages for a given from …",2,[[["address",3]]]],[11,"messages_for_blocks","","Return Vector of signed messages given a block header for …",2,[[]]],[11,"estimate_gas_premium","","Return gas price estimate this has been translated from …",2,[[["tipsetkeys",3],["address",3],["u64",15]],[["error",4],["bigint",3],["result",4]]]],[11,"load_local","","Loads local messages to the message pool to be applied.",2,[[]]],[11,"clear","","If <code>local = true</code>, the local messages will be removed as …",2,[[["bool",15]]]],[11,"get_config","","",2,[[],["mpoolconfig",3]]],[11,"set_config","","",2,[[["mpoolconfig",3]],[["error",4],["result",4]]]],[11,"new","","",4,[[["headchange",4],["arc",3],["publisher",3],["statemanager",3]]]],[11,"select_messages","","Forest employs a sophisticated algorithm for selecting …",2,[[["tipset",3],["f64",15]]]],[11,"set_state_sequence","message_pool::test_provider","Set the state sequence for an Address for TestApi",5,[[["u64",15],["address",3]]]],[11,"set_state_balance_raw","","Set the state balance for an Address for TestApi",5,[[["bigint",3],["address",3]]]],[11,"set_block_messages","","Set the block messages for TestApi",5,[[["blockheader",3],["vec",3],["signedmessage",3]]]],[11,"set_heaviest_tipset","","Set the heaviest tipset for TestApi",5,[[["tipset",3],["arc",3]]]],[11,"next_block","","",5,[[],["blockheader",3]]]],"p":[[3,"MpoolConfig"],[4,"Error"],[3,"MessagePool"],[8,"Provider"],[3,"MpoolRpcProvider"],[3,"TestApi"]]},\
"net_utils":{"doc":"","i":[[3,"FetchProgress","net_utils","Holds a Reader, tracks read progress and draw a progress …",null,null],[12,"inner","","",0,null],[12,"progress_bar","","",0,null],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"try_from","","",0,[[["url",3]],["result",4]]],[11,"try_from","","",0,[[["file",3]],["result",4]]],[11,"poll_read","","",0,[[["pin",3],["context",3]],[["result",4],["poll",4]]]],[11,"finish","","",0,[[]]]],"p":[[3,"FetchProgress"]]},\
"networks":{"doc":"","i":[[17,"DEFAULT_GENESIS","networks","Default genesis car file bytes.",null,null],[17,"UPGRADE_BREEZE_HEIGHT","","V1 network upgrade",null,null],[17,"UPGRADE_SMOKE_HEIGHT","","V2 network upgrade",null,null],[17,"UPGRADE_IGNITION_HEIGHT","","V3 network upgrade",null,null],[17,"UPGRADE_ACTORS_V2_HEIGHT","","V4 network upgrade",null,null],[17,"UPGRADE_TAPE_HEIGHT","","V5 network upgrade",null,null],[17,"UPGRADE_LIFTOFF_HEIGHT","","Switching to mainnet network name",null,null],[17,"UPGRADE_KUMQUAT_HEIGHT","","V6 network upgrade",null,null],[17,"UPGRADE_CALICO_HEIGHT","","V7 network upgrade",null,null],[17,"UPGRADE_PERSIAN_HEIGHT","","V8 network upgrade",null,null],[17,"UPGRADE_ORANGE_HEIGHT","","V9 network upgrade",null,null],[17,"UPGRADE_CLAUS_HEIGHT","","Remove burn on window PoSt fork",null,null],[17,"UPGRADE_ACTORS_V3_HEIGHT","","V10 network upgrade",null,null],[17,"UPGRADE_NORWEGIAN_HEIGHT","","V11 network upgrade",null,null],[17,"UPGRADE_ACTORS_V4_HEIGHT","","V12 network upgrade",null,null],[17,"UPGRADE_PLACEHOLDER_HEIGHT","","",null,null],[17,"NEWEST_NETWORK_VERSION","","Current network version for the network",null,null],[17,"DEFAULT_BOOTSTRAP","","Bootstrap peer ids",null,null],[17,"BLOCK_DELAY_SECS","","Time, in seconds, between each block.",null,null],[5,"get_network_version_default","","Gets network version from epoch using default Mainnet …",null,[[["chainepoch",6]],["networkversion",4]]],[5,"beacon_schedule_default","","Constructs a drand beacon schedule based on the build …",null,[[["u64",15]]]]],"p":[]},\
"paramfetch":{"doc":"","i":[[4,"SectorSizeOpt","paramfetch","Sector size options for fetching.",null,null],[13,"All","","All keys and proofs gen params",0,null],[13,"Keys","","Only verification params",0,null],[13,"Size","","All keys and proofs gen params for a given size",0,null],[5,"get_params","","Get proofs parameters and all verification keys for a …",null,[[["sectorsizeopt",4],["bool",15],["str",15]]]],[5,"get_params_default","","Get proofs parameters and all verification keys for a …",null,[[["bool",15],["sectorsizeopt",4]]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"init","","",0,[[],["usize",15]]],[11,"deref","","",0,[[["usize",15]]]],[11,"deref_mut","","",0,[[["usize",15]]]],[11,"drop","","",0,[[["usize",15]]]]],"p":[[4,"SectorSizeOpt"]]},\
"rpc":{"doc":"","i":[[3,"RpcState","rpc","This is where you store persistent data, or at least …",null,null],[12,"keystore","","",0,null],[12,"chain_store","","",0,null],[12,"state_manager","","",0,null],[12,"mpool","","",0,null],[12,"bad_blocks","","",0,null],[12,"sync_state","","",0,null],[12,"network_send","","",0,null],[12,"new_mined_block_tx","","",0,null],[12,"network_name","","",0,null],[12,"beacon","","",0,null],[5,"start_rpc","","",null,[[["rpcstate",3],["arc",3],["str",15]]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"init","","",0,[[],["usize",15]]],[11,"deref","","",0,[[["usize",15]]]],[11,"deref_mut","","",0,[[["usize",15]]]],[11,"drop","","",0,[[["usize",15]]]],[11,"to_subset","","",0,[[],["option",4]]],[11,"is_in_subset","","",0,[[],["bool",15]]],[11,"to_subset_unchecked","","",0,[[]]],[11,"from_subset","","",0,[[]]]],"p":[[3,"RpcState"]]},\
"rpc_client":{"doc":"","i":[[5,"auth_new","rpc_client","Creates a new JWT Token",null,[[["string",3],["rawclient",3]]]],[5,"block","","Returns a block with specified CID fom chain via RPC",null,[[["cid",3],["rawclient",3]]]],[5,"genesis","","Returns genesis tipset from chain via RPC",null,[[["rawclient",3]]]],[5,"head","","Returns canonical head of the chain via RPC",null,[[["rawclient",3]]]],[5,"messages","","Returns messages with specified CID from chain via RPC",null,[[["cid",3],["rawclient",3]]]],[5,"read_obj","","Returns IPLD node with specified CID from chain via RPC",null,[[["cid",3],["rawclient",3]]]],[4,"Filecoin","","",null,null],[13,"AuthNew","","",0,null],[12,"respond","rpc_client::Filecoin","",1,null],[12,"perm","","",1,null],[13,"ChainGetBlock","rpc_client","",0,null],[12,"respond","rpc_client::Filecoin","",2,null],[12,"cid","","",2,null],[13,"ChainGetGenesis","rpc_client","",0,null],[12,"respond","rpc_client::Filecoin","",3,null],[13,"ChainGetHead","rpc_client","",0,null],[12,"respond","rpc_client::Filecoin","",4,null],[13,"ChainGetMessages","rpc_client","",0,null],[12,"respond","rpc_client::Filecoin","",5,null],[12,"cid","","",5,null],[13,"ChainReadObj","rpc_client","",0,null],[12,"respond","rpc_client::Filecoin","",6,null],[12,"cid","","",6,null],[5,"new_client","rpc_client","",null,[[],[["httptransportclient",3],["rawclient",3]]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"init","","",0,[[],["usize",15]]],[11,"deref","","",0,[[["usize",15]]]],[11,"deref_mut","","",0,[[["usize",15]]]],[11,"drop","","",0,[[["usize",15]]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"next_request","","",0,[[["rawserver",3]]]],[11,"auth_new","","",0,[[["rawclient",3]]]],[11,"chain_get_block","","",0,[[["rawclient",3]]]],[11,"chain_get_genesis","","",0,[[["rawclient",3]]]],[11,"chain_get_head","","",0,[[["rawclient",3]]]],[11,"chain_get_messages","","",0,[[["rawclient",3]]]],[11,"chain_read_obj","","",0,[[["rawclient",3]]]]],"p":[[4,"Filecoin"],[13,"AuthNew"],[13,"ChainGetBlock"],[13,"ChainGetGenesis"],[13,"ChainGetHead"],[13,"ChainGetMessages"],[13,"ChainReadObj"]]},\
"serialization_tests":{"doc":"","i":[],"p":[]},\
"state_manager":{"doc":"","i":[[4,"Error","state_manager","State manager error",null,null],[13,"State","","Error orginating from state",0,null],[13,"VM","","Error from VM execution",0,null],[13,"ActorNotFound","","Actor for given address not found",0,null],[13,"ActorStateNotFound","","Actor state not found at given cid",0,null],[13,"DB","","Error originating from key-value store",0,null],[13,"Other","","Other state manager error",0,null],[3,"InvocResult","","Type to represent invocation of state call results.",null,null],[12,"msg","","",1,null],[12,"msg_rct","","",1,null],[12,"error","","",1,null],[3,"MarketBalance","","External format for returning market balance from state.",null,null],[3,"StateManager","","State manager handles all interactions with the internal …",null,null],[11,"new","","",2,[[["chainstore",3],["arc",3]]]],[11,"new_with_publisher","","Creates a constructor that passes in a HeadChange …",2,[[["arc",3],["publisher",3],["chainstore",3],["headchange",4]]]],[11,"get_network_version","","Returns network version for the given epoch.",2,[[["chainepoch",6]],["networkversion",4]]],[11,"get_actor","","Gets actor from given [Cid], if it exists.",2,[[["address",3],["cid",3]],[["result",4],["option",4],["error",4]]]],[11,"blockstore_cloned","","Returns the cloned [Arc] of the state manager\'s […",2,[[],["arc",3]]],[11,"blockstore","","Returns a reference to the state manager\'s [BlockStore].",2,[[]]],[11,"chain_store","","Returns reference to the state manager\'s [ChainStore].",2,[[],["arc",3]]],[11,"get_network_name","","Returns the network name from the init actor state.",2,[[["cid",3]],[["string",3],["error",4],["result",4]]]],[11,"is_miner_slashed","","Returns true if miner has been slashed or is considered …",2,[[["address",3],["cid",3]],[["result",4],["bool",15],["error",4]]]],[11,"get_miner_work_addr","","Returns raw work address of a miner given the state root.",2,[[["address",3],["cid",3]],[["result",4],["address",3],["error",4]]]],[11,"get_power","","Returns specified actor\'s claimed power and total network …",2,[[["address",3],["option",4],["cid",3]],[["result",4],["option",4],["error",4]]]],[11,"get_subscriber","","Subscribes to the [HeadChange]s observed by the state …",2,[[],[["option",4],["subscriber",3]]]],[11,"apply_blocks","","Performs the state transition for the tipset and applies …",2,[[["arc",3],["option",4],["bigint",3],["chainepoch",6],["arc",3],["cid",3]],[["result",4],["box",3]]]],[11,"tipset_state","","Returns the pair of (parent state root, message receipt …",2,[[["arc",3],["arc",3]]]],[11,"call","","runs the given message and returns its result without any …",2,[[["arc",3],["arc",3],["option",4],["unsignedmessage",3]]]],[11,"call_with_gas","","Computes message on the given [Tipset] state, after …",2,[[["arc",3],["arc",3],["option",4],["chainmessage",4]]]],[11,"replay","","Replays the given message and returns the result of …",2,[[["arc",3],["arc",3],["cid",3]]]],[11,"get_lookback_tipset_for_round","","Gets lookback tipset for block validations.",2,[[["arc",3],["arc",3],["tipset",3],["chainepoch",6]]]],[11,"eligible_to_mine","","Checks the eligibility of the miner. This is used in the …",2,[[["arc",3],["address",3],["tipset",3]],[["result",4],["bool",15],["error",4]]]],[11,"miner_get_base_info","","Get\'s a miner\'s base info from state, based on the …",2,[[["arc",3],["tipsetkeys",3],["address",3],["chainepoch",6],["beaconschedule",3]]]],[11,"compute_tipset_state","","Performs a state transition, and returns the state and …",2,[[["arc",3],["arc",3],["option",4]]]],[11,"get_receipt","","Returns a message receipt from a given tipset and message …",2,[[["tipset",3],["cid",3]]]],[11,"wait_for_message","","WaitForMessage blocks until a message appears on chain. …",2,[[["arc",3],["cid",3],["i64",15]]]],[11,"get_bls_public_key","","Returns a bls public key from provided address",2,[[["address",3],["cid",3]],[["result",4],["error",4]]]],[11,"get_heaviest_balance","","Return the heaviest tipset\'s balance from self.db for a …",2,[[["address",3]]]],[11,"get_balance","","Return the balance of a given address and state_cid",2,[[["address",3],["cid",3]],[["result",4],["error",4],["bigint",3]]]],[11,"lookup_id","","Looks up ID [Address] from the state at the given [Tipset]…",2,[[["address",3],["tipset",3]],[["result",4],["option",4],["error",4]]]],[11,"market_balance","","Retrieves market balance in escrow and locked tables.",2,[[["address",3],["tipset",3]],[["result",4],["error",4],["marketbalance",3]]]],[11,"resolve_to_key_addr","","Similar to <code>resolve_to_key_addr</code> in the vm crate but does …",2,[[["arc",3],["address",3],["arc",3]]]],[11,"miner_has_min_power","","Checks power actor state for if miner meets consensus …",2,[[["address",3],["tipset",3]],[["bool",15],["result",4],["box",3]]]],[11,"validate_chain","","",2,[[["arc",3],["arc",3],["tipset",3],["i64",15]]]],[11,"get_circulating_supply","","Retrieves total circulating supply on the network.",2,[[["arc",3],["chainepoch",6],["statetree",3]],[["result",4],["tokenamount",6],["box",3]]]],[11,"get_market_state","","Return the state of Market Actor.",2,[[["tipset",3]],[["result",4],["state",4],["error",4]]]],[3,"MiningBaseInfo","","Base miner info needed for the RPC API.",null,null],[12,"miner_power","","",3,null],[12,"network_power","","",3,null],[12,"sectors","","",3,null],[12,"worker_key","","",3,null],[12,"sector_size","","",3,null],[12,"prev_beacon_entry","","",3,null],[12,"beacon_entries","","",3,null],[12,"eligible_for_mining","","",3,null],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"init","","",0,[[],["usize",15]]],[11,"deref","","",0,[[["usize",15]]]],[11,"deref_mut","","",0,[[["usize",15]]]],[11,"drop","","",0,[[["usize",15]]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"init","","",1,[[],["usize",15]]],[11,"deref","","",1,[[["usize",15]]]],[11,"deref_mut","","",1,[[["usize",15]]]],[11,"drop","","",1,[[["usize",15]]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"init","","",4,[[],["usize",15]]],[11,"deref","","",4,[[["usize",15]]]],[11,"deref_mut","","",4,[[["usize",15]]]],[11,"drop","","",4,[[["usize",15]]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"init","","",2,[[],["usize",15]]],[11,"deref","","",2,[[["usize",15]]]],[11,"deref_mut","","",2,[[["usize",15]]]],[11,"drop","","",2,[[["usize",15]]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"init","","",3,[[],["usize",15]]],[11,"deref","","",3,[[["usize",15]]]],[11,"deref_mut","","",3,[[["usize",15]]]],[11,"drop","","",3,[[["usize",15]]]],[11,"from","","",0,[[["dberr",4]]]],[11,"from","","",0,[[["string",3]]]],[11,"from","","",0,[[["box",3],["stderror",8]]]],[11,"default","","",4,[[],["marketbalance",3]]],[11,"eq","","",0,[[["error",4]],["bool",15]]],[11,"ne","","",0,[[["error",4]],["bool",15]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"source","","",0,[[],[["option",4],["error",8]]]],[11,"serialize","","",1,[[],["result",4]]],[11,"serialize","","",4,[[],["result",4]]],[11,"deserialize","","",1,[[],["result",4]]],[11,"deserialize","","",4,[[],["result",4]]],[11,"get_sectors_for_winning_post","","Retrieves and generates a vector of sector info for the …",2,[[["networkversion",4],["randomness",3],["address",3],["cid",3]],[["vec",3],["box",3],["result",4]]]],[11,"get_miner_sector_set","","Loads sectors for miner at given [Address].",2,[[["address",3],["option",4],["tipset",3],["bitfield",3]],[["vec",3],["result",4],["error",4]]]],[11,"miner_sector_info","","Returns miner\'s sector info for a given index.",2,[[["address",3],["sectornumber",6],["tipset",3]],[["error",4],["result",4],["option",4]]]],[11,"precommit_info","","Returns the precommitted sector info for a miner\'s sector.",2,[[["address",3],["tipset",3],["sectornumber",6]],[["result",4],["sectorprecommitonchaininfo",3],["error",4]]]],[11,"get_miner_info","","Returns miner info at the given [Tipset]\'s state.",2,[[["address",3],["tipset",3]],[["minerinfo",3],["box",3],["result",4]]]],[11,"get_miner_faults","","Returns a bitfield of all miner\'s faulty sectors.",2,[[["address",3],["tipset",3]],[["box",3],["result",4],["bitfield",3]]]],[11,"get_miner_recoveries","","Returns bitfield of miner\'s recovering sectors.",2,[[["address",3],["tipset",3]],[["box",3],["result",4],["bitfield",3]]]],[11,"list_miner_actors","","Lists all miners that exist in the power actor state at …",2,[[["tipset",3]],[["result",4],["error",4],["vec",3]]]],[11,"get_miner_worker_raw","","Gets miner\'s worker address from state.",2,[[["address",3],["cid",3]],[["result",4],["address",3],["error",4]]]]],"p":[[4,"Error"],[3,"InvocResult"],[3,"StateManager"],[3,"MiningBaseInfo"],[3,"MarketBalance"]]},\
"state_tree":{"doc":"","i":[[3,"StateTree","state_tree","State tree implementation using hamt. This structure is …",null,null],[11,"new","","",0,[[["statetreeversion",4]],[["result",4],["box",3]]]],[11,"new_from_root","","Constructor for a hamt state tree given an IPLD store",0,[[["cid",3]],[["result",4],["box",3]]]],[11,"store","","Retrieve store reference to modify db.",0,[[]]],[11,"get_actor","","Get actor state from an address. Will be resolved to ID …",0,[[["address",3]],[["box",3],["result",4],["option",4]]]],[11,"set_actor","","Set actor state for an address. Will set state at ID …",0,[[["actorstate",3],["address",3]],[["result",4],["box",3]]]],[11,"lookup_id","","Get an ID address from any Address",0,[[["address",3]],[["result",4],["option",4],["box",3]]]],[11,"delete_actor","","Delete actor for an address. Will resolve to ID address …",0,[[["address",3]],[["result",4],["box",3]]]],[11,"mutate_actor","","Mutate and set actor state for an Address.",0,[[["address",3]],[["result",4],["box",3]]]],[11,"register_new_address","","Register a new address through the init actor.",0,[[["address",3]],[["result",4],["address",3],["box",3]]]],[11,"snapshot","","Add snapshot layer to stack.",0,[[],[["string",3],["result",4]]]],[11,"clear_snapshot","","Merges last two snap shot layers.",0,[[],[["string",3],["result",4]]]],[11,"revert_to_snapshot","","Revert state cache by removing last snapshot",0,[[],[["string",3],["result",4]]]],[11,"flush","","Flush state tree and return Cid root.",0,[[],[["result",4],["box",3],["cid",3]]]],[11,"for_each","","",0,[[],[["result",4],["box",3]]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"init","","",0,[[],["usize",15]]],[11,"deref","","",0,[[["usize",15]]]],[11,"deref_mut","","",0,[[["usize",15]]]],[11,"drop","","",0,[[["usize",15]]]]],"p":[[3,"StateTree"]]},\
"statediff":{"doc":"","i":[[5,"print_state_diff","statediff","Prints a diff of the resolved state tree. If the actor\'s …",null,[[["u64",15],["cid",3],["option",4]],[["result",4],["box",3]]]]],"p":[]},\
"test_utils":{"doc":"","i":[],"p":[]},\
"utils":{"doc":"","i":[[5,"write_to_file","utils","Writes a string to a specified file. Creates the desired …",null,[[["str",15]],["result",6]]],[5,"read_file_to_vec","","Read file as a <code>Vec<u8></code>",null,[[["str",15]],[["result",6],["vec",3]]]],[5,"read_file_to_string","","Read file as a <code>String</code>.",null,[[["str",15]],[["result",6],["string",3]]]],[5,"get_home_dir","","Gets the home directory of the current system. Will …",null,[[],["string",3]]],[5,"read_toml","","Converts a toml file represented as a string to <code>S</code>",null,[[["str",15]],["result",6]]]],"p":[]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);